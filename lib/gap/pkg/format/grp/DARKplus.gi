DARKplus:=function()
local g1,g2,g3,g4,g5,g6,g7,g8,g9,g10,g11,g12,g13,g14,g15,g16,g17,g18,g19,g20,\
g21,g22,g23,g24,g25,g26,g27,g28,g29,g30,g31,g32,g33,g34,g35,g36,g37,g38,g39,g\
40,g41,g42,g43,g44,g45,g46,g47,g48,g49,g50,g51,g52,g53,g54,g55,g56,g57,g58,g5\
9,g60,g61,r,f,g,rws,x;
f:=FreeGroup(61);
g:=GeneratorsOfGroup(f);
g1:=g[1];
g2:=g[2];
g3:=g[3];
g4:=g[4];
g5:=g[5];
g6:=g[6];
g7:=g[7];
g8:=g[8];
g9:=g[9];
g10:=g[10];
g11:=g[11];
g12:=g[12];
g13:=g[13];
g14:=g[14];
g15:=g[15];
g16:=g[16];
g17:=g[17];
g18:=g[18];
g19:=g[19];
g20:=g[20];
g21:=g[21];
g22:=g[22];
g23:=g[23];
g24:=g[24];
g25:=g[25];
g26:=g[26];
g27:=g[27];
g28:=g[28];
g29:=g[29];
g30:=g[30];
g31:=g[31];
g32:=g[32];
g33:=g[33];
g34:=g[34];
g35:=g[35];
g36:=g[36];
g37:=g[37];
g38:=g[38];
g39:=g[39];
g40:=g[40];
g41:=g[41];
g42:=g[42];
g43:=g[43];
g44:=g[44];
g45:=g[45];
g46:=g[46];
g47:=g[47];
g48:=g[48];
g49:=g[49];
g50:=g[50];
g51:=g[51];
g52:=g[52];
g53:=g[53];
g54:=g[54];
g55:=g[55];
g56:=g[56];
g57:=g[57];
g58:=g[58];
g59:=g[59];
g60:=g[60];
g61:=g[61];
rws:=SingleCollector(f,[ 3, 7, 2, 2, 2, 3, 31, 2, 2, 5, 5, 5, 3, 31, 2, 2, 5,\
 5, 5, 3, 31, 2, 2, 5, 5, 5, 3, 31, 2, 2, 5, 5, 5, 3, 31, 2, 2, 5, 5, 5, 3, 3\
1, 2, 2, 5, 5, 5, 3, 31, 2, 2, 5, 5, 5, 3, 31, 2, 2, 5, 5, 5 ]);
r:=[
[8,g9],
[15,g16],
[22,g23],
[29,g30],
[36,g37],
[43,g44],
[50,g51],
[57,g58],
];
for x in r do SetPower(rws,x[1],x[2]);od;
r:=[
[2,1,g2],
[4,1,g5],
[5,1,g4*g5],
[13,1,g13^2*g20],
[14,1,g14^30*g21],
[15,1,g15*g16*g22],
[16,1,g16*g23],
[17,1,g17^4*g24],
[18,1,g18^4*g25],
[19,1,g19^4*g26],
[20,1,g20^2*g27],
[21,1,g21^30*g28],
[22,1,g22*g23*g29],
[23,1,g23*g30],
[24,1,g24^4*g31],
[25,1,g25^4*g32],
[26,1,g26^4*g33],
[27,1,g13*g27^2],
[28,1,g14*g28^30],
[29,1,g15*g29*g30],
[30,1,g16*g30],
[31,1,g17*g31^4],
[32,1,g18*g32^4],
[33,1,g19*g33^4],
[41,1,g41^2*g48],
[42,1,g42^30*g49],
[43,1,g43*g44*g50],
[44,1,g44*g51],
[45,1,g45^4*g52],
[46,1,g46^4*g53],
[47,1,g47^4*g54],
[48,1,g48^2*g55],
[49,1,g49^30*g56],
[50,1,g50*g51*g57],
[51,1,g51*g58],
[52,1,g52^4*g59],
[53,1,g53^4*g60],
[54,1,g54^4*g61],
[55,1,g41*g55^2],
[56,1,g42*g56^30],
[57,1,g43*g57*g58],
[58,1,g44*g58],
[59,1,g45*g59^4],
[60,1,g46*g60^4],
[61,1,g47*g61^4],
[3,2,g3*g5],
[4,2,g3*g4*g5],
[5,2,g4*g5],
[13,2,g13^2*g20],
[14,2,g14^30*g21],
[15,2,g15*g16*g22],
[16,2,g16*g23],
[17,2,g17^4*g24],
[18,2,g18^4*g25],
[19,2,g19^4*g26],
[20,2,g20^2*g41],
[21,2,g21^30*g42],
[22,2,g22*g23*g43],
[23,2,g23*g44],
[24,2,g24^4*g45],
[25,2,g25^4*g46],
[26,2,g26^4*g47],
[27,2,g27^2*g55],
[28,2,g28^30*g56],
[29,2,g29*g30*g57],
[30,2,g30*g58],
[31,2,g31^4*g59],
[32,2,g32^4*g60],
[33,2,g33^4*g61],
[34,2,g13*g34^2],
[35,2,g14*g35^30],
[36,2,g15*g36*g37],
[37,2,g16*g37],
[38,2,g17*g38^4],
[39,2,g18*g39^4],
[40,2,g19*g40^4],
[41,2,g27*g41^2],
[42,2,g28*g42^30],
[43,2,g29*g43*g44],
[44,2,g30*g44],
[45,2,g31*g45^4],
[46,2,g32*g46^4],
[47,2,g33*g47^4],
[48,2,g34*g48^2],
[49,2,g35*g49^30],
[50,2,g36*g50*g51],
[51,2,g37*g51],
[52,2,g38*g52^4],
[53,2,g39*g53^4],
[54,2,g40*g54^4],
[55,2,g48*g55^2],
[56,2,g49*g56^30],
[57,2,g50*g57*g58],
[58,2,g51*g58],
[59,2,g52*g59^4],
[60,2,g53*g60^4],
[61,2,g54*g61^4],
[6,3,g6^2*g34],
[7,3,g7^30*g35],
[8,3,g8*g9*g36],
[9,3,g9*g37],
[10,3,g10^4*g38],
[11,3,g11^4*g39],
[12,3,g12^4*g40],
[13,3,g13^2*g41],
[14,3,g14^30*g42],
[15,3,g15*g16*g43],
[16,3,g16*g44],
[17,3,g17^4*g45],
[18,3,g18^4*g46],
[19,3,g19^4*g47],
[20,3,g20^2*g48],
[21,3,g21^30*g49],
[22,3,g22*g23*g50],
[23,3,g23*g51],
[24,3,g24^4*g52],
[25,3,g25^4*g53],
[26,3,g26^4*g54],
[27,3,g27^2*g55],
[28,3,g28^30*g56],
[29,3,g29*g30*g57],
[30,3,g30*g58],
[31,3,g31^4*g59],
[32,3,g32^4*g60],
[33,3,g33^4*g61],
[34,3,g6*g34^2],
[35,3,g7*g35^30],
[36,3,g8*g36*g37],
[37,3,g9*g37],
[38,3,g10*g38^4],
[39,3,g11*g39^4],
[40,3,g12*g40^4],
[41,3,g13*g41^2],
[42,3,g14*g42^30],
[43,3,g15*g43*g44],
[44,3,g16*g44],
[45,3,g17*g45^4],
[46,3,g18*g46^4],
[47,3,g19*g47^4],
[48,3,g20*g48^2],
[49,3,g21*g49^30],
[50,3,g22*g50*g51],
[51,3,g23*g51],
[52,3,g24*g52^4],
[53,3,g25*g53^4],
[54,3,g26*g54^4],
[55,3,g27*g55^2],
[56,3,g28*g56^30],
[57,3,g29*g57*g58],
[58,3,g30*g58],
[59,3,g31*g59^4],
[60,3,g32*g60^4],
[61,3,g33*g61^4],
[6,4,g6^2*g20],
[7,4,g7^30*g21],
[8,4,g8*g9*g22],
[9,4,g9*g23],
[10,4,g10^4*g24],
[11,4,g11^4*g25],
[12,4,g12^4*g26],
[13,4,g13^2*g27],
[14,4,g14^30*g28],
[15,4,g15*g16*g29],
[16,4,g16*g30],
[17,4,g17^4*g31],
[18,4,g18^4*g32],
[19,4,g19^4*g33],
[20,4,g6*g20^2],
[21,4,g7*g21^30],
[22,4,g8*g22*g23],
[23,4,g9*g23],
[24,4,g10*g24^4],
[25,4,g11*g25^4],
[26,4,g12*g26^4],
[27,4,g13*g27^2],
[28,4,g14*g28^30],
[29,4,g15*g29*g30],
[30,4,g16*g30],
[31,4,g17*g31^4],
[32,4,g18*g32^4],
[33,4,g19*g33^4],
[34,4,g34^2*g48],
[35,4,g35^30*g49],
[36,4,g36*g37*g50],
[37,4,g37*g51],
[38,4,g38^4*g52],
[39,4,g39^4*g53],
[40,4,g40^4*g54],
[41,4,g41^2*g55],
[42,4,g42^30*g56],
[43,4,g43*g44*g57],
[44,4,g44*g58],
[45,4,g45^4*g59],
[46,4,g46^4*g60],
[47,4,g47^4*g61],
[48,4,g34*g48^2],
[49,4,g35*g49^30],
[50,4,g36*g50*g51],
[51,4,g37*g51],
[52,4,g38*g52^4],
[53,4,g39*g53^4],
[54,4,g40*g54^4],
[55,4,g41*g55^2],
[56,4,g42*g56^30],
[57,4,g43*g57*g58],
[58,4,g44*g58],
[59,4,g45*g59^4],
[60,4,g46*g60^4],
[61,4,g47*g61^4],
[6,5,g6^2*g13],
[7,5,g7^30*g14],
[8,5,g8*g9*g15],
[9,5,g9*g16],
[10,5,g10^4*g17],
[11,5,g11^4*g18],
[12,5,g12^4*g19],
[13,5,g6*g13^2],
[14,5,g7*g14^30],
[15,5,g8*g15*g16],
[16,5,g9*g16],
[17,5,g10*g17^4],
[18,5,g11*g18^4],
[19,5,g12*g19^4],
[20,5,g20^2*g27],
[21,5,g21^30*g28],
[22,5,g22*g23*g29],
[23,5,g23*g30],
[24,5,g24^4*g31],
[25,5,g25^4*g32],
[26,5,g26^4*g33],
[27,5,g20*g27^2],
[28,5,g21*g28^30],
[29,5,g22*g29*g30],
[30,5,g23*g30],
[31,5,g24*g31^4],
[32,5,g25*g32^4],
[33,5,g26*g33^4],
[34,5,g34^2*g41],
[35,5,g35^30*g42],
[36,5,g36*g37*g43],
[37,5,g37*g44],
[38,5,g38^4*g45],
[39,5,g39^4*g46],
[40,5,g40^4*g47],
[41,5,g34*g41^2],
[42,5,g35*g42^30],
[43,5,g36*g43*g44],
[44,5,g37*g44],
[45,5,g38*g45^4],
[46,5,g39*g46^4],
[47,5,g40*g47^4],
[48,5,g48^2*g55],
[49,5,g49^30*g56],
[50,5,g50*g51*g57],
[51,5,g51*g58],
[52,5,g52^4*g59],
[53,5,g53^4*g60],
[54,5,g54^4*g61],
[55,5,g48*g55^2],
[56,5,g49*g56^30],
[57,5,g50*g57*g58],
[58,5,g51*g58],
[59,5,g52*g59^4],
[60,5,g53*g60^4],
[61,5,g54*g61^4],
[7,6,g7^4],
[10,6,g11*g12],
[11,6,g11^4*g12^3],
[12,6,g11^3*g12^3],
[10,7,g11^4*g12^3],
[11,7,g10^4*g11^4*g12^2],
[12,7,g10^2*g11^4*g12^4],
[10,8,g10],
[11,8,g11],
[12,8,g12],
[10,9,g10^3],
[11,9,g11^3],
[12,9,g12^3],
[14,13,g14^4],
[17,13,g18*g19],
[18,13,g18^4*g19^3],
[19,13,g18^3*g19^3],
[17,14,g18^4*g19^3],
[18,14,g17^4*g18^4*g19^2],
[19,14,g17^2*g18^4*g19^4],
[17,15,g17],
[18,15,g18],
[19,15,g19],
[17,16,g17^3],
[18,16,g18^3],
[19,16,g19^3],
[21,20,g21^4],
[24,20,g25*g26],
[25,20,g25^4*g26^3],
[26,20,g25^3*g26^3],
[24,21,g25^4*g26^3],
[25,21,g24^4*g25^4*g26^2],
[26,21,g24^2*g25^4*g26^4],
[24,22,g24],
[25,22,g25],
[26,22,g26],
[24,23,g24^3],
[25,23,g25^3],
[26,23,g26^3],
[28,27,g28^4],
[31,27,g32*g33],
[32,27,g32^4*g33^3],
[33,27,g32^3*g33^3],
[31,28,g32^4*g33^3],
[32,28,g31^4*g32^4*g33^2],
[33,28,g31^2*g32^4*g33^4],
[31,29,g31],
[32,29,g32],
[33,29,g33],
[31,30,g31^3],
[32,30,g32^3],
[33,30,g33^3],
[35,34,g35^4],
[38,34,g39*g40],
[39,34,g39^4*g40^3],
[40,34,g39^3*g40^3],
[38,35,g39^4*g40^3],
[39,35,g38^4*g39^4*g40^2],
[40,35,g38^2*g39^4*g40^4],
[38,36,g38],
[39,36,g39],
[40,36,g40],
[38,37,g38^3],
[39,37,g39^3],
[40,37,g40^3],
[42,41,g42^4],
[45,41,g46*g47],
[46,41,g46^4*g47^3],
[47,41,g46^3*g47^3],
[45,42,g46^4*g47^3],
[46,42,g45^4*g46^4*g47^2],
[47,42,g45^2*g46^4*g47^4],
[45,43,g45],
[46,43,g46],
[47,43,g47],
[45,44,g45^3],
[46,44,g46^3],
[47,44,g47^3],
[49,48,g49^4],
[52,48,g53*g54],
[53,48,g53^4*g54^3],
[54,48,g53^3*g54^3],
[52,49,g53^4*g54^3],
[53,49,g52^4*g53^4*g54^2],
[54,49,g52^2*g53^4*g54^4],
[52,50,g52],
[53,50,g53],
[54,50,g54],
[52,51,g52^3],
[53,51,g53^3],
[54,51,g54^3],
[56,55,g56^4],
[59,55,g60*g61],
[60,55,g60^4*g61^3],
[61,55,g60^3*g61^3],
[59,56,g60^4*g61^3],
[60,56,g59^4*g60^4*g61^2],
[61,56,g59^2*g60^4*g61^4],
[59,57,g59],
[60,57,g60],
[61,57,g61],
[59,58,g59^3],
[60,58,g60^3],
[61,58,g61^3],
];
for x in r do SetCommutator(rws,x[1],x[2],x[3]);od;
return GroupByRwsNC(rws);
end;
DARKplus:=DARKplus();
Print("#I A group of order ",Size(DARKplus)," has been defined.\n");
Print("#I It is called DARKplus\n");
Print("#I This is the wreath product of Aff(3,5)+ by Aff(3,2)+ in S8.\n");
Print("#I It contains the Dark group as a subgroup, but it is better to\n");
Print("#I get that group directly from DARK.gi.\n");
Print("#I The size of DARKplus is\n");
Print("#I ", Collected(FactorsInt(Size(DARKplus))),"\n\n");
