<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/html4/loose.dtd">
<html>
<meta name="GENERATOR" content="TtH 3.59">
 <style type="text/css"> div.p { margin-top: 7pt;}</style>
 <style type="text/css"><!--
 td div.comp { margin-top: -0.6ex; margin-bottom: -1ex;}
 td div.comb { margin-top: -0.6ex; margin-bottom: -.6ex;}
 td div.hrcomp { line-height: 0.9; margin-top: -0.8ex; margin-bottom: -1ex;}
 td div.norm {line-height:normal;}
 span.roman {font-family: serif; font-style: normal; font-weight: normal;} 
 span.overacc2 {position: relative;  left: .8em; top: -1.2ex;}
 span.overacc1 {position: relative;  left: .6em; top: -1.2ex;} --></style>
 

             
<title> Permutation Characters in GAP</title>
 
<h1 align="center">Permutation Characters in GAP </h1>
  <body bgcolor="FFFFFF"> 

<div class="p"><!----></div>

<h3 align="center"> T<font size="-2">HOMAS</font> B<font size="-2">REUER</font> <br />
<i>Lehrstuhl D f&#252;r Mathematik</i> <br />
<i>RWTH, 52056 Aachen, Germany</i> </h3>

<div class="p"><!----></div>

<h3 align="center">April 17th, 1999 </h3>

<div class="p"><!----></div>


<div class="p"><!----></div>
This is a loose collection of examples of computations with
permutation characters and possible permutation characters in
the <font face="helvetica">GAP</font> system&nbsp;[<a href="#GAP4" name="CITEGAP4">GAP04</a>].
We mainly use the <font face="helvetica">GAP</font> implementation of the algorithms to compute
possible permutation characters that are described in&nbsp;[<a href="#BP98copy" name="CITEBP98copy">BP98</a>],
and information from the Atlas of Finite Groups&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>].

<div class="p"><!----></div>
A <b>possible permutation character</b> of a finite group G is a character
satisfying the conditions listed in Section
"Possible Permutation Characters" of the

 <a href="link"><font face="helvetica">GAP</font> Reference Manual</a>.

<div class="p"><!----></div>
(Sections&nbsp;<a href="#U35sub">14</a> and&nbsp;<a href="#O82sub">15</a> were added in October&nbsp;2001,
Section&nbsp;<a href="#monsterperm1">16.1</a> was added in June&nbsp;2009,
Section&nbsp;<a href="#monsterperm2">16.2</a> was added in September&nbsp;2009,
Section&nbsp;<a href="#monsterperm3">16.3</a> was added in October&nbsp;2009, and
Section&nbsp;<a href="#monsterperm4">16.4</a> was added in November&nbsp;2009.)

<div class="p"><!----></div>



<div class="p"><!----></div>

<h1>Contents </h1><a href="#tth_sEc1"
>1&nbsp; Some Computations with M<sub>24</sub></a><br />
<a href="#tth_sEc2"
>2&nbsp; All Possible Permutation Characters of M<sub>11</sub></a><br />
<a href="#tth_sEc3"
>3&nbsp; The Action of U<sub>6</sub>(2) on the Cosets of M<sub>22</sub></a><br />
<a href="#tth_sEc4"
>4&nbsp; Degree 20&nbsp;736 Permutation Characters of U<sub>6</sub>(2)</a><br />
<a href="#tth_sEc5"
>5&nbsp; Degree 57&nbsp;572&nbsp;775 Permutation Characters of O<sub>8</sub><sup>+</sup>(3)</a><br />
<a href="#tth_sEc6"
>6&nbsp; The Action of O<sub>7</sub>(3).2 on the Cosets of 2<sup>7</sup>.S<sub>7</sub></a><br />
<a href="#tth_sEc7"
>7&nbsp; The Action of O<sub>8</sub><sup>+</sup>(3).2<sub>1</sub> on the Cosets of 2<sup>7</sup>.A<sub>8</sub></a><br />
<a href="#tth_sEc8"
>8&nbsp; The Action of S<sub>4</sub>(4).4 on the Cosets of 5<sup>2</sup>.[2<sup>5</sup>]</a><br />
<a href="#tth_sEc9"
>9&nbsp; The Action of Co<sub>1</sub> on the Cosets of Involution Centralizers</a><br />
<a href="#tth_sEc10"
>10&nbsp; The Multiplicity Free Permutation Characters of G<sub>2</sub>(3)</a><br />
<a href="#tth_sEc11"
>11&nbsp; Degree 11&nbsp;200 Permutation Characters of O<sub>8</sub><sup>+</sup>(2)</a><br />
<a href="#tth_sEc12"
>12&nbsp; A Proof of Nonexistence of a Certain Subgroup</a><br />
<a href="#tth_sEc13"
>13&nbsp; A Permutation Character of the Lyons group</a><br />
<a href="#tth_sEc14"
>14&nbsp; Identifying two subgroups of <span class="roman">Aut</span>(U<sub>3</sub>(5)) (October&nbsp;2001)</a><br />
<a href="#tth_sEc15"
>15&nbsp; A Permutation Character of <span class="roman">Aut</span>(O<sub>8</sub><sup>+</sup>(2)) (October&nbsp;2001)</a><br />
<a href="#tth_sEc16"
>16&nbsp; Four Primitive Permutation Characters of the Monster Group</a><br />
&nbsp;&nbsp;&nbsp;&nbsp;<a href="#tth_sEc16.1"
>16.1&nbsp; The Subgroup 2<sup>2</sup>.2<sup>11</sup>.2<sup>22</sup>.(S<sub>3</sub> &times;M<sub>24</sub>) (June&nbsp;2009)</a><br />
&nbsp;&nbsp;&nbsp;&nbsp;<a href="#tth_sEc16.2"
>16.2&nbsp; The Subgroup 2<sup>3</sup>.2<sup>6</sup>.2<sup>12</sup>.2<sup>18</sup>.(L<sub>3</sub>(2) &times;3.S<sub>6</sub>) (September&nbsp;2009)</a><br />
&nbsp;&nbsp;&nbsp;&nbsp;<a href="#tth_sEc16.3"
>16.3&nbsp; The Subgroup 2<sup>5</sup>.2<sup>10</sup>.2<sup>20</sup>.(S<sub>3</sub> &times;L<sub>5</sub>(2)) (October&nbsp;2009)</a><br />
&nbsp;&nbsp;&nbsp;&nbsp;<a href="#tth_sEc16.4"
>16.4&nbsp; The Subgroup 2<sup>10+16</sup>.O<sub>10</sub><sup>+</sup>(2) (November&nbsp;2009)</a><br />



<div class="p"><!----></div>

<div class="p"><!----></div>

<div class="p"><!----></div>
In the following, the <font face="helvetica">GAP</font> Character Table Library&nbsp;[<a href="#CTblLib1.2" name="CITECTblLib1.2">Bre12</a>]
will be used frequently.

<div class="p"><!----></div>

<pre>
    gap&#62; LoadPackage( "ctbllib", "1.2" );
    true

</pre>

<div class="p"><!----></div>

 <h2><a name="tth_sEc1">
1</a>&nbsp;&nbsp;Some Computations with M<sub>24</sub></h2>

<div class="p"><!----></div>
We start with the sporadic simple Mathieu group G = M<sub>24</sub>
in its natural action on 24 points.

<div class="p"><!----></div>

<pre>
    gap&#62; g:= MathieuGroup( 24 );;
    gap&#62; SetName( g, "m24" );
    gap&#62; Size( g );  IsSimple( g );  NrMovedPoints( g );
    244823040
    true
    24

</pre>

<div class="p"><!----></div>
The conjugacy classes that are computed for a group can be ordered
differently in different <font face="helvetica">GAP</font> sessions.
In order to make the output shown in the following examples stable,
we first sort the conjugacy classes of G for our purposes.

<div class="p"><!----></div>

<pre>
    gap&#62; ccl:= AttributeValueNotSet( ConjugacyClasses, g );;
    gap&#62; HasConjugacyClasses( g );
    false
    gap&#62; invariants:= List( ccl, c -&#62; [ Order( Representative( c ) ),
    &#62;        Size( c ), Size( ConjugacyClass( g, Representative( c )^2 ) ) ] );;
    gap&#62; SortParallel( invariants, ccl );
    gap&#62; SetConjugacyClasses( g, ccl );

</pre>

<div class="p"><!----></div>
The permutation character <tt>pi</tt> of G corresponding to the action on
the moved points is constructed.
This action is 5-transitive.

<div class="p"><!----></div>

<pre>
    gap&#62; NrConjugacyClasses( g );
    26
    gap&#62; pi:= NaturalCharacter( g );
    Character( CharacterTable( m24 ), [ 24, 8, 0, 6, 0, 0, 4, 0, 4, 2, 0, 3, 3, 
      2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1 ] )
    gap&#62; IsTransitive( pi );  Transitivity( pi );
    true
    5
    gap&#62; Display( pi );
    CT1
    
         2 10 10  9  3  3  7  7  5  2  3  3  1  1  4   2   .   2   2   1   1   .
         3  3  1  1  3  2  1  .  1  1  1  1  1  1  .   .   .   1   1   .   .   1
         5  1  .  1  1  .  .  .  .  1  .  .  .  .  .   1   .   .   .   .   .   1
         7  1  1  .  .  1  .  .  .  .  .  .  1  1  .   .   .   .   .   1   1   .
        11  1  .  .  .  .  .  .  .  .  .  .  .  .  .   .   1   .   .   .   .   .
        23  1  .  .  .  .  .  .  .  .  .  .  .  .  .   .   .   .   .   .   .   .
    
           1a 2a 2b 3a 3b 4a 4b 4c 5a 6a 6b 7a 7b 8a 10a 11a 12a 12b 14a 14b 15a
    
    Y.1    24  8  .  6  .  .  4  .  4  2  .  3  3  2   .   2   .   .   1   1   1
    
         2   .   .   .   .   .
         3   1   1   1   .   .
         5   1   .   .   .   .
         7   .   1   1   .   .
        11   .   .   .   .   .
        23   .   .   .   1   1
    
           15b 21a 21b 23a 23b
    
    Y.1      1   .   .   1   1

</pre>

<div class="p"><!----></div>
<tt>pi</tt> determines the permutation characters of the G-actions on
related sets,
for example <tt>piop</tt> on the set of ordered and <tt>piup</tt> on the set of
unordered pairs of points.

<div class="p"><!----></div>

<pre>
    gap&#62; piop:= pi * pi;
    Character( CharacterTable( m24 ), [ 576, 64, 0, 36, 0, 0, 16, 0, 16, 4, 0, 9, 
      9, 4, 0, 4, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1 ] )
    gap&#62; IsTransitive( piop );
    false
    gap&#62; piup:= SymmetricParts( UnderlyingCharacterTable(pi), [ pi ], 2 )[1];
    Character( CharacterTable( m24 ), [ 300, 44, 12, 21, 0, 4, 12, 0, 10, 5, 0, 
      6, 6, 4, 2, 3, 1, 0, 2, 2, 1, 1, 0, 0, 1, 1 ] )
    gap&#62; IsTransitive( piup );
    false

</pre>

<div class="p"><!----></div>
Clearly the action on unordered pairs is not transitive, since the pairs
[ i, i ] form an orbit of their own.
There are exactly two G-orbits on the unordered pairs,
hence the G-action on 2-sets of points is transitive.

<div class="p"><!----></div>

<pre>
    gap&#62; ScalarProduct( piup, TrivialCharacter( g ) );
    2
    gap&#62; comb:= Combinations( [ 1 .. 24 ], 2 );;
    gap&#62; hom:= ActionHomomorphism( g, comb, OnSets );;
    gap&#62; pihom:= NaturalCharacter( hom );
    Character( CharacterTable( m24 ), [ 276, 36, 12, 15, 0, 4, 8, 0, 6, 3, 0, 3, 
      3, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0 ] )
    gap&#62; Transitivity( pihom );
    1

</pre>

<div class="p"><!----></div>
In terms of characters, the permutation character <tt>pihom</tt> is the difference
of <tt>piup</tt> and <tt>pi</tt> .
Note that <font face="helvetica">GAP</font> does not know that this difference is in fact a character;
in general this question is not easy to decide without knowing the
irreducible characters of G,
and up to now <font face="helvetica">GAP</font> has not computed the irreducibles.

<div class="p"><!----></div>

<pre>
    gap&#62; pi2s:= piup - pi;
    VirtualCharacter( CharacterTable( m24 ), [ 276, 36, 12, 15, 0, 4, 8, 0, 6, 3, 
      0, 3, 3, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0 ] )
    gap&#62; pi2s = pihom;
    true
    gap&#62; HasIrr( g );  HasIrr( CharacterTable( g ) );
    false
    false

</pre>

<div class="p"><!----></div>
The point stabilizer in the action on 2-sets is in fact a maximal
subgroup of G, which is isomorphic to the automorphism group
M<sub>22</sub>:2 of the Mathieu group M<sub>22</sub>.
Thus this permutation action is primitive.
But we cannot apply <tt>IsPrimitive</tt> to the character <tt>pihom</tt> for getting
this answer because primitivity of characters is defined in a different
way, cf.&nbsp;<tt>IsPrimitiveCharacter</tt> in the <font face="helvetica">GAP</font> Reference Manual.

<div class="p"><!----></div>

<pre>
    gap&#62; IsPrimitive( g, comb, OnSets );
    true

</pre>

<div class="p"><!----></div>

<div class="p"><!----></div>
We could also have computed the transitive permutation character of
degree 276 using the <font face="helvetica">GAP</font> Character Table Library instead of
the group G,
since the character tables of G and all its maximal subgroups are
available, together with the class fusions of the maximal subgroups
into G.

<div class="p"><!----></div>

<pre>
    gap&#62; tbl:= CharacterTable( "M24" );
    CharacterTable( "M24" )
    gap&#62; maxes:= Maxes( tbl );
    [ "M23", "M22.2", "2^4:a8", "M12.2", "2^6:3.s6", "L3(4).3.2_2",
      "2^6:(psl(3,2)xs3)", "L2(23)", "L3(2)" ]
    gap&#62; s:= CharacterTable( maxes[2] );
    CharacterTable( "M22.2" )
    gap&#62; TrivialCharacter( s )^tbl;
    Character( CharacterTable( "M24" ), [ 276, 36, 12, 15, 0, 4, 8, 0, 6, 3, 0,
      3, 3, 2, 2, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0 ] )

</pre>

<div class="p"><!----></div>
Note that the sequence of conjugacy classes in the library table of
G does in general not agree with the succession computed for the
group.

<div class="p"><!----></div>

 <h2><a name="tth_sEc2">
2</a>&nbsp;&nbsp;All Possible Permutation Characters of M<sub>11</sub></h2>

<div class="p"><!----></div>
We compute all possible permutation characters of the Mathieu group
M<sub>11</sub>, using the three different strategies available in <font face="helvetica">GAP</font>.

<div class="p"><!----></div>
First we try the algorithm that enumerates all candidates via solving
a system of inequalities, which is described in&nbsp;[<a href="#BP98copy" name="CITEBP98copy">BP98</a>,Section&nbsp;3.2].

<div class="p"><!----></div>

<pre>
    gap&#62; m11:= CharacterTable( "M11" );;
    gap&#62; SetName( m11, "m11" );
    gap&#62; perms:= PermChars( m11 );
    [ Character( m11, [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ),
      Character( m11, [ 11, 3, 2, 3, 1, 0, 1, 1, 0, 0 ] ),
      Character( m11, [ 12, 4, 3, 0, 2, 1, 0, 0, 1, 1 ] ),
      Character( m11, [ 22, 6, 4, 2, 2, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 55, 7, 1, 3, 0, 1, 1, 1, 0, 0 ] ),
      Character( m11, [ 66, 10, 3, 2, 1, 1, 0, 0, 0, 0 ] ),
      Character( m11, [ 110, 6, 2, 2, 0, 0, 2, 2, 0, 0 ] ),
      Character( m11, [ 110, 6, 2, 6, 0, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 110, 14, 2, 2, 0, 2, 0, 0, 0, 0 ] ),
      Character( m11, [ 132, 12, 6, 0, 2, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 144, 0, 0, 0, 4, 0, 0, 0, 1, 1 ] ),
      Character( m11, [ 165, 13, 3, 1, 0, 1, 1, 1, 0, 0 ] ),
      Character( m11, [ 220, 4, 4, 0, 0, 4, 0, 0, 0, 0 ] ),
      Character( m11, [ 220, 12, 4, 4, 0, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 220, 20, 4, 0, 0, 2, 0, 0, 0, 0 ] ),
      Character( m11, [ 330, 2, 6, 2, 0, 2, 0, 0, 0, 0 ] ),
      Character( m11, [ 330, 18, 6, 2, 0, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 396, 12, 0, 4, 1, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 440, 8, 8, 0, 0, 2, 0, 0, 0, 0 ] ),
      Character( m11, [ 440, 24, 8, 0, 0, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 495, 15, 0, 3, 0, 0, 1, 1, 0, 0 ] ),
      Character( m11, [ 660, 4, 3, 4, 0, 1, 0, 0, 0, 0 ] ),
      Character( m11, [ 660, 12, 3, 0, 0, 3, 0, 0, 0, 0 ] ),
      Character( m11, [ 660, 12, 12, 0, 0, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 660, 28, 3, 0, 0, 1, 0, 0, 0, 0 ] ),
      Character( m11, [ 720, 0, 0, 0, 0, 0, 0, 0, 5, 5 ] ),
      Character( m11, [ 792, 24, 0, 0, 2, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 880, 0, 16, 0, 0, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 990, 6, 0, 2, 0, 0, 2, 2, 0, 0 ] ),
      Character( m11, [ 990, 6, 0, 6, 0, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 990, 30, 0, 2, 0, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 1320, 8, 6, 0, 0, 2, 0, 0, 0, 0 ] ),
      Character( m11, [ 1320, 24, 6, 0, 0, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 1584, 0, 0, 0, 4, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 1980, 12, 0, 4, 0, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 1980, 36, 0, 0, 0, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 2640, 0, 12, 0, 0, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 3960, 24, 0, 0, 0, 0, 0, 0, 0, 0 ] ),
      Character( m11, [ 7920, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ) ]
    gap&#62; Length( perms );
    39

</pre>

<div class="p"><!----></div>

<div class="p"><!----></div>
Next we try the improved combinatorial approach that is sketched at the
end of Section&nbsp;3.2 in&nbsp;[<a href="#BP98copy" name="CITEBP98copy">BP98</a>].
We get the same characters, except that they may be ordered in a different
way; thus we compare the ordered lists.

<div class="p"><!----></div>

<pre>
    gap&#62; degrees:= DivisorsInt( Size( m11 ) );;
    gap&#62; perms2:= [];;
    gap&#62; for d in degrees do
    &#62;      Append( perms2, PermChars( m11, d ) );
    &#62;    od;
    gap&#62; Set( perms ) = Set( perms2 );
    true

</pre>

<div class="p"><!----></div>
Finally, we try the algorithm that is based on Gaussian elimination
and that is described in&nbsp;[<a href="#BP98copy" name="CITEBP98copy">BP98</a>,Section&nbsp;3.3].

<div class="p"><!----></div>

<pre>
    gap&#62; perms3:= [];;
    gap&#62; for d in degrees do
    &#62;      Append( perms3, PermChars( m11, rec( torso:= [ d ] ) ) );
    &#62;    od;
    gap&#62; Set( perms ) = Set( perms3 );
    true

</pre>

<div class="p"><!----></div>
<font face="helvetica">GAP</font> provides two more functions to test properties of permutation
characters.
The first one yields no new information in our case,
but the second excludes one possible permutation character;
note that <tt>TestPerm5</tt> needs a p-modular Brauer table,
and the <font face="helvetica">GAP</font> character table library contains all Brauer tables
of M<sub>11</sub>.

<div class="p"><!----></div>

<pre>
    gap&#62; newperms:= TestPerm4( m11, perms );;
    gap&#62; newperms = perms;
    true
    gap&#62; newperms:= TestPerm5( m11, perms, m11 mod 11 );;
    gap&#62; newperms = perms;
    false
    gap&#62; Difference( perms, newperms );
    [ Character( m11, [ 220, 4, 4, 0, 0, 4, 0, 0, 0, 0 ] ) ]

</pre>

<div class="p"><!----></div>
<font face="helvetica">GAP</font> knows the table of marks of M<sub>11</sub>,
from which the permutation characters can be extracted.
It turns out that M<sub>11</sub> has 39 conjugacy classes of subgroups
but only 36 different permutation characters,
so three candidates computed above are in fact not permutation characters.

<div class="p"><!----></div>

<pre>
    gap&#62; tom:= TableOfMarks( "M11" );
    TableOfMarks( "M11" )
    gap&#62; trueperms:= PermCharsTom( m11, tom );;
    gap&#62; Length( trueperms );  Length( Set( trueperms ) );
    39
    36
    gap&#62; Difference( perms, trueperms );
    [ Character( m11, [ 220, 4, 4, 0, 0, 4, 0, 0, 0, 0 ] ), 
      Character( m11, [ 660, 4, 3, 4, 0, 1, 0, 0, 0, 0 ] ), 
      Character( m11, [ 660, 12, 3, 0, 0, 3, 0, 0, 0, 0 ] ) ]

</pre>

<div class="p"><!----></div>

 <h2><a name="tth_sEc3">
3</a>&nbsp;&nbsp;The Action of U<sub>6</sub>(2) on the Cosets of M<sub>22</sub></h2>

<div class="p"><!----></div>
We are interested in the permutation character of U<sub>6</sub>(2)
(see&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;115]) that corresponds to the action on the cosets
of a M<sub>22</sub> subgroup (see&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;39]).
The character tables of both the group and the point stabilizer
are available in the <font face="helvetica">GAP</font> character table library,
so we can compute class fusion and permutation character directly;
note that if the class fusion is not stored on the table of the subgroup,
in general one will not get a unique fusion but only a list of candidates
for the fusion.

<div class="p"><!----></div>

<pre>
    gap&#62; u62:= CharacterTable( "U6(2)" );;
    gap&#62; m22:= CharacterTable( "M22" );;
    gap&#62; fus:= PossibleClassFusions( m22, u62 );
    [ [ 1, 3, 7, 10, 14, 15, 22, 24, 24, 26, 33, 34 ],
      [ 1, 3, 7, 10, 14, 15, 22, 24, 24, 26, 34, 33 ],
      [ 1, 3, 7, 11, 14, 15, 22, 24, 24, 27, 33, 34 ],
      [ 1, 3, 7, 11, 14, 15, 22, 24, 24, 27, 34, 33 ],
      [ 1, 3, 7, 12, 14, 15, 22, 24, 24, 28, 33, 34 ],
      [ 1, 3, 7, 12, 14, 15, 22, 24, 24, 28, 34, 33 ] ]
    gap&#62; RepresentativesFusions( m22, fus, u62 );
    [ [ 1, 3, 7, 10, 14, 15, 22, 24, 24, 26, 33, 34 ] ]

</pre>

<div class="p"><!----></div>
We see that there are six possible class fusions that are equivalent
under table automorphisms of U<sub>6</sub>(2) and M22.

<div class="p"><!----></div>

<pre>
    gap&#62; cand:= Set( List( fus,
    &#62;  x -&#62; Induced( m22, u62, [ TrivialCharacter( m22 ) ], x )[1] ) );
    [ Character( CharacterTable( "U6(2)" ), [ 20736, 0, 384, 0, 0, 0, 54, 0, 0,
          0, 0, 48, 0, 16, 6, 0, 0, 0, 0, 0, 0, 6, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0,
          1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ),
      Character( CharacterTable( "U6(2)" ), [ 20736, 0, 384, 0, 0, 0, 54, 0, 0,
          0, 48, 0, 0, 16, 6, 0, 0, 0, 0, 0, 0, 6, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0,
          1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ),
      Character( CharacterTable( "U6(2)" ), [ 20736, 0, 384, 0, 0, 0, 54, 0, 0,
          48, 0, 0, 0, 16, 6, 0, 0, 0, 0, 0, 0, 6, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0,
          1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ) ]
    gap&#62; PermCharInfo( u62, cand ).ATLAS;
    [ "1a+22a+252a+616a+1155c+1386a+8064a+9240c",
      "1a+22a+252a+616a+1155b+1386a+8064a+9240b",
      "1a+22a+252a+616a+1155a+1386a+8064a+9240a" ]
    gap&#62; aut:= AutomorphismsOfTable( u62 );;  Size( aut );
    24
    gap&#62; elms:= Filtered( Elements( aut ), x -&#62; Order( x ) = 3 );
    [ (10,11,12)(26,27,28)(40,41,42), (10,12,11)(26,28,27)(40,42,41) ]
    gap&#62; Position( cand, Permuted( cand[1], elms[1] ) );
    3
    gap&#62; Position( cand, Permuted( cand[3], elms[1] ) );
    2

</pre>

<div class="p"><!----></div>
The six fusions induce three different characters,
they are conjugate under the action of the unique subgroup of order 3
in the group of table automorphisms of U<sub>6</sub>(2).
The table automorphisms of order 3 are induced by group automorphisms
of U<sub>6</sub>(2) (see&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;120]).
As can be seen from the list of maximal subgroups of U<sub>6</sub>(2)
in&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;115],
the three induced characters are in fact permutation characters
which belong to the three classes of maximal subgroups of type M<sub>22</sub>
in U<sub>6</sub>(2), which are permuted by an outer automorphism of order 3.

<div class="p"><!----></div>
Now we want to compute the extension of the above permutation character
to the group U<sub>6</sub>(2).2,
which corresponds to the action of this group on the cosets of a M<sub>22</sub>.2
subgroup.

<div class="p"><!----></div>

<pre>
    gap&#62; u622:= CharacterTable( "U6(2).2" );;
    gap&#62; m222:= CharacterTable( "M22.2" );;
    gap&#62; fus:= PossibleClassFusions( m222, u622 );
    [ [ 1, 3, 7, 10, 13, 14, 20, 22, 22, 24, 29, 38, 39, 42, 41, 46, 50, 53, 58,
          59, 59 ] ]
    gap&#62; cand:= Induced( m222, u622, [ TrivialCharacter( m222 ) ], fus[1] );
    [ Character( CharacterTable( "U6(2).2" ), [ 20736, 0, 384, 0, 0, 0, 54, 0, 0,
          48, 0, 0, 16, 6, 0, 0, 0, 0, 0, 6, 0, 2, 0, 4, 0, 0, 0, 0, 1, 0, 0, 0,
          0, 0, 0, 0, 0, 1080, 72, 0, 48, 8, 0, 0, 0, 18, 0, 0, 0, 8, 0, 0, 2, 0,
          0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0 ] ) ]
    gap&#62; PermCharInfo( u622, cand ).ATLAS;
    [ "1a+22a+252a+616a+1155a+1386a+8064a+9240a" ]

</pre>

<div class="p"><!----></div>
We see that for the embedding of M<sub>22</sub>.2 into U<sub>6</sub>(2).2,
the class fusion is unique,
so we get a unique extension of one of the above permutation characters.
This implies that exactly one class of maximal subgroups of type M<sub>22</sub>
extends to M<sub>22</sub>.2 in a given group U<sub>6</sub>(2).2.

<div class="p"><!----></div>

 <h2><a name="tth_sEc4">
4</a>&nbsp;&nbsp;Degree 20&nbsp;736 Permutation Characters of U<sub>6</sub>(2)</h2>

<div class="p"><!----></div>
Now we show an alternative way to compute the characters dealt with
in the previous example.
This works also if the character table of the point stabilizer is not
available.
In this situation we can compute all those characters that have certain
properties of permutation characters.

<div class="p"><!----></div>
Of course this may take much longer than the above computations,
which needed only a few seconds.
(The following calculations may need several hours,
depending on the computer used.)

<div class="p"><!----></div>

<pre>
    gap&#62; cand:= PermChars( u62, rec( torso := [ 20736 ] ) );
    [ Character( CharacterTable( "U6(2)" ), [ 20736, 0, 384, 0, 0, 0, 54, 0, 0,
          0, 0, 48, 0, 16, 6, 0, 0, 0, 0, 0, 0, 6, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0,
          1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ),
      Character( CharacterTable( "U6(2)" ), [ 20736, 0, 384, 0, 0, 0, 54, 0, 0,
          0, 48, 0, 0, 16, 6, 0, 0, 0, 0, 0, 0, 6, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0,
          1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ),
      Character( CharacterTable( "U6(2)" ), [ 20736, 0, 384, 0, 0, 0, 54, 0, 0,
          48, 0, 0, 0, 16, 6, 0, 0, 0, 0, 0, 0, 6, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0,
          1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ) ]

</pre> 
<div class="p"><!----></div>
For the next step, that is, the computation of the extension of the
permutation character to U<sub>6</sub>(2).2, we may use the above information,
since the values on the inner classes are prescribed.

<div class="p"><!----></div>
The question which of the three candidates for U<sub>6</sub>(2) extends to
U<sub>6</sub>(2).2 depends on the choice of the class fusion of U<sub>6</sub>(2) into
U<sub>6</sub>(2).2.
With respect to the class fusion that is stored on the <font face="helvetica">GAP</font> library table,
the third candidate extends,
as can be seen from the fact that this one is invariant under the
permutation of conjugacy classes of U<sub>6</sub>(2) that is induced by the
action of the chosen supergroup U<sub>6</sub>(2).2.

<div class="p"><!----></div>

<pre>
    gap&#62; u622:= CharacterTable( "U6(2).2" );;
    gap&#62; inv:= InverseMap( GetFusionMap( u62, u622 ) );
    [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, [ 11, 12 ], 13, 14, 15, [ 16, 17 ], 18, 19,
      20, 21, 22, 23, 24, 25, 26, [ 27, 28 ], [ 29, 30 ], 31, 32, [ 33, 34 ],
      [ 35, 36 ], 37, [ 38, 39 ], 40, [ 41, 42 ], 43, 44, [ 45, 46 ] ]
    gap&#62; ext:= List( cand, x -&#62; CompositionMaps( x, inv ) );
    [ [ 20736, 0, 384, 0, 0, 0, 54, 0, 0, 0, [ 0, 48 ], 0, 16, 6, 0, 0, 0, 0, 0,
          6, 0, 2, 0, 0, [ 0, 4 ], 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 20736, 0, 384, 0, 0, 0, 54, 0, 0, 0, [ 0, 48 ], 0, 16, 6, 0, 0, 0, 0, 0,
          6, 0, 2, 0, 0, [ 0, 4 ], 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 20736, 0, 384, 0, 0, 0, 54, 0, 0, 48, 0, 0, 16, 6, 0, 0, 0, 0, 0, 6, 0,
          2, 0, 4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ] ]
    gap&#62; cand:= PermChars( u622, rec( torso:= ext[3] ) );
    [ Character( CharacterTable( "U6(2).2" ), [ 20736, 0, 384, 0, 0, 0, 54, 0, 0,
          48, 0, 0, 16, 6, 0, 0, 0, 0, 0, 6, 0, 2, 0, 4, 0, 0, 0, 0, 1, 0, 0, 0,
          0, 0, 0, 0, 0, 1080, 72, 0, 48, 8, 0, 0, 0, 18, 0, 0, 0, 8, 0, 0, 2, 0,
          0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0 ] ) ]

</pre> 
<div class="p"><!----></div>

 <h2><a name="tth_sEc5">
5</a>&nbsp;&nbsp;Degree 57&nbsp;572&nbsp;775 Permutation Characters of O<sub>8</sub><sup>+</sup>(3)</h2>

<div class="p"><!----></div>
The group O<sub>8</sub><sup>+</sup>(3) (see&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;140]) contains a subgroup of
type 2<sup>3+6</sup>.L<sub>3</sub>(2),
which extends to a maximal subgroup U in O<sub>8</sub><sup>+</sup>(3).3.
For the computation of the permutation character,
we cannot use explicit induction since the table of U is not available
in the <font face="helvetica">GAP</font> table library.

<div class="p"><!----></div>
Since U &#8745;O<sub>8</sub><sup>+</sup>(3) is contained in a O<sub>8</sub><sup>+</sup>(2) subgroup
of O<sub>8</sub><sup>+</sup>(3), we can try to find the permutation character of O<sub>8</sub><sup>+</sup>(2)
corresponding to the action on the cosets of U &#8745;O<sub>8</sub><sup>+</sup>(3),
and then induce this character to O<sub>8</sub><sup>+</sup>(3).

<div class="p"><!----></div>
This kind of computations becomes more difficult with increasing degree,
so we try to reduce the problem further.
In fact, the 2<sup>3+6</sup>.L<sub>3</sub>(2) group is contained in a 2<sup>6</sup>:A<sub>8</sub> subgroup
of O<sub>8</sub><sup>+</sup>(2), in which the index is only 15;
the unique possible permutation character of this degree can be read off
immediately.

<div class="p"><!----></div>
Induction to O<sub>8</sub><sup>+</sup>(3) through the chain of subgroups is possible
provided the class fusions are available.
There are 24 possible fusions from O<sub>8</sub><sup>+</sup>(2) into O<sub>8</sub><sup>+</sup>(3),
which are all equivalent w.r.t.&nbsp;table automorphisms of O<sub>8</sub><sup>+</sup>(3).
If we later want to consider the extension of the permutation character
in question to O<sub>8</sub><sup>+</sup>(3).3 then we have to choose a fusion of an
O<sub>8</sub><sup>+</sup>(2) subgroup that does <b>not</b> extend to O<sub>8</sub><sup>+</sup>(2).3.
But if for example our question is just whether the resulting permutation
character is multiplicity-free then this can be decided already from the
permutation character of O<sub>8</sub><sup>+</sup>(3).

<div class="p"><!----></div>

<pre>
    gap&#62; o8p3:= CharacterTable("O8+(3)");;
    gap&#62; Size( o8p3 ) / (2^9*168);
    57572775
    gap&#62; o8p2:= CharacterTable( "O8+(2)" );;
    gap&#62; fus:= PossibleClassFusions( o8p2, o8p3 );;
    gap&#62; Length( fus );
    24
    gap&#62; rep:= RepresentativesFusions( o8p2, fus, o8p3 );
    [ [ 1, 5, 2, 3, 4, 5, 7, 8, 12, 16, 17, 19, 23, 20, 21, 22, 23, 24, 25, 26,
          37, 38, 42, 31, 32, 36, 49, 52, 51, 50, 43, 44, 45, 53, 55, 56, 57, 71,
          71, 71, 72, 73, 74, 78, 79, 83, 88, 89, 90, 94, 100, 101, 105 ] ]
    gap&#62; fus:= rep[1];;
    gap&#62; Size( o8p2 ) / (2^9*168);
    2025
    gap&#62; sub:= CharacterTable( "2^6:A8" );;
    gap&#62; subfus:= GetFusionMap( sub, o8p2 );
    [ 1, 3, 2, 2, 4, 5, 6, 13, 3, 6, 12, 13, 14, 7, 21, 24, 11, 30, 29, 31, 13,
      17, 15, 16, 14, 17, 36, 37, 18, 41, 24, 44, 48, 28, 33, 32, 34, 35, 35, 51,
      51 ]
    gap&#62; fus:= CompositionMaps( fus, subfus );
    [ 1, 2, 5, 5, 3, 4, 5, 23, 2, 5, 19, 23, 20, 7, 37, 31, 17, 50, 51, 43, 23,
      23, 21, 22, 20, 23, 56, 57, 24, 72, 31, 78, 89, 52, 45, 44, 53, 55, 55,
      100, 100 ]
    gap&#62; Size( sub ) / (2^9*168);
    15
    gap&#62; List( Irr( sub ), Degree );
    [ 1, 7, 14, 20, 21, 21, 21, 28, 35, 45, 45, 56, 64, 70, 28, 28, 35, 35, 35,
      35, 70, 70, 70, 70, 140, 140, 140, 140, 140, 210, 210, 252, 252, 280, 280,
      315, 315, 315, 315, 420, 448 ]
    gap&#62; cand:= PermChars( sub, 15 );
    [ Character( CharacterTable( "2^6:A8" ), [ 15, 15, 15, 7, 7, 7, 7, 7, 3, 3,
          3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1,
          1, 1, 1, 1, 1, 0, 0 ] ) ]
    gap&#62; ind:= Induced( sub, o8p3, cand, fus );
    [ Character( CharacterTable( "O8+(3)" ), [ 57572775, 59535, 59535, 59535,
          3591, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2187, 0, 27, 135, 135, 135, 243,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 27, 27, 0,
          0, 0, 0, 27, 27, 27, 27, 0, 8, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ) ]
    gap&#62; o8p33:= CharacterTable( "O8+(3).3" );;
    gap&#62; inv:= InverseMap( GetFusionMap( o8p3, o8p33 ) );
    [ 1, [ 2, 3, 4 ], 5, 6, [ 7, 8, 9 ], [ 10, 11, 12 ], 13, [ 14, 15, 16 ], 17,
      18, 19, [ 20, 21, 22 ], 23, [ 24, 25, 26 ], [ 27, 28, 29 ], 30,
      [ 31, 32, 33 ], [ 34, 35, 36 ], [ 37, 38, 39 ], [ 40, 41, 42 ],
      [ 43, 44, 45 ], 46, [ 47, 48, 49 ], 50, [ 51, 52, 53 ], 54, 55, 56, 57,
      [ 58, 59, 60 ], [ 61, 62, 63 ], 64, [ 65, 66, 67 ], 68, [ 69, 70, 71 ],
      [ 72, 73, 74 ], [ 75, 76, 77 ], [ 78, 79, 80 ], [ 81, 82, 83 ], 84, 85,
      [ 86, 87, 88 ], [ 89, 90, 91 ], [ 92, 93, 94 ], 95, 96, [ 97, 98, 99 ],
      [ 100, 101, 102 ], [ 103, 104, 105 ], [ 106, 107, 108 ], [ 109, 110, 111 ],
      [ 112, 113, 114 ] ]
    gap&#62; ext:= CompositionMaps( ind[1], inv );
    [ 57572775, 59535, 3591, 0, 0, 0, 0, 0, 2187, 0, 27, 135, 243, 0, 0, 0, 0, 0,
      0, 0, 27, 0, 0, 27, 27, 0, 8, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
    gap&#62; perms:= PermChars( o8p33, rec( torso:= ext ) );
    [ Character( CharacterTable( "O8+(3).3" ), [ 57572775, 59535, 3591, 0, 0, 0,
          0, 0, 2187, 0, 27, 135, 243, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 27, 27, 0,
          8, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 3159, 3159, 243, 243, 39, 39, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3,
          3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
         ] ) ]
    gap&#62; PermCharInfo( o8p33, perms ).ATLAS;
    [ "1a+780aabb+2457a+2808abc+9450aaabbcc+18200abcdddef+24192a+54600a^{5}b+70200\
    aabb+87360ab+139776a^{5}+147420a^{4}b^{4}+163800ab+184275aabc+199017aa+218700a\
    +245700a+291200aef+332800a^{4}b^{5}c^{5}+491400aaabcd+531441a^{5}b^{4}c^{4}+55\
    2825a^{4}+568620aabb+698880a^{4}b^{4}+716800aaabbccdddeeff+786240aabb+873600aa\
    +998400aa+1257984a^{6}+1397760aa" ]

</pre>

<div class="p"><!----></div>

<div class="p"><!----></div>

 <h2><a name="tth_sEc6">
6</a>&nbsp;&nbsp;The Action of O<sub>7</sub>(3).2 on the Cosets of 2<sup>7</sup>.S<sub>7</sub></h2>

<div class="p"><!----></div>
We want to know whether the permutation character of O<sub>7</sub>(3).2
(see&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;108]) on the cosets of its maximal subgroup U
of type 2<sup>7</sup>.S<sub>7</sub> is multiplicity-free.

<div class="p"><!----></div>
As in the previous examples, first we try to compute the permutation
character of the simple group O<sub>7</sub>(3).
It turns out that the direct computation of all candidates from the
degree is very time consuming.
But we can use for example the additional information provided by the fact
that U contains an A<sub>7</sub> subgroup.
We compute the possible class fusions.

<div class="p"><!----></div>

<pre>
    gap&#62; o73:= CharacterTable( "O7(3)" );;
    gap&#62; a7:= CharacterTable( "A7" );;
    gap&#62; fus:= PossibleClassFusions( a7, o73 );
    [ [ 1, 3, 6, 10, 15, 16, 24, 33, 33 ], [ 1, 3, 7, 10, 15, 16, 22, 33, 33 ] ]

</pre>

<div class="p"><!----></div>
We cannot decide easily which fusion is the right one,
but already the fact that no other fusions are possible
gives us some information about impossible constituents of the
permutation character we want to compute.

<div class="p"><!----></div>

<pre>
    gap&#62; ind:= List( fus,
    &#62;       x -&#62; Induced( a7, o73, [ TrivialCharacter( a7 ) ], x )[1] );;
    gap&#62; mat:= MatScalarProducts( o73, Irr( o73 ), ind );;
    gap&#62; sum:= Sum( mat );
    [ 2, 6, 2, 0, 8, 6, 2, 4, 4, 8, 3, 0, 4, 4, 9, 3, 5, 0, 0, 9, 0, 10, 5, 6,
      15, 1, 12, 1, 15, 7, 2, 4, 14, 16, 0, 12, 12, 7, 8, 8, 14, 12, 12, 14, 6,
      6, 20, 16, 12, 12, 12, 10, 10, 12, 12, 8, 12, 6 ]
    gap&#62; const:= Filtered( [ 1 .. Length( sum ) ], x -&#62; sum[x] &lt;&#62; 0 );
    [ 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 20, 22, 23, 24, 25, 26,
      27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
      47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58 ]
    gap&#62; Length( const );
    52
    gap&#62; const:= Irr( o73 ){ const };;
    gap&#62; rat:= RationalizedMat( const );;

</pre>

<div class="p"><!----></div>
But much more can be deduced from the fact that certain zeros
of the permutation character can be predicted.

<div class="p"><!----></div>

<pre>
    gap&#62; names:= ClassNames( o73 );
    [ "1a", "2a", "2b", "2c", "3a", "3b", "3c", "3d", "3e", "3f", "3g", "4a",
      "4b", "4c", "4d", "5a", "6a", "6b", "6c", "6d", "6e", "6f", "6g", "6h",
      "6i", "6j", "6k", "6l", "6m", "6n", "6o", "6p", "7a", "8a", "8b", "9a",
      "9b", "9c", "9d", "10a", "10b", "12a", "12b", "12c", "12d", "12e", "12f",
      "12g", "12h", "13a", "13b", "14a", "15a", "18a", "18b", "18c", "18d", "20a"
     ]
    gap&#62; List( fus, x -&#62; names{ x } );
    [ [ "1a", "2b", "3b", "3f", "4d", "5a", "6h", "7a", "7a" ],
      [ "1a", "2b", "3c", "3f", "4d", "5a", "6f", "7a", "7a" ] ]
    gap&#62; torso:= [ 28431 ];;
    gap&#62; zeros:= [ 5, 8, 9, 11, 17, 20, 23, 28, 29, 32, 36, 37, 38,
    &#62;              43, 46, 47, 48, 53, 54, 55, 56, 57, 58 ];;
    gap&#62; names{ zeros };
    [ "3a", "3d", "3e", "3g", "6a", "6d", "6g", "6l", "6m", "6p", "9a", "9b", 
      "9c", "12b", "12e", "12f", "12g", "15a", "18a", "18b", "18c", "18d", "20a" ]

</pre>

<div class="p"><!----></div>
Every order 3 element of U lies in an A<sub>7</sub> subgroup of U,
so among the classes of element order 3, at most the classes <tt>3B</tt>, <tt>3C</tt>,
and <tt>3F</tt> can have nonzero permutation character values.
The excluded classes of element order 6 are the square roots of the
excluded order 3 elements,
likewise the given classes of element orders 9, 12, and 18 are
excluded.
The character value on <tt>20A</tt> must be zero because U does not contain
elements of this order.
So we enter the additional information about these zeros.

<div class="p"><!----></div>

<pre>
    gap&#62; for i in zeros do
    &#62;      torso[i]:= 0;
    &#62;    od;
    gap&#62; torso;
    [ 28431,,,, 0,,, 0, 0,, 0,,,,,, 0,,, 0,,, 0,,,,, 0, 0,,, 0,,,, 0, 0, 0,,,,, 0,
      ,, 0, 0, 0,,,,, 0, 0, 0, 0, 0, 0 ]
    gap&#62; perms:= PermChars( o73, rec( torso:= torso, chars:= rat ) );
    [ Character( CharacterTable( "O7(3)" ), [ 28431, 567, 567, 111, 0, 0, 243, 0,
          0, 81, 0, 15, 3, 27, 15, 6, 0, 0, 27, 0, 3, 27, 0, 0, 0, 3, 9, 0, 0, 3,
          3, 0, 4, 1, 1, 0, 0, 0, 0, 2, 2, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0 ] ) ]
    gap&#62; PermCharInfo( o73, perms ).ATLAS;
    [ "1a+78a+168a+182a+260ab+1092a+2457a+2730a+4095b+5460a+11648a" ]

</pre>

<div class="p"><!----></div>
We see that this character is already multiplicity free,
so this holds also for its extension to O<sub>7</sub>(3).2,
and we need not compute this extension.
(Of course we could compute it in the same way as in the examples above.)

<div class="p"><!----></div>

 <h2><a name="tth_sEc7">
7</a>&nbsp;&nbsp;The Action of O<sub>8</sub><sup>+</sup>(3).2<sub>1</sub> on the Cosets of 2<sup>7</sup>.A<sub>8</sub></h2>

<div class="p"><!----></div>
We are interested in the permutation character of O<sub>8</sub><sup>+</sup>(3).2<sub>1</sub>
that corresponds to the action on the cosets of a subgroup of type
2<sup>7</sup>.A<sub>8</sub>.
The intersection of the point stabilizer with the simple group O<sub>8</sub><sup>+</sup>(3)
is of type 2<sup>6</sup>.A<sub>8</sub>.
First we compute the class fusion of these groups,
modulo problems with ambiguities due to table automorphisms.

<div class="p"><!----></div>

<pre>
    gap&#62; o8p3:= CharacterTable( "O8+(3)" );;
    gap&#62; o8p2:= CharacterTable( "O8+(2)" );;
    gap&#62; fus:= PossibleClassFusions( o8p2, o8p3 );;
    gap&#62; NamesOfFusionSources( o8p2 );
    [ "A9", "2^8:O8+(2)", "O8+(2)M2", "O8+(2)M3", "O8+(2)M5", "O8+(2)M6", 
      "O8+(2)M8", "O8+(2)M9", "(3xU4(2)):2", "O8+(2)M11", "O8+(2)M12", 
      "2^(1+8)_+:(S3xS3xS3)", "3^4:2^3.S4(a)", "(A5xA5):2^2", "O8+(2)M16", 
      "O8+(2)M17", "2^(1+8)+.O8+(2)", "2^6:A8", "2.O8+(2)", "2^2.O8+(2)", "S6(2)" 
     ]
    gap&#62; sub:= CharacterTable( "2^6:A8" );;
    gap&#62; subfus:= GetFusionMap( sub, o8p2 );
    [ 1, 3, 2, 2, 4, 5, 6, 13, 3, 6, 12, 13, 14, 7, 21, 24, 11, 30, 29, 31, 13,
      17, 15, 16, 14, 17, 36, 37, 18, 41, 24, 44, 48, 28, 33, 32, 34, 35, 35, 51,
      51 ]
    gap&#62; fus:= List( fus, x -&#62; CompositionMaps( x, subfus ) );;
    gap&#62; fus:= Set( fus );;
    gap&#62; Length( fus );
    24

</pre>

<div class="p"><!----></div>
The ambiguities due to Galois automorphisms disappear when we are
looking for the permutation characters induced by the fusions.

<div class="p"><!----></div>

<pre>
    gap&#62; ind:= List( fus, x -&#62; Induced( sub, o8p3,
    &#62;                              [ TrivialCharacter( sub ) ], x )[1] );;
    gap&#62; ind:= Set( ind );;
    gap&#62; Length( ind );
    6

</pre>

<div class="p"><!----></div>
Now we try to extend the candidates to O<sub>8</sub><sup>+</sup>(3).2<sub>1</sub>;
the choice of the fusion of O<sub>8</sub><sup>+</sup>(3) into O<sub>8</sub><sup>+</sup>(3).2<sub>1</sub> determines
which of the candidates may extend.

<div class="p"><!----></div>

<pre>
    gap&#62; o8p32:= CharacterTable( "O8+(3).2_1" );;
    gap&#62; fus:= GetFusionMap( o8p3, o8p32 );;
    gap&#62; ext:= List( ind, x -&#62; CompositionMaps( x, InverseMap( fus ) ) );;
    gap&#62; ext:= Filtered( ext, x -&#62; ForAll( x, IsInt ) );
    [ [ 3838185, 17577, 8505, 8505, 873, 0, 0, 0, 0, 6561, 0, 0, 729, 0, 9, 105,
          45, 45, 105, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 189, 0, 0, 0, 9, 9, 27, 27,
          0, 0, 27, 9, 0, 8, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
          0, 0, 9, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0,
          0, 0 ], [ 3838185, 17577, 8505, 8505, 873, 0, 6561, 0, 0, 0, 0, 0, 729,
          0, 9, 105, 45, 45, 105, 30, 0, 0, 0, 0, 0, 0, 189, 0, 0, 0, 9, 0, 0, 0,
          9, 27, 27, 0, 0, 9, 27, 0, 8, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0,
          0, 0, 9, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0 ] ]

</pre>

<div class="p"><!----></div>
We compute the extensions of the first candidate;
the other belongs to another class of subgroups,
which is the image under an outer automorphism.
(These calculations may need about one hour,
depending on the computer used.)

<div class="p"><!----></div>

<pre>
    gap&#62; perms:= PermChars( o8p32, rec( torso:= ext[1] ) );
    [ Character( CharacterTable( "O8+(3).2_1" ),
        [ 3838185, 17577, 8505, 8505, 873, 0, 0, 0, 0, 6561, 0, 0, 729, 0, 9,
          105, 45, 45, 105, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 189, 0, 0, 0, 9, 9,
          27, 27, 0, 0, 27, 9, 0, 8, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,
          0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0,
          0, 0, 0, 0, 3159, 1575, 567, 63, 87, 15, 0, 0, 45, 0, 81, 9, 27, 0, 0,
          3, 3, 3, 3, 5, 5, 0, 0, 0, 4, 0, 0, 27, 0, 9, 0, 0, 15, 0, 3, 0, 0, 2,
          0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ) ]
    gap&#62; PermCharInfo( o8p32, perms ).ATLAS;
    [ "1a+260abc+520ab+819a+2808b+9450aab+18200a+23400ac+29120b+36400aab+46592abce\
    +49140d+66339a+98280ab+163800a+189540d+232960d+332800ab+368550a+419328a+531441\
    ab" ]

</pre> 
<div class="p"><!----></div>
Now we repeat the calculations for O<sub>8</sub><sup>+</sup>(3).2<sub>2</sub> instead of
O<sub>8</sub><sup>+</sup>(3).2<sub>1</sub>.

<div class="p"><!----></div>

<pre>
    gap&#62; o8p32:= CharacterTable( "O8+(3).2_2" );;
    gap&#62; fus:= GetFusionMap( o8p3, o8p32 );;
    gap&#62; ext:= List( ind, x -&#62; CompositionMaps( x, InverseMap( fus ) ) );;
    gap&#62; ext:= Filtered( ext, x -&#62; ForAll( x, IsInt ) );;
    gap&#62; perms:= PermChars( o8p32, rec( torso:= ext[1] ) );
    [ Character( CharacterTable( "O8+(3).2_2" ), [ 3838185, 17577, 8505, 873, 0,
          0, 0, 6561, 0, 0, 0, 0, 729, 0, 9, 105, 45, 105, 30, 0, 0, 0, 0, 0, 0,
          189, 0, 0, 0, 9, 0, 9, 27, 0, 0, 0, 27, 27, 9, 0, 8, 1, 1, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0,
          0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 199017, 2025, 297, 441, 73, 9, 0,
          1215, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 27, 27, 0, 1, 9, 12, 0, 0, 45, 0,
          0, 1, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0
         ] ) ]
    gap&#62; PermCharInfo( o8p32, perms ).ATLAS;
    [ "1a+260aac+520ab+819a+2808a+9450aaa+18200accee+23400ac+29120a+36400a+46592aa\
    +49140c+66339a+93184a+98280ab+163800a+184275ac+189540c+232960c+332800aa+419328\
    a+531441aa" ]

</pre> 
<div class="p"><!----></div>

<div class="p"><!----></div>

 <h2><a name="tth_sEc8">
8</a>&nbsp;&nbsp;The Action of S<sub>4</sub>(4).4 on the Cosets of 5<sup>2</sup>.[2<sup>5</sup>]</h2>

<div class="p"><!----></div>
We want to know whether the permutation character corresponding to the
action of S<sub>4</sub>(4).4 (see&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;44]) on the cosets of its
maximal subgroup of type 5<sup>2</sup>:[2<sup>5</sup>] is multiplicity free.

<div class="p"><!----></div>
The library names of subgroups for which the class fusions are stored
are listed as value of the attribute <tt>NamesOfFusionSources</tt>,
and for groups whose isomorphism type is not determined by the name
this is the recommended way to find out whether the table of the subgroup
is contained in the <font face="helvetica">GAP</font> library and known to belong to this group.
(It might be that a table with such a name is contained in the library
but belongs to another group,
and it may also be that the table of the group is contained in the
library -with any name- but it is not known that this group is
isomorphic to a subgroup of S<sub>4</sub>(4).4.)

<div class="p"><!----></div>

<pre>
    gap&#62; s444:= CharacterTable( "S4(4).4" );;
    gap&#62; NamesOfFusionSources( s444 );
    [ "(L3(2)xS4(4):2).2", "S4(4)", "S4(4).2" ]

</pre>

<div class="p"><!----></div>
So we cannot simply fetch the table of the subgroup.
As in the previous examples, we compute the possible permutation
characters.

<div class="p"><!----></div>

<pre>
    gap&#62; perms:= PermChars( s444, rec( torso:= [ Size( s444 ) / ( 5^2*2^5 ) ] ) );
    [ Character( CharacterTable( "S4(4).4" ), [ 4896, 384, 96, 0, 16, 32, 36, 16,
          0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ),
      Character( CharacterTable( "S4(4).4" ), [ 4896, 192, 32, 0, 0, 8, 6, 1, 0,
          2, 0, 0, 36, 0, 12, 0, 0, 0, 1, 0, 6, 6, 2, 2, 0, 0, 0, 0, 1, 1 ] ),
      Character( CharacterTable( "S4(4).4" ), [ 4896, 240, 64, 0, 8, 8, 36, 16,
          0, 0, 0, 0, 0, 12, 8, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ) ]

</pre>

<div class="p"><!----></div>
So there are three candidates.
None of them is multiplicity free,
so we need not decide which of the candidates actually belongs
to the group 5<sup>2</sup>:[2<sup>5</sup>] we have in mind.

<div class="p"><!----></div>

<pre>
    gap&#62; PermCharInfo( s444, perms ).ATLAS;
    [ "1abcd+50abcd+153abcd+170a^{4}b^{4}+680aabb",
      "1a+50ac+153a+170aab+256a+680abb+816a+1020a",
      "1ac+50ac+68a+153abcd+170aabbb+204a+680abb+1020a" ]

</pre>

<div class="p"><!----></div>
(If we would be interested which candidate is the right one,
we could for example look at the intersection with S<sub>4</sub>(4),
and hope for a contradiction to the fact that the group must lie
in a (A<sub>5</sub> &times;A<sub>5</sub>):2 subgroup.)

<div class="p"><!----></div>

 <h2><a name="tth_sEc9">
9</a>&nbsp;&nbsp;The Action of Co<sub>1</sub> on the Cosets of Involution Centralizers</h2>

<div class="p"><!----></div>
We compute the permutation characters of the sporadic simple Conway group
Co<sub>1</sub> (see&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;180]) corresponding to the actions on
the cosets of involution centralizers.
Equivalently, we are interested in the action of Co<sub>1</sub> on conjugacy
classes of involutions.
These characters can be computed as follows.
First we take the table of Co<sub>1</sub>.

<div class="p"><!----></div>

<pre>
    gap&#62; t:= CharacterTable( "Co1" );
    CharacterTable( "Co1" )

</pre>

<div class="p"><!----></div>
The centralizer of each <tt>2A</tt> element is a maximal subgroup of Co<sub>1</sub>.
This group is also contained in the table library.
So we can compute the permutation character by explicit induction,
and the decomposition in irreducibles is computed with the command
<tt>PermCharInfo</tt>.

<div class="p"><!----></div>

<pre>
    gap&#62; s:= CharacterTable( Maxes( t )[5] );
    CharacterTable( "2^(1+8)+.O8+(2)" )
    gap&#62; ind:= Induced( s, t, [ TrivialCharacter( s ) ] );;
    gap&#62; PermCharInfo( t, ind ).ATLAS;
    [ "1a+299a+17250a+27300a+80730a+313950a+644644a+2816856a+5494125a+12432420a+24\
    794000a" ]

</pre>

<div class="p"><!----></div>
The centralizer of a <tt>2B</tt> element is not maximal.
First we compute which maximal subgroup can contain it.
The character tables of all maximal subgroups of Co<sub>1</sub> are contained
in the <font face="helvetica">GAP</font>'s table library,
so we may take these tables and look at the group orders.

<div class="p"><!----></div>

<pre>
    gap&#62; centorder:= SizesCentralizers( t )[3];;
    gap&#62; maxes:= List( Maxes( t ), CharacterTable );;
    gap&#62; cand:= Filtered( maxes, x -&#62; Size( x ) mod centorder = 0 );
    [ CharacterTable( "(A4xG2(4)):2" ) ]
    gap&#62; u:= cand[1];;
    gap&#62; index:= Size( u ) / centorder;
    3

</pre>

<div class="p"><!----></div>
So there is a unique class of maximal subgroups containing the centralizer
of a <tt>2B</tt> element, as a subgroup of index 3.
We compute the unique permutation character of degree 3 of this group,
and induce this character to G.

<div class="p"><!----></div>

<div class="p"><!----></div>

<pre>
    gap&#62; subperm:= PermChars( u, rec( degree := index, bounds := false ) );
    [ Character( CharacterTable( "(A4xG2(4)):2" ),
        [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ) ]
    gap&#62; subperm = PermChars( u, rec( torso := [ 3 ] ) );
    true
    gap&#62; ind:= Induced( u, t, subperm );
    [ Character( CharacterTable( "Co1" ), [ 2065694400, 181440, 119408, 38016,
          2779920, 0, 0, 378, 30240, 864, 0, 720, 316, 80, 2520, 30, 0, 6480,
          1508, 0, 0, 0, 0, 0, 38, 18, 105, 0, 600, 120, 56, 24, 0, 12, 0, 0, 0,
          120, 48, 18, 0, 0, 6, 0, 360, 144, 108, 0, 0, 10, 0, 0, 0, 0, 0, 4, 2,
          3, 9, 0, 0, 15, 3, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 12,
          8, 0, 6, 0, 0, 3, 0, 1, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0 ] ) ]
    gap&#62; PermCharInfo( t, ind ).ATLAS;
    [ "1a+1771a+8855a+27300aa+313950a+345345a+644644aa+871884aaa+1771000a+2055625a\
    +4100096a+7628985a+9669660a+12432420aa+21528000aa+23244375a+24174150aa+2479400\
    0a+31574400aa+40370176a+60435375a+85250880aa+100725625a+106142400a+150732800a+\
    184184000a+185912496a+207491625a+299710125a+302176875a" ]

</pre>

<div class="p"><!----></div>
Finally, we try the same for the centralizer of a <tt>2C</tt> element.

<div class="p"><!----></div>

<pre>
    gap&#62; centorder:= SizesCentralizers( t )[4];;
    gap&#62; cand:= Filtered( maxes, x -&#62; Size( x ) mod centorder = 0 );
    [ CharacterTable( "Co2" ), CharacterTable( "2^11:M24" ) ]

</pre>

<div class="p"><!----></div>
The group order excludes all except two classes of maximal subgroups.
But the <tt>2C</tt> centralizer cannot lie in Co<sub>2</sub> because the involution
centralizers in Co<sub>2</sub> are too small.

<div class="p"><!----></div>

<pre>
    gap&#62; u:= cand[1];;
    gap&#62; GetFusionMap( u, t );
    [ 1, 2, 2, 4, 7, 6, 9, 11, 11, 10, 11, 12, 14, 17, 16, 21, 23, 20, 22, 22,
      24, 28, 30, 33, 31, 32, 33, 33, 37, 42, 41, 43, 44, 48, 52, 49, 53, 55, 53,
      52, 54, 60, 60, 60, 64, 65, 65, 67, 66, 70, 73, 72, 78, 79, 84, 85, 87, 92,
      93, 93 ]
    gap&#62; centorder;
    389283840
    gap&#62; SizesCentralizers( u )[4];
    1474560

</pre>

<div class="p"><!----></div>
So we try the second candidate.

<div class="p"><!----></div>

<pre>
    gap&#62; u:= cand[2];
    CharacterTable( "2^11:M24" )
    gap&#62; index:= Size( u ) / centorder;
    1288
    gap&#62; subperm:= PermChars( u, rec( torso := [ index ] ) );
    [ Character( CharacterTable( "2^11:M24" ), [ 1288, 1288, 1288, 56, 56, 56,
          56, 56, 56, 48, 48, 48, 48, 48, 10, 10, 10, 10, 7, 7, 8, 8, 8, 8, 8, 8,
          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 0,
          0, 0, 0, 2, 2, 2, 2, 3, 3, 3, 1, 1, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0 ] ) ]
    gap&#62; subperm = PermChars( u, rec( degree:= index, bounds := false ) );
    true
    gap&#62; ind:= Induced( u, t, subperm );
    [ Character( CharacterTable( "Co1" ), [ 10680579000, 1988280, 196560, 94744,
          0, 17010, 0, 945, 7560, 3432, 2280, 1728, 252, 308, 0, 225, 0, 0, 0,
          270, 0, 306, 0, 46, 45, 25, 0, 0, 120, 32, 12, 52, 36, 36, 0, 0, 0, 0,
          0, 45, 15, 0, 9, 3, 0, 0, 0, 0, 18, 0, 30, 0, 6, 18, 0, 3, 5, 0, 0, 0,
          0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 2,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ) ]
    gap&#62; PermCharInfo( t, ind ).ATLAS;
    [ "1a+17250aa+27300a+80730aa+644644aaa+871884a+1821600a+2055625aaa+2816856a+54\
    94125a^{4}+12432420aa+16347825aa+23244375a+24174150aa+24667500aa+24794000aaa+3\
    1574400a+40370176a+55255200a+66602250a^{4}+83720000aa+85250880aaa+91547820aa+1\
    06142400a+150732800a+184184000aaa+185912496aaa+185955000aaa+207491625aaa+21554\
    7904aa+241741500aaa+247235625a+257857600aa+259008750a+280280000a+302176875a+32\
    6956500a+387317700a+402902500a+464257024a+469945476b+502078500a+503513010a+504\
    627200a+522161640a" ]

</pre>

<div class="p"><!----></div>

 <h2><a name="tth_sEc10">
10</a>&nbsp;&nbsp;The Multiplicity Free Permutation Characters of G<sub>2</sub>(3)</h2>

<div class="p"><!----></div>
We compute the multiplicity free possible permutation characters of
G<sub>2</sub>(3) (see&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;60]).

<div class="p"><!----></div>
For each divisor d of the group order,
we compute all those possible permutation
characters of degree d of G for which each irreducible constituent
occurs with multiplicity at most 1;
this is done by prescribing the <tt>maxmult</tt> component of the second argument
of <tt>PermChars</tt> to be the list with 1 at each position.

<div class="p"><!----></div>

<pre>
    gap&#62; t:= CharacterTable( "G2(3)" );
    CharacterTable( "G2(3)" )
    gap&#62; t:= CharacterTable( "G2(3)" );;
    gap&#62; n:= Length( RationalizedMat( Irr( t ) ) );;
    gap&#62; maxmult:= List( [ 1 .. n ], i -&#62; 1 );;
    gap&#62; perms:= [];;
    gap&#62; divs:= DivisorsInt( Size( t ) );;
    gap&#62; for d in divs do
    &#62;      Append( perms,
    &#62;              PermChars( t, rec( bounds  := false,
    &#62;                                 degree  := d,
    &#62;                                 maxmult := maxmult ) ) );
    &#62;    od;
    gap&#62; Length( perms );
    42
    gap&#62; List( perms, Degree );
    [ 1, 351, 351, 364, 364, 378, 378, 546, 546, 546, 546, 546, 702, 702, 728,
      728, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1456, 1456, 1638,
      1638, 2184, 2184, 2457, 2457, 2457, 2457, 3159, 3276, 3276, 3276, 3276,
      4368, 6552, 6552 ]

</pre>

<div class="p"><!----></div>
For finding out which of these candidates are really permutation
characters, we could inspect them piece by piece, using the information
in&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>].
For example, the candidates of degrees 351, 364, and 378 are
induced from the trivial characters of maximal subgroups of G,
whereas the candidates of degree 546 are not permutation characters.

<div class="p"><!----></div>
Since the table of marks of G is available in <font face="helvetica">GAP</font>,
we can extract all permutation characters from the table of marks,
and then filter out the multiplicity free ones.

<div class="p"><!----></div>

<pre>
    gap&#62; tom:= TableOfMarks( "G2(3)" );
    TableOfMarks( "G2(3)" )
    gap&#62; tbl:= CharacterTable( "G2(3)" );
    CharacterTable( "G2(3)" )
    gap&#62; permstom:= PermCharsTom( tbl, tom );;
    gap&#62; Length( permstom );
    433
    gap&#62; multfree:= Intersection( perms, permstom );;
    gap&#62; Length( multfree );
    15
    gap&#62; List( multfree, Degree );
    [ 1, 351, 351, 364, 364, 378, 378, 702, 702, 728, 728, 1092, 1092, 2184, 2184
     ]

</pre>

<div class="p"><!----></div>

 <h2><a name="tth_sEc11">
11</a>&nbsp;&nbsp;Degree 11&nbsp;200 Permutation Characters of O<sub>8</sub><sup>+</sup>(2)</h2>

<div class="p"><!----></div>
We compute the primitive permutation characters of degree 11&nbsp;200 of
O<sub>8</sub><sup>+</sup>(2) and O<sub>8</sub><sup>+</sup>(2).2 (see&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;85]).
The character table of the maximal subgroup of type 3<sup>4</sup>:2<sup>3</sup>.S<sub>4</sub> in
O<sub>8</sub><sup>+</sup>(2) is not available in the <font face="helvetica">GAP</font> table library.
But the group extends to a wreath product of S<sub>3</sub> and S<sub>4</sub> in the
group O<sub>8</sub><sup>+</sup>(2).2, and the table of this wreath product can be
constructed easily.

<div class="p"><!----></div>

<pre>
    gap&#62; tbl2:= CharacterTable("O8+(2).2");;
    gap&#62; s3:= CharacterTable( "Symmetric", 3 );;
    gap&#62; s:= CharacterTableWreathSymmetric( s3, 4 );
    CharacterTable( "Sym(3)wrS4" )

</pre>

<div class="p"><!----></div>
The permutation character <tt>pi</tt> of O<sub>8</sub><sup>+</sup>(2).2 can thus be computed by
explicit induction, and the character of O<sub>8</sub><sup>+</sup>(2) is obtained by
restriction of <tt>pi</tt>.

<div class="p"><!----></div>

<pre>
    gap&#62; fus:= PossibleClassFusions( s, tbl2 );
    [ [ 1, 41, 6, 3, 48, 9, 42, 19, 51, 8, 5, 50, 24, 49, 7, 2, 44, 22, 42, 12,
          53, 17, 58, 21, 5, 47, 26, 50, 37, 52, 23, 60, 18, 4, 46, 25, 14, 61,
          20, 9, 53, 30, 51, 26, 64, 8, 52, 31, 13, 56, 38 ] ]
    gap&#62; pi:= Induced( s, tbl2, [ TrivialCharacter( s ) ], fus[1] )[1];
    Character( CharacterTable( "O8+(2).2" ), [ 11200, 256, 160, 160, 80, 40, 40,
      76, 13, 0, 0, 8, 8, 4, 0, 0, 16, 16, 4, 4, 4, 1, 1, 1, 1, 5, 0, 0, 0, 1, 1,
      0, 0, 0, 0, 0, 2, 2, 0, 0, 1120, 96, 0, 16, 0, 16, 8, 10, 4, 6, 7, 12, 3,
      0, 0, 2, 0, 4, 0, 1, 1, 0, 0, 1, 0, 0, 0 ] )
    gap&#62; PermCharInfo( tbl2, pi ).ATLAS;
    [ "1a+84a+168a+175a+300a+700c+972a+1400a+3200a+4200b" ]
    gap&#62; tbl:= CharacterTable( "O8+(2)" );
    CharacterTable( "O8+(2)" )
    gap&#62; rest:= RestrictedClassFunction( pi, tbl );
    Character( CharacterTable( "O8+(2)" ), [ 11200, 256, 160, 160, 160, 80, 40,
      40, 40, 76, 13, 0, 0, 8, 8, 8, 4, 0, 0, 0, 16, 16, 16, 4, 4, 4, 4, 1, 1, 1,
      1, 1, 1, 5, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0 ] )
    gap&#62; PermCharInfo( tbl, rest ).ATLAS;
    [ "1a+84abc+175a+300a+700bcd+972a+3200a+4200a" ]

</pre>

<div class="p"><!----></div>

 <h2><a name="tth_sEc12">
12</a>&nbsp;&nbsp;A Proof of Nonexistence of a Certain Subgroup</h2>

<div class="p"><!----></div>
We prove that the sporadic simple Mathieu group G = M<sub>22</sub>
(see&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;39]) has no subgroup of index 56.
In&nbsp;[<a href="#Isa76" name="CITEIsa76">Isa76</a>], remark after Theorem&nbsp;5.18, this is stated as an example
of the case that a character may be a possible permutation character but
not a permutation character.

<div class="p"><!----></div>
Let us consider the possible permutation character of degree 56 of
G.

<div class="p"><!----></div>

<pre>
    gap&#62; tbl:= CharacterTable( "M22" );
    CharacterTable( "M22" )
    gap&#62; perms:= PermChars( tbl, rec( torso:= [ 56 ] ) );
    [ Character( CharacterTable( "M22" ), [ 56, 8, 2, 4, 0, 1, 2, 0, 0, 2, 1, 1
         ] ) ]
    gap&#62; pi:= perms[1];;
    gap&#62; Norm( pi );
    2
    gap&#62; Display( tbl, rec( chars:= perms ) );
    M22
    
         2  7  7  2  5  4  .  2  .  .  3   .   .
         3  2  1  2  .  .  .  1  .  .  .   .   .
         5  1  .  .  .  .  1  .  .  .  .   .   .
         7  1  .  .  .  .  .  .  1  1  .   .   .
        11  1  .  .  .  .  .  .  .  .  .   1   1
    
           1a 2a 3a 4a 4b 5a 6a 7a 7b 8a 11a 11b
        2P 1a 1a 3a 2a 2a 5a 3a 7a 7b 4a 11b 11a
        3P 1a 2a 1a 4a 4b 5a 2a 7b 7a 8a 11a 11b
        5P 1a 2a 3a 4a 4b 1a 6a 7b 7a 8a 11a 11b
        7P 1a 2a 3a 4a 4b 5a 6a 1a 1a 8a 11b 11a
       11P 1a 2a 3a 4a 4b 5a 6a 7a 7b 8a  1a  1a
    
    Y.1    56  8  2  4  .  1  2  .  .  2   1   1
    

</pre>

<div class="p"><!----></div>
Suppose that <tt>pi</tt> is a permutation character of G.
Since G is 2-transitive on the 56 cosets of the point stabilizer S,
this stabilizer is transitive on 55 points,
and thus G has a subgroup U of index 56 &#183;55 = 3080.
We compute the possible permutation character of this degree.

<div class="p"><!----></div>

<pre>
    gap&#62; perms:= PermChars( tbl, rec( torso:= [ 56 * 55 ] ) );;
    gap&#62; Length( perms );
    16

</pre>

<div class="p"><!----></div>
U is contained in S, so only those candidates must be considered
that vanish on all classes where <tt>pi</tt> vanishes.
Furthermore, the index of U in S is odd, so the Sylow 2 subgroups
of U and S are isomorphic;
S contains elements of order 8, hence also U does.

<div class="p"><!----></div>

<pre>
    gap&#62; OrdersClassRepresentatives( tbl );
    [ 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 11, 11 ]
    gap&#62; perms:= Filtered( perms, x -&#62; x[5] = 0 and x[10] &lt;&#62; 0 );
    [ Character( CharacterTable( "M22" ), [ 3080, 56, 2, 12, 0, 0, 2, 0, 0, 2, 0,
          0 ] ), Character( CharacterTable( "M22" ),
        [ 3080, 8, 2, 8, 0, 0, 2, 0, 0, 4, 0, 0 ] ),
      Character( CharacterTable( "M22" ), [ 3080, 24, 11, 4, 0, 0, 3, 0, 0, 2, 0,
          0 ] ), Character( CharacterTable( "M22" ),
        [ 3080, 24, 20, 4, 0, 0, 0, 0, 0, 2, 0, 0 ] ) ]

</pre>

<div class="p"><!----></div>
For getting an overview of the distribution of the elements of U to the
conjugacy classes of G, we use the output of <tt>PermCharInfo</tt>.

<div class="p"><!----></div>

<pre>
    gap&#62; infoperms:= PermCharInfo( tbl, perms );;
    gap&#62; Display( tbl, infoperms.display );
    M22
    
          2    7  7  2  5  2  3
          3    2  1  2  .  1  .
          5    1  .  .  .  .  .
          7    1  .  .  .  .  .
         11    1  .  .  .  .  .
    
              1a 2a 3a 4a 6a 8a
         2P   1a 1a 3a 2a 3a 4a
         3P   1a 2a 1a 4a 2a 8a
         5P   1a 2a 3a 4a 6a 8a
         7P   1a 2a 3a 4a 6a 8a
        11P   1a 2a 3a 4a 6a 8a
    
    I.1     3080 56  2 12  2  2
    I.2        1 21  8 54 24 36
    I.3        1  3  4  9 12 18
    I.4     3080  8  2  8  2  4
    I.5        1  3  8 36 24 72
    I.6        1  3  4  9 12 18
    I.7     3080 24 11  4  3  2
    I.8        1  9 44 18 36 36
    I.9        1  3  4  9 12 18
    I.10    3080 24 20  4  .  2
    I.11       1  9 80 18  . 36
    I.12       1  3  4  9 12 18

</pre>

<div class="p"><!----></div>
We have four candidates.
For each the above list shows first the character values,
then the cardinality of the intersection of U with the classes,
and then lower bounds for the lengths of U-conjugacy classes of these
elements.
Only those classes of G are shown that contain elements of U
for at least one of the characters.

<div class="p"><!----></div>
If the first two candidates are permutation characters corresponding to
U then U contains exactly 8 elements of order 3
and thus U has a normal Sylow 3 subgroup P.
But the order of N<sub>G</sub>(P) is bounded by 72,
which can be shown as follows.
The only elements in G with centralizer order divisible by 9
are of order 1 or 3, so P is self-centralizing in G.
The factor N<sub>G</sub>(P)/C<sub>G</sub>(P) is isomorphic with a subgroup of
<span class="roman">Aut</span>(G)  &#8773; GL(2,3) which has order divisible
by 16, hence the order of N<sub>G</sub>(P) divides 144.
Now note that [ G : N<sub>G</sub>(P) ]  &#8801; 1  mod 3 by Sylow's Theorem,
and &#124;G&#124;/144 = 3&nbsp;080  &#8801; &#8722;1  mod 3.
Thus the first two candidates are not permutation characters.

<div class="p"><!----></div>
If the last two candidates are permutation characters corresponding to
U then U has self-normalizing Sylow subgroups.
This is because the index of a Sylow 2 normalizer
in G is odd and divides 9,
and if it is smaller than 9 then U contains
at most 3 &#183;15 + 1 elements of 2 power order;
the index of a Sylow 3 normalizer
in G is congruent to 1 modulo 3 and divides 16,
and if it is smaller than 16 then U contains
at most 4 &#183;8 elements of order 3.

<div class="p"><!----></div>
But since U is solvable and not a p-group,
not all its Sylow subgroups can be self-normalizing;
note that U has a proper normal subgroup N containing
a Sylow p subgroup P of U for a prime divisor p of &#124;U&#124;,
and U = N &#183;N<sub>U</sub>(P) holds by the Frattini argument
(see&nbsp;[<a href="#Hup67" name="CITEHup67">Hup67</a>,Satz&nbsp;I.7.8]).

<div class="p"><!----></div>

 <h2><a name="tth_sEc13">
13</a>&nbsp;&nbsp;A Permutation Character of the Lyons group</h2>

<div class="p"><!----></div>
Let G be a maximal subgroup with structure 3<sup>2+4</sup>:2A<sub>5</sub>.D<sub>8</sub>
in the sporadic simple Lyons group Ly.
We want to compute the permutation character 1<sub>G</sub><sup>Ly</sup>.
(This construction has been explained in&nbsp;[<a href="#BP98copy" name="CITEBP98copy">BP98</a>,Section&nbsp;4.2],
without showing explicit <font face="helvetica">GAP</font> code.)

<div class="p"><!----></div>
In the representation of Ly as automorphism group of the rank 5
graph <tt>B</tt> with 9&nbsp;606&nbsp;125 points (see&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;174]),
G is the stabilizer of an edge.
A group S with structure 3.McL.2 is the point stabilizer.
So the two point stabilizer U = S &#8745;G is a subgroup of index 2
in G.
The index of U in S is 15&nbsp;400, and according to the list of
maximal subgroups of McL.2 (see&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;100]),
the group U is isomorphic to the preimage in 3.McL.2 of a subgroup H
of McL.2 with structure 3<sub>+</sub><sup>1+4</sup>:4S<sub>5</sub>.

<div class="p"><!----></div>
Using the improved combinatorial method described
in&nbsp;[<a href="#BP98copy" name="CITEBP98copy">BP98</a>,Section&nbsp;3.2],
all possible permutation characters of degree 15&nbsp;400 for the group McL
are computed.
(The method of&nbsp;[<a href="#BP98copy" name="CITEBP98copy">BP98</a>,Section&nbsp;3.3] is slower but also needs only
a few seconds.)

<div class="p"><!----></div>

<pre>
    gap&#62; ly:= CharacterTable( "Ly" );;
    gap&#62; mcl:= CharacterTable( "McL" );;
    gap&#62; mcl2:= CharacterTable( "McL.2" );;
    gap&#62; 3mcl2:= CharacterTable( "3.McL.2" );;
    gap&#62; perms:= PermChars( mcl, rec( degree:= 15400 ) );
    [ Character( CharacterTable( "McL" ), [ 15400, 56, 91, 10, 12, 25, 0, 11, 2,
          0, 0, 2, 1, 1, 1, 0, 0, 3, 0, 0, 1, 1, 1, 1 ] ),
      Character( CharacterTable( "McL" ), [ 15400, 280, 10, 37, 20, 0, 5, 10, 1,
          0, 0, 2, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0 ] ) ]

</pre>

<div class="p"><!----></div>
We get two characters, corresponding to the two classes of maximal
subgroups of index 15&nbsp;400 in McL.
The permutation character &#960; =  1<sub>H &#8745;McL</sub><sup>McL</sup> is the one with
nonzero value on the class <tt>10A</tt>, since the subgroup of structure
2S<sub>5</sub> in H &#8745;McL contains elements of order 10.

<div class="p"><!----></div>

<pre>
    gap&#62; ord10:= Filtered( [ 1 .. NrConjugacyClasses( mcl ) ],
    &#62;                      i -&#62; OrdersClassRepresentatives( mcl )[i] = 10 );
    [ 15 ]
    gap&#62; List( perms, pi -&#62; pi[ ord10[1] ] );
    [ 1, 0 ]
    gap&#62; pi:= perms[1];
    Character( CharacterTable( "McL" ), [ 15400, 56, 91, 10, 12, 25, 0, 11, 2, 0,
      0, 2, 1, 1, 1, 0, 0, 3, 0, 0, 1, 1, 1, 1 ] )

</pre>

<div class="p"><!----></div>
The character 1<sub>H</sub><sup>McL.2</sup> is an extension of &#960;,
so we can use the method of&nbsp;[<a href="#BP98copy" name="CITEBP98copy">BP98</a>,Section&nbsp;3.3] to compute all
possible permutation characters for the group McL.2 that have
the values of &#960; on the classes of McL.
We find that the extension of &#960; to a permutation character of McL.2
is unique.
Regarded as a character of 3.McL.2, this character is equal to 1<sub>U</sub><sup>S</sup>.

<div class="p"><!----></div>

<pre>
    gap&#62; map:= InverseMap( GetFusionMap( mcl, mcl2 ) );
    [ 1, 2, 3, 4, 5, 6, 7, 8, 9, [ 10, 11 ], 12, [ 13, 14 ], 15, 16, 17, 18, 
      [ 19, 20 ], [ 21, 22 ], [ 23, 24 ] ]
    gap&#62; torso:= CompositionMaps( pi, map );
    [ 15400, 56, 91, 10, 12, 25, 0, 11, 2, 0, 2, 1, 1, 0, 0, 3, 0, 1, 1 ]
    gap&#62; perms:= PermChars( mcl2, rec( torso:= torso ) );
    [ Character( CharacterTable( "McL.2" ), [ 15400, 56, 91, 10, 12, 25, 0, 11, 
          2, 0, 2, 1, 1, 0, 0, 3, 0, 1, 1, 110, 26, 2, 4, 0, 0, 5, 2, 1, 1, 0, 0, 
          1, 1 ] ) ]
    gap&#62; pi:= Inflated( perms[1], 3mcl2 );
    Character( CharacterTable( "3.McL.2" ), [ 15400, 15400, 56, 56, 91, 91, 10, 
      12, 12, 25, 25, 0, 0, 11, 11, 2, 2, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 0, 3, 
      3, 0, 0, 0, 1, 1, 1, 1, 1, 1, 110, 26, 2, 4, 0, 0, 5, 2, 1, 1, 0, 0, 1, 1 
     ] )

</pre>

<div class="p"><!----></div>
The fusion of conjugacy classes of S in Ly can be computed from
the character tables of S and Ly given in&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>],
it is unique up to Galois automorphisms of the table of Ly.

<div class="p"><!----></div>

<pre>
    gap&#62; fus:= PossibleClassFusions( 3mcl2, ly );;  Length( fus );
    4
    gap&#62; g:= AutomorphismsOfTable( ly );;
    gap&#62; OrbitLengths( g, fus, OnTuples );    
    [ 4 ]

</pre>

<div class="p"><!----></div>
Now we can induce 1<sub>U</sub><sup>S</sup> to Ly, which yields (1<sub>U</sub><sup>S</sup>)<sup>Ly</sup> = 1<sub>U</sub><sup>Ly</sup>.

<div class="p"><!----></div>

<pre>
    gap&#62; pi:= Induced( 3mcl2, ly, [ pi ], fus[1] )[1];
    Character( CharacterTable( "Ly" ), [ 147934325000, 286440, 1416800, 1082, 
      784, 12500, 0, 672, 42, 24, 0, 40, 0, 2, 20, 0, 0, 0, 64, 10, 0, 50, 2, 0, 
      0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0 ] )

</pre>

<div class="p"><!----></div>
All elements of odd order in G are contained in U,
for such an element g we have

<br clear="all" /><table border="0" width="100%"><tr><td>
<table align="center" cellspacing="0"  cellpadding="2"><tr><td nowrap="nowrap" align="center">
 1<sub>G</sub><sup>Ly</sup>(g) = </td><td nowrap="nowrap" align="center">
&#124;C<sub>Ly</sub>(g)&#124;
<div class="hrcomp"><hr noshade="noshade" size="1"/></div>&#124;G&#124;<br /></td><td nowrap="nowrap" align="center">
&#183;&#124;G &#8745;Cl<sub>Ly</sub>(g)&#124; = </td><td nowrap="nowrap" align="center">
&#124;C<sub>Ly</sub>(g)&#124;
<div class="hrcomp"><hr noshade="noshade" size="1"/></div>2 &#183;&#124;U&#124;<br /></td><td nowrap="nowrap" align="center">
&#183;&#124;U &#8745;Cl<sub>Ly</sub>(g)&#124; = </td><td nowrap="nowrap" align="center">
1
<div class="hrcomp"><hr noshade="noshade" size="1"/></div>2<br /></td><td nowrap="nowrap" align="center">
&#183;1<sub>U</sub><sup>Ly</sup>(g) &nbsp;, </td></tr></table>
</td></tr></table>


so we can prescribe the values of 1<sub>G</sub><sup>Ly</sup> on all classes of odd
element order.
For elements g of even order we have the weaker condition
U&#8745;Cl<sub>Ly</sub>(g)  &#8838; G &#8745;Cl<sub>Ly</sub>(g)
and thus 1<sub>G</sub><sup>Ly</sup>(g)  &#8805; [1/2] &#183;1<sub>U</sub><sup>Ly</sup>(g),
which gives lower bounds for the value of 1<sub>G</sub><sup>Ly</sup> on the
remaining classes.

<div class="p"><!----></div>

<pre>
    gap&#62; orders:= OrdersClassRepresentatives( ly );
    [ 1, 2, 3, 3, 4, 5, 5, 6, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 12, 12, 14, 15, 
      15, 15, 18, 20, 21, 21, 22, 22, 24, 24, 24, 25, 28, 30, 30, 31, 31, 31, 31, 
      31, 33, 33, 37, 37, 40, 40, 42, 42, 67, 67, 67 ]
    gap&#62; torso:= [];;                                   
    gap&#62; for i in [ 1 .. Length( orders ) ] do
    &#62;      if orders[i] mod 2 = 1 then
    &#62;        torso[i]:= pi[i]/2;
    &#62;      fi;
    &#62;    od;
    gap&#62; torso;
    [ 73967162500,, 708400, 541,, 6250, 0,,,, 0,,, 1,,, 0, 0,,,, 25, 1, 0,,, 0, 0,
      ,,,,, 0,,,, 0, 0, 0, 0, 0, 0, 0, 0, 0,,,,, 0, 0, 0 ]

</pre>

<div class="p"><!----></div>
Exactly one possible permutation character of Ly satisfies these
conditions.

<div class="p"><!----></div>

<pre>
    gap&#62; perms:= PermChars( ly, rec( torso:= torso ) );;
    gap&#62; Length( perms );
    43
    gap&#62; perms:= Filtered( perms, cand -&#62; ForAll( [ 1 .. Length( orders ) ],
    &#62;        i -&#62; cand[i] &#62;= pi[i] / 2 ) );
    [ Character( CharacterTable( "Ly" ), [ 73967162500, 204820, 708400, 541, 392, 
          6250, 0, 1456, 61, 25, 0, 22, 10, 1, 10, 0, 0, 0, 32, 5, 0, 25, 1, 0, 
          1, 2, 0, 0, 0, 0, 4, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 
          0, 0, 0, 0, 0 ] ) ]

</pre>

<div class="p"><!----></div>
(The permutation character 1<sub>G</sub><sup>Ly</sup> was used in the proof that the
character &#967;<sub>37</sub> of Ly (see&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;175])
occurs with multiplicity at least 2 in each character of Ly
that is induced from a proper subgroup of Ly.)

<div class="p"><!----></div>

 <h2><a name="tth_sEc14">
14</a>&nbsp;&nbsp;Identifying two subgroups of <span class="roman">Aut</span>(U<sub>3</sub>(5)) (October&nbsp;2001)</h2><a name="U35sub">
</a>

<div class="p"><!----></div>
According to the Atlas of Finite Groups&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;34],
the group <span class="roman">Aut</span>(U<sub>3</sub>(5)) has two classes of maximal subgroups of
order 2<sup>4</sup> &#183;3<sup>3</sup>, which have the structures 3<sup>2</sup> :2S<sub>4</sub> and
6<sup>2</sup> :D<sub>12</sub>, respectively.

<div class="p"><!----></div>

<pre>
    gap&#62; tbl:= CharacterTable( "U3(5).3.2" );
    CharacterTable( "U3(5).3.2" )
    gap&#62; deg:= Size( tbl ) / ( 2^4*3^3 );
    1750
    gap&#62; pi:= PermChars( tbl, rec( torso:= [ deg ] ) );
    [ Character( CharacterTable( "U3(5).3.2" ), [ 1750, 70, 13, 2, 0, 0, 1, 0, 0, 
          0, 10, 7, 10, 4, 2, 0, 0, 0, 0, 0, 0, 30, 10, 3, 0, 0, 1, 0, 0 ] ), 
      Character( CharacterTable( "U3(5).3.2" ), [ 1750, 30, 4, 6, 0, 0, 0, 0, 0, 
          0, 40, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 20, 0, 2, 2, 0, 0, 0, 0 ] ) ]

</pre>

<div class="p"><!----></div>
Now the question is which character belongs to which subgroup.
We see that the first character vanishes on the classes of element order
8 and the second does not, so only the first one can be the permutation
character induced from 6<sup>2</sup> :D<sub>12</sub>.

<div class="p"><!----></div>

<pre>
    gap&#62; ord8:= Filtered( [ 1 .. NrConjugacyClasses( tbl ) ],
    &#62;               i -&#62; OrdersClassRepresentatives( tbl )[i] = 8 );
    [ 9, 25 ]
    gap&#62; List( pi, x -&#62; x{ ord8 } );
    [ [ 0, 0 ], [ 0, 2 ] ]

</pre>

<div class="p"><!----></div>
Thus the question is whether the second candidate is really a permutation
character.
Since none of the two candidates vanishes on any outer coset of
U<sub>3</sub>(5) in <span class="roman">Aut</span>(U<sub>3</sub>(5)), the point stabilizers are extensions
of groups of order 2<sup>3</sup> &#183;3<sup>2</sup> in U<sub>3</sub>(5).
The restrictions of the candidates to U<sub>3</sub>(5) are different,
so we can try to answer the question using information about this group.

<div class="p"><!----></div>

<pre>
    gap&#62; subtbl:= CharacterTable( "U3(5)" );
    CharacterTable( "U3(5)" )
    gap&#62; rest:= RestrictedClassFunctions( pi, subtbl );
    [ Character( CharacterTable( "U3(5)" ), [ 1750, 70, 13, 2, 0, 0, 0, 0, 1, 0, 
          0, 0, 0, 0 ] ), Character( CharacterTable( "U3(5)" ), 
        [ 1750, 30, 4, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ) ]

</pre>

<div class="p"><!----></div>
The intersection of the 3<sup>2</sup> :2S<sub>4</sub> subgroup with U<sub>3</sub>(5) lies
inside the maximal subgroup of type M<sub>10</sub>,
which does not contain elements of order6.
Only the second character has this property.

<div class="p"><!----></div>

<pre>
    gap&#62; ord6:= Filtered( [ 1 .. NrConjugacyClasses( subtbl ) ],
    &#62;               i -&#62; OrdersClassRepresentatives( subtbl )[i] = 6 );
    [ 9 ]
    gap&#62; List( rest, x -&#62; x{ ord6 } );
    [ [ 1 ], [ 0 ] ]

</pre>

<div class="p"><!----></div>
In order to establish the two characters as permutation characters,
we could also compute the permutation characters of the degree in question
directly from the table of marks of U<sub>3</sub>(5), which is contained in the
<font face="helvetica">GAP</font> library of tables of marks.

<div class="p"><!----></div>

<pre>
    gap&#62; tom:= TableOfMarks( "U3(5)" );
    TableOfMarks( "U3(5)" )
    gap&#62; perms:= PermCharsTom( subtbl, tom );;
    gap&#62; Set( Filtered( perms, x -&#62; x[1] = deg ) ) = Set( rest );
    true

</pre>

<div class="p"><!----></div>
We were mainly interested in the multiplicities of irreducible characters
in these characters.
The action of <span class="roman">Aut</span>(U<sub>3</sub>(5) on the cosets of 3<sup>2</sup> :2S<sub>4</sub>
turns out to be multiplicity-free whereas that on the cosets of
6<sup>2</sup> :D<sub>12</sub> is not.

<div class="p"><!----></div>

<pre>
    gap&#62; PermCharInfo( tbl, pi ).ATLAS;
    [ "1a+21a+42a+84aac+105a+125a+126a+250a+252a+288bc", 
      "1a+42a+84ac+105ab+125a+126a+250a+252b+288bc" ]

</pre>

<div class="p"><!----></div>
It should be noted that the restrictions of the multiplicity-free character
to the subgroups U<sub>3</sub>(5).2 and U<sub>3</sub>(5).3 of <span class="roman">Aut</span>(U<sub>3</sub>(5) are not
multiplicity-free.

<div class="p"><!----></div>

<pre>
    gap&#62; subtbl2:= CharacterTable( "U3(5).2" );;
    gap&#62; rest2:= RestrictedClassFunctions( pi, subtbl2 );;
    gap&#62; PermCharInfo( subtbl2, rest2 ).ATLAS;
    [ "1a+21aab+28aa+56aa+84a+105a+125aab+126aab+288aa", 
      "1a+21ab+28a+56a+84a+105ab+125aab+126a+252a+288aa" ]
    gap&#62; subtbl3:= CharacterTable( "U3(5).3" );;
    gap&#62; rest3:= RestrictedClassFunctions( pi, subtbl3 );;
    gap&#62; PermCharInfo( subtbl3, rest3 ).ATLAS;
    [ "1a+21abc+84aab+105a+125abc+126abc+144bcef", 
      "1a+21bc+84ab+105aa+125abc+126adg+144bcef" ]

</pre>

<div class="p"><!----></div>

 <h2><a name="tth_sEc15">
15</a>&nbsp;&nbsp;A Permutation Character of <span class="roman">Aut</span>(O<sub>8</sub><sup>+</sup>(2)) (October&nbsp;2001)</h2><a name="O82sub">
</a>

<div class="p"><!----></div>
According to the Atlas of Finite Groups&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;85],
the group G = <span class="roman">Aut</span>(O<sub>8</sub><sup>+</sup>(2)) has a class of maximal subgroups of
order 2<sup>13</sup> &#183;3<sup>2</sup>, thus the index of these subgroups in G is
3<sup>4</sup> &#183;5<sup>2</sup> &#183;7.
The intersection of these subgroups with H = O<sub>8</sub><sup>+</sup>(2) lie inside maximal
subgroups of type 2<sup>6</sup> :A<sub>8</sub>.
We want to show that the permutation character of the action of G on
the cosets of these subgroups is not multiplicity-free.

<div class="p"><!----></div>
Since the table of marks for H is available in <font face="helvetica">GAP</font>, but not that for
G, we first compute the H-permutation characters of the intersections
with H of index 3<sup>4</sup> &#183;5<sup>2</sup> &#183;7 = 14&nbsp;175 subgroups in G.

<div class="p"><!----></div>
(Note that these intersections have order 2<sup>12</sup> &#183;3 because
subgroups of order 2<sup>12</sup> &#183;3<sup>2</sup> are contained in O<sub>8</sub><sup>+</sup>(2).2
and hence are not maximal in G.)

<div class="p"><!----></div>

<pre>
    gap&#62; t:= CharacterTable( "O8+(2).3.2" );;
    gap&#62; s:= CharacterTable( "O8+(2)" );;
    gap&#62; tom:= TableOfMarks( s );;
    gap&#62; perms:= PermCharsTom( s, tom );;
    gap&#62; deg:= 3^4*5^2*7;
    14175
    gap&#62; perms:= Filtered( perms, x -&#62; x[1] = deg );;
    gap&#62; Length( perms );
    4
    gap&#62; Length( Set( perms ) );
    1

</pre>

<div class="p"><!----></div>
We see that there are four classes of subgroups S in H that may
belong to maximal subgroups of the desired index in G,
and that the permutation characters are equal.
They lead to such groups if they extend to G,
so we compute the possible permutation characters of G that extend
these characters.

<div class="p"><!----></div>

<pre>
    gap&#62; fus:= PossibleClassFusions( s, t );
    [ [ 1, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7, 8, 9, 10, 10, 10, 11, 12, 12, 12, 13, 
          13, 13, 14, 14, 14, 15, 16, 16, 16, 17, 17, 17, 18, 19, 20, 21, 22, 22, 
          22, 23, 23, 23, 24, 24, 24, 25, 26, 26, 26, 27, 27, 27 ] ]
    gap&#62; fus:= fus[1];;
    gap&#62; inv:= InverseMap( fus );;
    gap&#62; comp:= CompositionMaps( perms[1], inv );
    [ 14175, 1215, 375, 79, 0, 0, 27, 27, 99, 15, 7, 0, 0, 0, 0, 9, 3, 1, 0, 1, 
      1, 0, 0, 0, 0, 0, 0 ]
    gap&#62; ext:= PermChars( t, rec( torso:= comp ) );
    [ Character( CharacterTable( "O8+(2).3.2" ), 
        [ 14175, 1215, 375, 79, 0, 0, 27, 27, 99, 15, 7, 0, 0, 0, 0, 9, 3, 1, 0, 
          1, 1, 0, 0, 0, 0, 0, 0, 63, 9, 15, 7, 1, 0, 3, 3, 3, 1, 0, 0, 1, 1, 
          945, 129, 45, 69, 21, 25, 13, 0, 0, 0, 9, 0, 3, 3, 7, 1, 0, 0, 0, 3, 1, 
          0, 0, 0, 0, 0, 0 ] ) ]
    gap&#62; PermCharInfo( t, ext[1] ).ATLAS;
    [ "1a+50b+100a+252bb+300b+700b+972bb+1400a+1944a+3200b+4032b" ]

</pre>

<div class="p"><!----></div>
Thus we get one permutation character of G which is not multiplicity-free.

<div class="p"><!----></div>

 <h2><a name="tth_sEc16">
16</a>&nbsp;&nbsp;Four Primitive Permutation Characters of the Monster Group</h2><a name="monsterperm">
</a>

<div class="p"><!----></div>
In this section, we compute four primitive permutation characters
1<sub>H</sub><sup>M</sup> of the sporadic simple Monster group M,
using the following strategy.

<div class="p"><!----></div>
  <table><tr><td width="65%"> 
Let E be an elementary abelian 2-subgroup of M,
and H = N<sub>M</sub>(E).
For an involution z  &#8712; E, let G = C<sub>M</sub>(z) and U = G &#8745;H = C<sub>H</sub>(z)
and V = C<sub>H</sub>(E), a normal subgroup of H.
According to the Atlas of Finite Groups&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;234],
G has the structure 2.B if z is in the class <tt>2A</tt> of M,
and G has the structure 2<sup>1+24</sup><sub>+</sub>.Co<sub>1</sub>
if z is in the class <tt>2B</tt> of M.
In the latter case, let N denote the extraspecial normal subgroup of order
2<sup>25</sup> in G.
It will turn out that in out situation, U contains N.

<div class="p"><!----></div>
We want to compute many values of 1<sub>H</sub><sup>M</sup>
from the knowledge of permutation characters 1<sub>X</sub><sup>M</sup>,
for suitable subgroups X with the property V  &#8804; X  &#8804; U,
and then use the <font face="helvetica">GAP</font> function <tt>PermChars</tt> for computing all those
possible permutation characters of M that take the known values;
if there is a unique solution then this is the desired character 1<sub>H</sub><sup>M</sup>.

<div class="p"><!----></div>
  </td><td width="35%"> 

<center>
 <img src="ctblpope01.png" alt="ctblpope01.png" />

</center>

  </td></tr></table> 

<div class="p"><!----></div>
Why does this approach have a chance to be successful?
Currently we do not have representations for the subgroups H in question,
but the character tables of the involution centralizers G in M
are available, and also either the character tables of X/V
for the interesting subgroups X are known or we have enough information
to compute the characters 1<sub>X</sub><sup>G</sup>.

<div class="p"><!----></div>
And how do we compute certain values of 1<sub>H</sub><sup>M</sup>?
Suppose that <font face="helvetica"><i>C</i></font> is a union of classes of M and I is an index set
such that
(1<sub>H</sub>)<sub><font face="helvetica"><i>C</i></font>&#8745;H</sub> = (&#8721;<sub>i  &#8712; I</sub> c<sub>i</sub> 1<sub>X<sub>i</sub></sub><sup>H</sup>)<sub><font face="helvetica"><i>C</i></font>&#8745;H</sub>
holds for suitable rational numbers c<sub>i</sub>.

<div class="p"><!----></div>
The right hand side of this equality lives in H/V,
provided that <font face="helvetica"><i>C</i></font> "behaves well" w.r.t. factoring out
the normal subgroup V of H,
i.&nbsp;e., if there is a set of classes in H/V whose preimages in H
form the set H &#8745;<font face="helvetica"><i>C</i></font>.
For example, <font face="helvetica"><i>C</i></font> may be the set of all those elements in M
whose order is not divisible by a particular prime p
that divides &#124;H&#124; but not &#124;U&#124;.

<div class="p"><!----></div>
Under these conditions, we have
(1<sub>H</sub><sup>M</sup>)<sub><font face="helvetica"><i>C</i></font></sub> = ((&#8721;<sub>i  &#8712; I</sub> c<sub>i</sub> 1<sub>X<sub>i</sub></sub><sup>G</sup>)<sup>M</sup>)<sub><font face="helvetica"><i>C</i></font></sub>,
and we interpret the right hand side as follows:
If X<sub>i</sub> contains N then 1<sub>X<sub>i</sub></sub><sup>G</sup> can be identified
with 1<sub>X<sub>i</sub>/N</sub><sup>G/N</sup>.
If X<sub>i</sub> contains at least Z then 1<sub>X<sub>i</sub></sub><sup>G</sup> can be identified
with 1<sub>X<sub>i</sub>/Z</sub><sup>G/Z</sup>.
As mentioned above, we have good chances to compute these characters.
So the main task in each of the following sections is to find,
for a suitable set <font face="helvetica"><i>C</i></font> of classes,
a linear combination of permutation characters of H/V
whose restriction to (<font face="helvetica"><i>C</i></font>&#8745;H) / V is constant and nonzero.

<div class="p"><!----></div>

     <h3><a name="tth_sEc16.1">
16.1</a>&nbsp;&nbsp;The Subgroup 2<sup>2</sup>.2<sup>11</sup>.2<sup>22</sup>.(S<sub>3</sub> &times;M<sub>24</sub>)
(June&nbsp;2009)</h3><a name="monsterperm1">
</a>

<div class="p"><!----></div>
According to the Atlas of Finite Groups&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;234],
the Monster group M has a class of maximal subgroups H of the type
2<sup>2</sup>.2<sup>11</sup>.2<sup>22</sup>.(S<sub>3</sub> &times;M<sub>24</sub>).
Currently the character table of H and the class fusion into M
are not available in <font face="helvetica">GAP</font>.
We are interested in the permutation character 1<sub>H</sub><sup>G</sup>,
and we will compute it without this information.

<div class="p"><!----></div>
The subgroup H normalizes a Klein four group E
whose involutions lie in the class <tt>2B</tt>.
We fix an involution z in E, and set G = C<sub>M</sub>(z), U = C<sub>H</sub>(z),
and V = C<sub>H</sub>(E).
Further, let N be the extraspecial normal subgroup of order 2<sup>25</sup>
in G.

<div class="p"><!----></div>
So G has the structure 2<sup>1+24</sup><sub>+</sub>.Co<sub>1</sub>, and U has index three in H.
The order of N U / N is a multiple of
2<sup>2+11+22&#8722;25</sup> &#183;2 &#183;&#124;M<sub>24</sub>&#124;,
and N U / N occurs as a subgroup of G / N  &#8773; Co<sub>1</sub>.

<div class="p"><!----></div>

<pre>
    gap&#62; co1:= CharacterTable( "Co1" );;
    gap&#62; order:= 2^(2+11+22-25) * 2 * Size( CharacterTable( "M24" ) );
    501397585920
    gap&#62; maxes:= List( Maxes( co1 ), CharacterTable );;
    gap&#62; filt:= Filtered( maxes, t -&#62; Size( t ) mod order = 0 );
    [ CharacterTable( "2^11:M24" ) ]
    gap&#62; List( filt, t -&#62; Size( t ) / order );
    [ 1 ]
    gap&#62; k:= filt[1];;

</pre>

<div class="p"><!----></div>
The list of maximal subgroups of Co<sub>1</sub> (see&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;183])
tells us that NU / N is a maximal subgroup K of Co<sub>1</sub>
and has the structure 2<sup>11</sup>:M<sub>24</sub>.
In particular, U contains N and thus U/N  &#8773; K.

<div class="p"><!----></div>
Let

<br clear="all" /><table border="0" width="100%"><tr><td>
<table align="center" cellspacing="0"  cellpadding="2"><tr><td nowrap="nowrap" align="center">
 <font face="helvetica"><i>C</i></font>= { g  &#8712; M; 3 \not | &#124;g&#124; &nbsp;<span class="roman">or</span>&nbsp; 1<sub>V</sub><sup>M</sup>(g<sup>3</sup>) = 0 }.</td></tr></table>
</td></tr></table>



<div class="p"><!----></div>
Then (1<sub>H</sub>)<sub><font face="helvetica"><i>C</i></font>&#8745;H</sub> = (1<sub>U</sub><sup>H</sup> &#8722; [1/3] 1<sub>V</sub><sup>H</sup>)<sub><font face="helvetica"><i>C</i></font>&#8745;H</sub>
holds, as we can see from computations with H/V  &#8773; S<sub>3</sub>, as follows.

<div class="p"><!----></div>

<pre>
    gap&#62; f:= CharacterTable( "Symmetric", 3 );
    CharacterTable( "Sym(3)" )
    gap&#62; OrdersClassRepresentatives( f );
    [ 1, 2, 3 ]
    gap&#62; deg3:= PermChars( f, 3 );
    [ Character( CharacterTable( "Sym(3)" ), [ 3, 1, 0 ] ) ]
    gap&#62; deg6:= PermChars( f, 6 );
    [ Character( CharacterTable( "Sym(3)" ), [ 6, 0, 0 ] ) ]
    gap&#62; deg3[1] - 1/3 * deg6[1];
    ClassFunction( CharacterTable( "Sym(3)" ), [ 1, 1, 0 ] )

</pre>

<div class="p"><!----></div>
The character table of G is available in <font face="helvetica">GAP</font>,
so we can compute the permutation character &#960; =  1<sub>U</sub><sup>G</sup>
by computing the primitive permutation character 1<sub>K</sub><sup>Co<sub>1</sub></sup>,
identifying it with 1<sub>U/N</sub><sup>G/N</sup>,
and then inflating this character to G.

<div class="p"><!----></div>

<pre>
    gap&#62; m:= CharacterTable( "M" );
    CharacterTable( "M" )
    gap&#62; g:= CharacterTable( "MC2B" );
    CharacterTable( "2^1+24.Co1" )
    gap&#62; pi:= RestrictedClassFunction( TrivialCharacter( k )^co1, g );;

</pre>

<div class="p"><!----></div>
Next we consider the permutation character &#966; =  1<sub>V</sub><sup>G</sup>.
The group V does not contain N because K is perfect.
But V contains Z because otherwise U would be a direct product
of V and Z, which would imply that N would be
a direct product of V &#8745;N and Z.
So we can regard &#966; as the inflation of 1<sub>V/Z</sub><sup>G/Z</sup>
from G/Z to G,
i.&nbsp;e., we can perform the computations with the character table of the
factor group G/Z.

<div class="p"><!----></div>

<pre>
    gap&#62; zclasses:= ClassPositionsOfCentre( g );;
    gap&#62; gmodz:= g / zclasses;
    CharacterTable( "2^1+24.Co1/[ 1, 2 ]" )
    gap&#62; invmap:= InverseMap( GetFusionMap( g, gmodz ) );;
    gap&#62; pibar:= CompositionMaps( pi, invmap );;

</pre>

<div class="p"><!----></div>
Since &#966;(g) = [G:V] &#183;&#124;g<sup>G</sup> &#8745;V&#124; / &#124;g<sup>G</sup>&#124; holds for g  &#8712; G,
and since g<sup>G</sup> &#8745;V  &#8838; g<sup>G</sup> &#8745;VN,
with equality if g has odd order,
we get &#966;(g) = 2 &#183;&#960;(g) if g has odd order,
and &#966;(g) = 0 if &#960;(g) = 0.

<div class="p"><!----></div>
We want to compute the possible permutation characters with these
values.

<div class="p"><!----></div>

<pre>
    gap&#62; factorders:= OrdersClassRepresentatives( gmodz );;
    gap&#62; phibar:= [];;
    gap&#62; for i in [ 1 .. NrConjugacyClasses( gmodz ) ] do
    &#62;      if factorders[i] mod 2 = 1 then
    &#62;        phibar[i]:= 2 * pibar[i];
    &#62;      elif pibar[i] = 0 then
    &#62;        phibar[i]:= 0;
    &#62;      fi;
    &#62;    od;
    gap&#62; cand:= PermChars( gmodz, rec( torso:= phibar ) );;
    gap&#62; Length( cand );
    1

</pre>

<div class="p"><!----></div>
Now we know &#960;<sup>M</sup> = 1<sub>U</sub><sup>M</sup> and &#966;<sup>M</sup> = 1<sub>V</sub><sup>M</sup>,
so we can write down (1<sub>H</sub><sup>M</sup>)<sub><font face="helvetica"><i>C</i></font></sub>.

<div class="p"><!----></div>

<pre>
    gap&#62; phi:= RestrictedClassFunction( cand[1], g )^m;;
    gap&#62; pi:= pi^m;;
    gap&#62; cand:= ShallowCopy( pi - 1/3 * phi );;
    gap&#62; morders:= OrdersClassRepresentatives( m );;
    gap&#62; for i in [ 1 .. Length( morders ) ] do
    &#62;      if morders[i] mod 3 = 0 and phi[ PowerMap( m, 3 )[i] ] &lt;&#62; 0 then
    &#62;        Unbind( cand[i] );
    &#62;      fi;
    &#62;    od;

</pre>

<div class="p"><!----></div>
We claim that 1<sub>H</sub><sup>M</sup>(g)  &#8805; &#960;<sup>M</sup>(g) &#8722; 1/3 &#968;<sup>M</sup>(g) for all g  &#8712; M.
In order to see this, let H&#8242; denote the index two subgroup of H,
and let g  &#8712; M.
Since H is the disjoint union of V, H&#8242;\V, and three
H-conjugates of U \V, we get

<br clear="all" /><table border="0" width="100%"><tr><td>
<table border="0" cellspacing="0" cellpadding="0">
 <tr><td width="50%"></td><td nowrap="nowrap" align="right" colspan="1"><table border="0" cellspacing="0" cellpadding="2"><tr><td nowrap="nowrap" align="left">
 1<sub>H</sub><sup>M</sup>(g) </td></tr></table></td><td nowrap="nowrap" align="left">
<table border="0" cellspacing="0" cellpadding="2"><tr><td nowrap="nowrap" align="left">
 = </td></tr></table></td><td nowrap="nowrap" align="left">
<table border="0" cellspacing="0" cellpadding="2"><tr><td nowrap="nowrap" align="left">
[M:H] &#183;&#124;g<sup>M</sup> &#8745;H&#124; / &#124;g<sup>M</sup>&#124; </td></tr></table></td><td width="50%"></td></tr>
 <tr><td width="50%"></td><td nowrap="nowrap" align="right" colspan="1"><table border="0" cellspacing="0" cellpadding="2"><tr><td nowrap="nowrap" align="left">
 </td></tr></table></td><td nowrap="nowrap" align="left">
<table border="0" cellspacing="0" cellpadding="2"><tr><td nowrap="nowrap" align="left">
 = </td></tr></table></td><td nowrap="nowrap" align="left">
<table border="0" cellspacing="0" cellpadding="2"><tr><td nowrap="nowrap" align="left">
[M:H] &#183;( &#124;g<sup>M</sup> &#8745;V&#124; + 3 &#124;g<sup>M</sup> &#8745;U \V&#124; + &#124;g<sup>M</sup> &#8745;H&#8242;\V&#124; ) / &#124;g<sup>M</sup>&#124; </td></tr></table></td><td width="50%"></td></tr>
 <tr><td width="50%"></td><td nowrap="nowrap" align="right" colspan="1"><table border="0" cellspacing="0" cellpadding="2"><tr><td nowrap="nowrap" align="left">
 </td></tr></table></td><td nowrap="nowrap" align="left">
<table border="0" cellspacing="0" cellpadding="2"><tr><td nowrap="nowrap" align="left">
 = </td></tr></table></td><td nowrap="nowrap" align="left">
<table border="0" cellspacing="0" cellpadding="2"><tr><td nowrap="nowrap" align="left">
[M:H] &#183;( 3 &#124;g<sup>M</sup> &#8745;U&#124; &#8722; 2 &#124;g<sup>M</sup> &#8745;V&#124; + &#124;g<sup>M</sup> &#8745;H&#8242;\V&#124; ) / &#124;g<sup>M</sup>&#124; </td></tr></table></td><td width="50%"></td></tr>
 <tr><td width="50%"></td><td nowrap="nowrap" align="right" colspan="1"><table border="0" cellspacing="0" cellpadding="2"><tr><td nowrap="nowrap" align="left">
 </td></tr></table></td><td nowrap="nowrap" align="left">
<table border="0" cellspacing="0" cellpadding="2"><tr><td nowrap="nowrap" align="left">
 = </td></tr></table></td><td nowrap="nowrap" align="left">
<table><tr><td nowrap="nowrap" align="right" colspan="1">1<sub>U</sub><sup>M</sup>(g) &#8722; 1/3 &#183;1<sub>V</sub><sup>G</sup>(g) + [M:H] &#183;&#124;g<sup>M</sup> &#8745;H&#8242;\V&#124; / &#124;g<sup>M</sup>&#124; .</td></tr></table></td><td width="50%"></td></tr></table>
</td></tr></table>



<div class="p"><!----></div>
Possible constituents of 1<sub>H</sub><sup>M</sup> are those rational irreducible
characters of M that are constituents of &#960;<sup>M</sup>.

<div class="p"><!----></div>

<pre>
    gap&#62; constit:= Filtered( RationalizedMat( Irr( m ) ),
    &#62;                        chi -&#62; ScalarProduct( m, chi, pi ) &lt;&#62; 0 );;

</pre>

<div class="p"><!----></div>
Now we compute the possible permutation characters that
have the prescribed values,
are compatible with the given lower bounds for values,
and have only constituents in the given list.

<div class="p"><!----></div>

<pre>
    gap&#62; cand:= PermChars( m,
    &#62;      rec( torso:= cand, chars:= constit,
    &#62;           lower:= ShallowCopy( pi - 1/3 * phi ),
    &#62;           normalsubgroup:= [ 1 .. NrConjugacyClasses( m ) ],
    &#62;           nonfaithful:= TrivialCharacter( m ) ) );
    [ Character( CharacterTable( "M" ), [ 16009115629875684006343550944921875, 
          7774182899642733721875, 120168544413337875, 4436049512692980, 
          215448838605, 131873639625, 760550656275, 110042727795, 943894035, 
          568854195, 1851609375, 0, 4680311220, 405405, 78624756, 14467005, 
          178605, 248265, 874650, 0, 76995, 591163, 224055, 34955, 29539, 20727, 
          0, 0, 375375, 15775, 0, 0, 0, 495, 116532, 3645, 62316, 1017, 11268, 
          357, 1701, 45, 117, 705, 0, 0, 4410, 1498, 0, 3780, 810, 0, 0, 83, 135, 
          31, 0, 0, 0, 0, 0, 0, 0, 255, 195, 0, 215, 0, 0, 210, 0, 42, 0, 35, 15, 
          1, 1, 160, 48, 9, 92, 25, 9, 9, 5, 1, 21, 0, 0, 0, 0, 0, 98, 74, 42, 0, 
          0, 0, 120, 76, 10, 0, 0, 0, 0, 0, 1, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 
          0, 0, 0, 0, 5, 3, 0, 0, 0, 18, 0, 10, 0, 3, 3, 0, 1, 1, 1, 1, 0, 0, 2, 
          0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 6, 12, 0, 0, 2, 0, 0, 0, 2, 0, 0, 
          1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 
          0, 0, 0, 0, 0, 0 ] ) ]

</pre>

<div class="p"><!----></div>

<div class="p"><!----></div>
There is only one candidate, so we have found the permutation character.

<div class="p"><!----></div>

     <h3><a name="tth_sEc16.2">
16.2</a>&nbsp;&nbsp;The Subgroup 2<sup>3</sup>.2<sup>6</sup>.2<sup>12</sup>.2<sup>18</sup>.(L<sub>3</sub>(2) &times;3.S<sub>6</sub>)
(September&nbsp;2009)</h3><a name="monsterperm2">
</a>

<div class="p"><!----></div>
According to the Atlas of Finite Groups&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;234],
the Monster group M has a class of maximal subgroups H of the type
2<sup>3</sup>.2<sup>6</sup>.2<sup>12</sup>.2<sup>18</sup>.(L<sub>3</sub>(2) &times;3.S<sub>6</sub>).
Currently the character table of H and the class fusion into M
are not available in <font face="helvetica">GAP</font>.
We are interested in the permutation character 1<sub>H</sub><sup>G</sup>,
and we will compute it without this information.

<div class="p"><!----></div>
The subgroup H normalizes an elementary abelian group E of order eight
whose involutions lie in the class <tt>2B</tt>.
We fix an involution z in E, and set G = C<sub>M</sub>(z), U = C<sub>H</sub>(z),
and V = C<sub>H</sub>(E).
Further, let N be the extraspecial normal subgroup of order 2<sup>25</sup>
in G.

<div class="p"><!----></div>
So G has the structure 2<sup>1+24</sup><sub>+</sub>.Co<sub>1</sub>, and U has index seven in H.
The order of N U / N is a multiple of
2<sup>3+6+12+18&#8722;25</sup> &#183;&#124;L<sub>3</sub>(2)&#124; &#183;&#124;3.S<sub>6</sub>&#124; / 7,
and N U / N occurs as a subgroup of G / N  &#8773; Co<sub>1</sub>.

<div class="p"><!----></div>

<pre>
    gap&#62; co1:= CharacterTable( "Co1" );;
    gap&#62; order:= 2^(3+6+12+18-25) * 168 * 3 * Factorial( 6 ) / 7;
    849346560
    gap&#62; maxes:= List( Maxes( co1 ), CharacterTable );;
    gap&#62; filt:= Filtered( maxes, t -&#62; Size( t ) mod order = 0 );
    [ CharacterTable( "2^(1+8)+.O8+(2)" ), CharacterTable( "2^(4+12).(S3x3S6)" ) ]
    gap&#62; List( filt, t -&#62; Size( t ) / order );
    [ 105, 1 ]
    gap&#62; o8p2:= CharacterTable( "O8+(2)" );;
    gap&#62; PermChars( o8p2, rec( torso:= [ 105 ] ) );
    [  ]
    gap&#62; k:= filt[2];;

</pre>

<div class="p"><!----></div>
The list of maximal subgroups of Co<sub>1</sub> (see&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;183])
tells us that NU / N is a maximal subgroup K of Co<sub>1</sub>
and has the structure 2<sup>4+12</sup>.(S<sub>3</sub> &times;3.S<sub>6</sub>).
(Note that the group O<sub>8</sub><sup>+</sup>(2) has no proper subgroup of index 105.)
In particular, U contains N and thus U/N  &#8773; K.

<div class="p"><!----></div>
Let <font face="helvetica"><i>C</i></font> be the set of elements in M whose order is not divisible by 7.
Then
(1<sub>H</sub>)<sub><font face="helvetica"><i>C</i></font>&#8745;H</sub> = (1<sub>U</sub><sup>H</sup> &#8722; [1/3] 1<sub>VN</sub><sup>H</sup> + [1/21] 1<sub>V</sub><sup>H</sup>)<sub><font face="helvetica"><i>C</i></font>&#8745;H</sub>
holds, as we can see from computations with H/V  &#8773; L<sub>3</sub>(2), as follows.

<div class="p"><!----></div>

<div class="p"><!----></div>

<pre>
    gap&#62; f:= CharacterTable( "L3(2)" );
    CharacterTable( "L3(2)" )
    gap&#62; OrdersClassRepresentatives( f );
    [ 1, 2, 3, 4, 7, 7 ]
    gap&#62; deg7:= PermChars( f, 7 );
    [ Character( CharacterTable( "L3(2)" ), [ 7, 3, 1, 1, 0, 0 ] ) ]
    gap&#62; deg42:= PermChars( f, 42 );
    [ Character( CharacterTable( "L3(2)" ), [ 42, 2, 0, 2, 0, 0 ] ), 
      Character( CharacterTable( "L3(2)" ), [ 42, 6, 0, 0, 0, 0 ] ) ]
    gap&#62; deg168:= PermChars( f, 168 );
    [ Character( CharacterTable( "L3(2)" ), [ 168, 0, 0, 0, 0, 0 ] ) ]
    gap&#62; deg7[1] - 1/3 * deg42[2] + 1/21 * deg168[1];
    ClassFunction( CharacterTable( "L3(2)" ), [ 1, 1, 1, 1, 0, 0 ] )

</pre>

<div class="p"><!----></div>
(Note that VN/V is a Klein four group, and there is only one
transitive permutation character of L<sub>3</sub>(2) that is induced from
such subgroups.)

<div class="p"><!----></div>
The character table of G is available in <font face="helvetica">GAP</font>,
so we can compute the permutation character &#960; =  1<sub>U</sub><sup>G</sup>
by computing the primitive permutation character 1<sub>K</sub><sup>Co<sub>1</sub></sup>,
identifying it with 1<sub>U/N</sub><sup>G/N</sup>,
and then inflating this character to G.

<div class="p"><!----></div>

<pre>
    gap&#62; m:= CharacterTable( "M" );
    CharacterTable( "M" )
    gap&#62; g:= CharacterTable( "MC2B" );
    CharacterTable( "2^1+24.Co1" )
    gap&#62; pi:= RestrictedClassFunction( TrivialCharacter( k )^co1, g );;

</pre>

<div class="p"><!----></div>
The permutation character &#968; =  1<sub>VN</sub><sup>G</sup> can be computed as
the inflation of 1<sub>VN/N</sub><sup>G/N</sup> = (1<sub>VN/N</sub><sup>U/N</sup>)<sup>G/N</sup>,
where 1<sub>VN/N</sub><sup>U/N</sup> is a character of K that can be
identified with the regular permutation character of U/VN  &#8773; S<sub>3</sub>.

<div class="p"><!----></div>

<pre>
    gap&#62; nsg:= ClassPositionsOfNormalSubgroups( k );;
    gap&#62; nsgsizes:= List( nsg, x -&#62; Sum( SizesConjugacyClasses( k ){ x } ) );;
    gap&#62; nn:= nsg[ Position( nsgsizes, Size( k ) / 6 ) ];;
    gap&#62; psi:= 0 * [ 1 .. NrConjugacyClasses( k ) ];;
    gap&#62; for i in nn do
    &#62;      psi[i]:= 6;
    &#62;    od;
    gap&#62; psi:= InducedClassFunction( k, psi, co1 );;
    gap&#62; psi:= RestrictedClassFunction( psi, g );;

</pre>

<div class="p"><!----></div>
Next we consider the permutation character &#966; =  1<sub>V</sub><sup>G</sup>.
The group V does not contain N because K does not have a factor group
of the type S<sub>4</sub>.
But V contains Z because U/V is centerless.
So we can regard &#966; as the inflation of 1<sub>V/Z</sub><sup>G/Z</sup>
from G/Z to G,
i.&nbsp;e., we can perform the computations with the character table of the
factor group G/Z.

<div class="p"><!----></div>

<pre>
    gap&#62; zclasses:= ClassPositionsOfCentre( g );;
    gap&#62; gmodz:= g / zclasses;
    CharacterTable( "2^1+24.Co1/[ 1, 2 ]" )
    gap&#62; invmap:= InverseMap( GetFusionMap( g, gmodz ) );;
    gap&#62; psibar:= CompositionMaps( psi, invmap );;

</pre>

<div class="p"><!----></div>
Since &#966;(g) = [G:V] &#183;&#124;g<sup>G</sup> &#8745;V&#124; / &#124;g<sup>G</sup>&#124; holds for g  &#8712; G,
and since g<sup>G</sup> &#8745;V  &#8838; g<sup>G</sup> &#8745;VN,
with equality if g has odd order,
we get &#966;(g) = 4 &#183;&#968;(g) if g has odd order,
and &#966;(g) = 0 if &#968;(g) = 0.

<div class="p"><!----></div>
We want to compute the possible permutation characters with these
values.
This is easier if we "go down" from VN to V in two steps.

<div class="p"><!----></div>

<pre>
    gap&#62; factorders:= OrdersClassRepresentatives( gmodz );;
    gap&#62; phibar:= [];;
    gap&#62; upperphibar:= [];;
    gap&#62; for i in [ 1 .. NrConjugacyClasses( gmodz ) ] do
    &#62;      if factorders[i] mod 2 = 1 then
    &#62;        phibar[i]:= 2 * psibar[i];
    &#62;      elif psibar[i] = 0 then
    &#62;        phibar[i]:= 0;
    &#62;      else
    &#62;        upperphibar[i]:= 2 * psibar[i];
    &#62;      fi;
    &#62;    od;
    gap&#62; cand:= PermChars( gmodz, rec( torso:= phibar,
    &#62;             upper:= upperphibar,
    &#62;             normalsubgroup:= [ 1 .. NrConjugacyClasses( gmodz ) ],
    &#62;             nonfaithful:= TrivialCharacter( gmodz ) ) );;
    gap&#62; Length( cand );
    3

</pre>

<div class="p"><!----></div>

<div class="p"><!----></div>
One of the candidates computed in this first step is excluded by the fact
that it is induced from a subgroup that contains N/Z.

<div class="p"><!----></div>

<pre>
    gap&#62; nn:= First( ClassPositionsOfNormalSubgroups( gmodz ),
    &#62;                x -&#62; Sum( SizesConjugacyClasses( gmodz ){x} ) = 2^24 );
    [ 1 .. 4 ]
    gap&#62; cont:= PermCharInfo( gmodz, cand ).contained;;
    gap&#62; cand:= cand{ Filtered( [ 1 .. Length( cand ) ],
    &#62;                           i -&#62; Sum( cont[i]{ nn } ) &lt; 2^24 ) };;
    gap&#62; Length( cand );
    2

</pre>

<div class="p"><!----></div>
Now we run the second step.
After excluding the candidates that cannot be induced from subgroups
whose intersection with N/Z has index four in N/Z,
we get four solutions.

<div class="p"><!----></div>

<pre>
    gap&#62; poss:= [];;
    gap&#62; for v in cand do
    &#62;      phibar:= [];
    &#62;      upperphibar:= [];
    &#62;      for i in [ 1 .. NrConjugacyClasses( gmodz ) ] do
    &#62;        if factorders[i] mod 2 = 1 then
    &#62;          phibar[i]:= 2 * v[i];
    &#62;        elif v[i] = 0 then
    &#62;          phibar[i]:= 0;
    &#62;        else
    &#62;          upperphibar[i]:= 2 * v[i];
    &#62;        fi;
    &#62;      od;
    &#62;      Append( poss, PermChars( gmodz, rec( torso:= phibar,
    &#62;                      upper:= upperphibar,
    &#62;                      normalsubgroup:= [ 1 .. NrConjugacyClasses( gmodz ) ],
    &#62;                      nonfaithful:= TrivialCharacter( gmodz ) ) ) );
    &#62;    od;
    gap&#62; Length( poss );
    6
    gap&#62; cont:= PermCharInfo( gmodz, poss ).contained;;
    gap&#62; poss:= poss{ Filtered( [ 1 .. Length( poss ) ],
    &#62;                           i -&#62; Sum( cont[i]{ nn } ) &lt; 2^23 ) };;
    gap&#62; Length( poss );
    4
    gap&#62; phicand:= RestrictedClassFunctions( poss, g );;

</pre>

<div class="p"><!----></div>

<div class="p"><!----></div>
Since we have several candidates for 1<sub>V</sub><sup>G</sup>,
we form the linear combinations for all these candidates.

<div class="p"><!----></div>

<pre>
    gap&#62; phicand:= RestrictedClassFunctions( poss, g );;
    gap&#62; phicand:= InducedClassFunctions( phicand, m );;
    gap&#62; psi:= psi^m;;
    gap&#62; pi:= pi^m;;
    gap&#62; cand:= List( phicand,
    &#62;             phi -&#62; ShallowCopy( pi - 1/3 * psi + 1/21 * phi ) );;
    gap&#62; morders:= OrdersClassRepresentatives( m );;
    gap&#62; for x in cand do
    &#62;      for i in [ 1 .. Length( morders ) ] do
    &#62;        if morders[i] mod 7 = 0 then
    &#62;          Unbind( x[i] );
    &#62;        fi;
    &#62;      od;
    &#62;    od;

</pre>

<div class="p"><!----></div>
Exactly one of the candidates has only integral values.

<div class="p"><!----></div>

<pre>
    gap&#62; cand:= Filtered( cand, x -&#62; ForAll( x, IsInt ) );
    [ [ 4050306254358548053604918389065234375, 148844831270071996434375, 
          2815847622206994375, 14567365753025085, 3447181417680, 659368198125, 
          3520153823175, 548464353255, 5706077895, 3056566695, 264515625, 0, 
          19572895485, 6486480, 186109245, 61410960, 758160, 688365,,, 172503, 
          1264351, 376155, 137935, 99127, 52731, 0, 0, 119625, 3625, 0, 0, 0, 0, 
          402813, 29160, 185301, 2781, 21069, 1932, 4212, 360, 576, 1125, 0, 0,,,
          , 2160, 810, 0, 0, 111, 179, 43, 0, 0, 0, 0, 0, 0, 0, 185, 105, 0, 65, 
          0, 0,,,,, 0, 0, 0, 0, 337, 105, 36, 157, 37, 18, 18, 16, 4, 21, 0, 0, 
          0, 0, 0,,,,, 0, 0, 60, 40, 10, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,,, 0, 0, 0, 
          0, 0, 0, 0, 0, 0, 5, 1, 0, 0, 0,,,,, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 
          0, 0, 0, 0, 0,,,, 0, 0, 0, 6, 8, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0,,, 0, 
          0, 0, 0, 0,,,, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,, 0 ] ]

</pre>

<div class="p"><!----></div>
Possible constituents of 1<sub>H</sub><sup>M</sup> are those rational irreducible
characters of M that are constituents of &#960;<sup>M</sup>.

<div class="p"><!----></div>

<pre>
    gap&#62; constit:= Filtered( RationalizedMat( Irr( m ) ),
    &#62;                        chi -&#62; ScalarProduct( m, chi, pi ) &lt;&#62; 0 );;

</pre>

<div class="p"><!----></div>
Now we compute the possible permutation characters that
have the prescribed values
and have only constituents in the given list.

<div class="p"><!----></div>

<pre>
    gap&#62; cand:= PermChars( m, rec( torso:= cand[1], chars:= constit ) );
    [ Character( CharacterTable( "M" ), [ 4050306254358548053604918389065234375, 
          148844831270071996434375, 2815847622206994375, 14567365753025085, 
          3447181417680, 659368198125, 3520153823175, 548464353255, 5706077895, 
          3056566695, 264515625, 0, 19572895485, 6486480, 186109245, 61410960, 
          758160, 688365, 58310, 0, 172503, 1264351, 376155, 137935, 99127, 
          52731, 0, 0, 119625, 3625, 0, 0, 0, 0, 402813, 29160, 185301, 2781, 
          21069, 1932, 4212, 360, 576, 1125, 0, 0, 1302, 294, 0, 2160, 810, 0, 0, 
          111, 179, 43, 0, 0, 0, 0, 0, 0, 0, 185, 105, 0, 65, 0, 0, 224, 0, 14, 
          0, 0, 0, 0, 0, 337, 105, 36, 157, 37, 18, 18, 16, 4, 21, 0, 0, 0, 0, 0, 
          70, 38, 14, 0, 0, 0, 60, 40, 10, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 10, 0, 
          0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0, 0, 0, 24, 0, 6, 0, 0, 0, 0, 0, 0, 
          0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 6, 8, 0, 0, 2, 0, 0, 
          0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 
          0, 0, 0, 0, 0, 0, 4, 0, 0, 0 ] ) ]

</pre>

<div class="p"><!----></div>

<div class="p"><!----></div>
There is only one candidate, so we have found the permutation character.

<div class="p"><!----></div>

     <h3><a name="tth_sEc16.3">
16.3</a>&nbsp;&nbsp;The Subgroup 2<sup>5</sup>.2<sup>10</sup>.2<sup>20</sup>.(S<sub>3</sub> &times;L<sub>5</sub>(2))
(October&nbsp;2009)</h3><a name="monsterperm3">
</a>

<div class="p"><!----></div>
According to the Atlas of Finite Groups&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;234],
the Monster group M has a class of maximal subgroups H of the type
2<sup>5</sup>.2<sup>10</sup>.2<sup>20</sup>.(S<sub>3</sub> &times;L<sub>5</sub>(2)).
Currently the character table of H and the class fusion into M
are not available in <font face="helvetica">GAP</font>.
We are interested in the permutation character 1<sub>H</sub><sup>G</sup>,
and we will compute it without this information.

<div class="p"><!----></div>
The subgroup H normalizes an elementary abelian group E of order 32
whose involutions lie in the class <tt>2B</tt>.
We fix an involution z in E, and set G = C<sub>M</sub>(z), U = C<sub>H</sub>(z),
and V = C<sub>H</sub>(E).
Further, let N be the extraspecial normal subgroup of order 2<sup>25</sup>
in G.

<div class="p"><!----></div>
So G has the structure 2<sup>1+24</sup><sub>+</sub>.Co<sub>1</sub>, and U has index 31 in H.
The order of N U / N is a multiple of
2<sup>5+10+20&#8722;25</sup> &#183;&#124;L<sub>5</sub>(2)&#124; &#183;&#124;S<sub>3</sub>&#124; / 31,
and N U / N occurs as a subgroup of G / N  &#8773; Co<sub>1</sub>.

<div class="p"><!----></div>

<pre>
    gap&#62; co1:= CharacterTable( "Co1" );;
    gap&#62; order:= 2^35*Size( CharacterTable( "L5(2)" ) )*6 / 2^25 / 31;
    1981808640
    gap&#62; maxes:= List( Maxes( co1 ), CharacterTable );;
    gap&#62; filt:= Filtered( maxes, t -&#62; Size( t ) mod order = 0 );
    [ CharacterTable( "2^11:M24" ), CharacterTable( "2^(1+8)+.O8+(2)" ), 
      CharacterTable( "2^(2+12):(A8xS3)" ) ]
    gap&#62; List( filt, t -&#62; Size( t ) / order );
    [ 253, 45, 1 ]
    gap&#62; m24:= CharacterTable( "M24" );;
    gap&#62; cand:= PermChars( m24, rec( torso:=[ 253 ] ) );
    [ Character( CharacterTable( "M24" ), [ 253, 29, 13, 10, 1, 5, 5, 1, 3, 2, 1, 
          1, 1, 1, 3, 0, 2, 1, 1, 1, 0, 0, 1, 1, 0, 0 ] ) ]
    gap&#62; TestPerm5( m24, cand, m24 mod 11 );
    [  ]
    gap&#62; PermChars( CharacterTable( "O8+(2)" ), rec( torso:=[ 45 ] ) );
    [  ]
    gap&#62; k:= filt[3];;

</pre>

<div class="p"><!----></div>
The list of maximal subgroups of Co<sub>1</sub> (see&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;183])
tells us that NU / N is a maximal subgroup K of Co<sub>1</sub>
and has the structure 2<sup>2+12</sup>.(A<sub>8</sub> &times;S<sub>3</sub>).
(Note that the group M<sub>24</sub> has no proper subgroup of index 253,
which is shown above using the 11-modular Brauer table of M<sub>24</sub>.
Furthermore, the group O<sub>8</sub><sup>+</sup>(2) has no subgroup of index 45.)
In particular, U contains N and thus U/N  &#8773; K.

<div class="p"><!----></div>
Let <font face="helvetica"><i>C</i></font> be the set of elements in M whose order is not divisible by 31
or 21.
We want to find an index set I and subgroups X<sub>i</sub>, for i  &#8712; I,
with the property that V  &#8804; X<sub>i</sub>  &#8804; U and

<br clear="all" /><table border="0" width="100%"><tr><td>
<table align="center" cellspacing="0"  cellpadding="2"><tr><td nowrap="nowrap" align="center">
 (1<sub>H</sub>)<sub><font face="helvetica"><i>C</i></font>&#8745;H</sub> = </td><td align="left" class="cl">&#63723;<br />&#63725;
 </td><td nowrap="nowrap" align="center">
<small></small><!--sup
--><br /><font size="+3">&#8721;<br />
</font><small>i  &#8712; I</small>&nbsp;<br /></td><td nowrap="nowrap" align="center">
c<sub>i</sub> 1<sub>X<sub>i</sub></sub><sup>H</sup> </td><td align="left" class="cl">&#63734;<br />&#63736;
</td><td nowrap="nowrap" align="center">
<small></small><!--sup
--><br /><small><font face="helvetica"><i>C</i></font>&#8745;H</small>&nbsp;<br /></td><td nowrap="nowrap" align="center">
</td></tr></table>
</td></tr></table>


holds for suitable rational integers c<sub>i</sub>.
Let W be the full preimage of the elementary normal subgroup of order 16
in U/V  &#8773; 2<sup>4</sup>.A<sub>8</sub> under the natural epimorphism from U to U/V,
and set I<sub>1</sub> = { i  &#8712; I; W  &#8804; X<sub>i</sub> } and I<sub>2</sub> = I \I<sub>1</sub>.

<div class="p"><!----></div>
Using the known table of marks of U/V,
we will find a solution such that [W:(W &#8745;X<sub>i</sub>)] = 2 for all i  &#8712; I<sub>2</sub>.
First we compute the permutation characters 1<sub>S</sub><sup>U/V</sup> for all
subgroups S of U/V that contain W/V,
and induce them to H/V.

<div class="p"><!----></div>

<pre>
    gap&#62; subtbl:= CharacterTable( "2^4:A8" );;
    gap&#62; subtom:= TableOfMarks( subtbl );;
    gap&#62; perms:= PermCharsTom( subtbl, subtom );;
    gap&#62; nsg:= ClassPositionsOfNormalSubgroups( subtbl );
    [ [ 1 ], [ 1, 2 ], [ 1 .. 25 ] ]
    gap&#62; above:= Filtered( perms, x -&#62; x[1] = x[2] );;
    gap&#62; tbl:= CharacterTable( "L5(2)" );;
    gap&#62; above:= Set( Induced( subtbl, tbl, above ) );;

</pre>

<div class="p"><!----></div>
Next we compute the permutation characters 1<sub>S</sub><sup>U/V</sup> for all
subgroups S of U/V whose intersection with W/V has index two
in W/V.
Afterwards we exclude certain subgroups that would slow down later
computations,
and induce also these characters to H/V.

<div class="p"><!----></div>

<pre>
    gap&#62; index2:= Filtered( perms,
    &#62;      x -&#62; Sum( PermCharInfo( subtbl, [x] ).contained[1]{ [1,2] } ) = 8 );;
    gap&#62; index2:= Filtered( index2, x -&#62; not x[1] in [ 630, 840, 1260, 1680 ] );;
    gap&#62; index2:= Set( Induced( subtbl, tbl, index2 ) );;

</pre>

<div class="p"><!----></div>
Now we induce the permutation characters to H/V,
and compute the coefficients of a linear combination as desired.

<div class="p"><!----></div>

<pre>
    gap&#62; orders:= OrdersClassRepresentatives( tbl );;
    gap&#62; goodclasses:= Filtered( [ 1 .. NrConjugacyClasses( tbl ) ],
    &#62;                            i -&#62; not orders[i] in [ 21, 31 ] );
    [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 ]
    gap&#62; matrix:= List( Concatenation( above, index2 ), x -&#62; x{ goodclasses } );;
    gap&#62; sol:= SolutionMat( matrix,
    &#62;              ListWithIdenticalEntries( Length( goodclasses ), 1 ) );
    [ 692/651, 57/217, -78/217, -26/217, 0, 74/651, 11/217, 0, 3/217, 151/651, 0, 
      22/651, 0, 0, 0, -11/217, 0, 0, 0, 0, 0, 0, 0, 0, -115/651, 0, -3/31, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, -34/93, -11/651, 0, 2/21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1/31, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0 ]
    gap&#62; nonzero:= Filtered( [ 1 .. Length( sol ) ], i -&#62; sol[i] &lt;&#62; 0 );
    [ 1, 2, 3, 4, 6, 7, 9, 10, 12, 16, 25, 27, 106, 107, 109, 120 ]
    gap&#62; sol:= sol{ nonzero };;

</pre>

<div class="p"><!----></div>
Now we transfer this linear combination to the character tables
which are given in our situation.

<div class="p"><!----></div>
Those constituents that are induced from subgroups of H above W
can be identified uniquely via their degrees and their values distribution;
we compute these characters in the character table of U/W obtained
as a factor table of the character table of U/N, lift them back
to U/N, induce them to G/N, inflate them to G,
and then induce them fo M.

<div class="p"><!----></div>

<pre>
    gap&#62; a8degrees:= List( above{ Filtered( nonzero,
    &#62;                                 x -&#62; x &lt;= Length( above ) ) },
    &#62;                      x -&#62; x[1] ) / 31;
    [ 1, 8, 15, 28, 56, 56, 70, 105, 120, 168, 336, 336 ]
    gap&#62; a8tbl:= subtbl / [ 1, 2 ];;
    gap&#62; invtoa8:= InverseMap( GetFusionMap( subtbl, a8tbl ) );;
    gap&#62; nsg:= ClassPositionsOfNormalSubgroups( k );;
    gap&#62; nn:= First( nsg, x -&#62; Sum( SizesConjugacyClasses( k ){ x } ) = 6*2^14 );;
    gap&#62; a8tbl_other:= k / nn;;
    gap&#62; g:= CharacterTable( "MC2B" );
    CharacterTable( "2^1+24.Co1" )
    gap&#62; constit:= [];;
    gap&#62; for i in [ 1 .. Length( a8degrees ) ] do
    &#62;      cand:= PermChars( a8tbl_other, rec( torso:= [ a8degrees[i] ] ) );
    &#62;      filt:= Filtered( perms, x -&#62; x^tbl = above[ nonzero[i] ] );
    &#62;      filt:= List( filt, x -&#62; CompositionMaps( x, invtoa8 ) );
    &#62;      cand:= Filtered( cand,
    &#62;               x -&#62; ForAny( filt, y -&#62; Collected( x ) = Collected(y) ) );
    &#62;      Add( constit, List( Induced( Restricted( Induced(
    &#62;        Restricted( cand, k ), co1 ), g ), m ), ValuesOfClassFunction ) );
    &#62;    od;
    gap&#62; List( constit, Length );
    [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]

</pre>

<div class="p"><!----></div>
Dealing with the remaining constituents is more involved.
For a permutation character 1<sub>X/V</sub><sup>U/V</sup>, we compute
1<sub>WX/V</sub><sup>U/V</sup>, a character whose degree is half as large
and which can be regarded as a character of U/W.
This character can be treated like the ones above:
We lift it to U/N, induce it to G/N, and inflate it to G/Z(G);
let this character be 1<sub>Y</sub><sup>G/Z(G)</sup>, for some subgroup Y.
Then we compute the possible permutation characters of G/Z(G) that
can be induced from a subgroup of index two inside Y,
inflate these characters to G and then induce them to M.

<div class="p"><!----></div>

<pre>
    gap&#62; downdegrees:= List( index2{ Filtered( nonzero,
    &#62;                                    x -&#62; x &#62; Length( above ) )
    &#62;                                - Length( above ) },
    &#62;                        x -&#62; x[1] ) / 31;
    [ 30, 210, 210, 1920 ]
    gap&#62; f:= g / ClassPositionsOfCentre( g );;
    gap&#62; forders:= OrdersClassRepresentatives( f );;
    gap&#62; inv:= InverseMap( GetFusionMap( g, f ) );;
    gap&#62; for j in [ 1 .. Length( downdegrees ) ] do
    &#62;      chars:= [];
    &#62;      cand:= PermChars( a8tbl_other, rec( torso:= [ downdegrees[j]/2 ] ) );
    &#62;      filt:= Filtered( perms, x -&#62; x^tbl = index2[ nonzero[
    &#62;                   j + Length( a8degrees ) ] - Length( above ) ] );
    &#62;      filt:= Induced( subtbl, a8tbl, filt,
    &#62;                      GetFusionMap( subtbl, a8tbl ));
    &#62;      cand:= Filtered( cand, x -&#62; ForAny( filt,
    &#62;                 y -&#62; Collected( x ) = Collected( y ) ) );
    &#62;      cand:= Restricted( Induced( Restricted( cand, k ), co1 ), g );
    &#62;      for chi in cand do
    &#62;        cchi:= CompositionMaps( chi, inv );
    &#62;        upper:= [];
    &#62;        pphi:= [];
    &#62;        for i in [ 1 .. NrConjugacyClasses( f ) ] do
    &#62;          if forders[i] mod 2 = 1 then
    &#62;            pphi[i]:= 2 * cchi[i];
    &#62;          elif cchi[i] = 0 then
    &#62;            pphi[i]:= 0;
    &#62;          else
    &#62;            upper[i]:= 2* cchi[i];
    &#62;          fi;
    &#62;        od;
    &#62;        Append( chars, PermChars( f, rec( torso:= ShallowCopy( pphi ),
    &#62;            upper:= upper,
    &#62;            normalsubgroup:= [ 1 .. 4 ],
    &#62;            nonfaithful:= cchi ) ) );
    &#62;      od;
    &#62;      Add( constit, List( Induced( Restricted( chars, g ), m ),
    &#62;                          ValuesOfClassFunction ) );
    &#62;    od;
    gap&#62; List( constit, Length );
    [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 10, 10, 2 ]

</pre>

<div class="p"><!----></div>
Now we form the possible linear combinations.

<div class="p"><!----></div>

<pre>
    gap&#62; cand:= List( Cartesian( constit ), l -&#62; sol * l );;
    gap&#62; m:= CharacterTable( "M" );
    CharacterTable( "M" )
    gap&#62; morders:= OrdersClassRepresentatives( m );;
    gap&#62; for x in cand do
    &#62;      for i in [ 1 .. Length( morders ) ] do
    &#62;        if morders[i] mod 31 = 0 or morders[i] mod 21 = 0 then
    &#62;          Unbind( x[i] );
    &#62;        fi;
    &#62;      od;
    &#62;    od;

</pre>

<div class="p"><!----></div>
Exactly one of the candidates has only integral values.

<div class="p"><!----></div>

<pre>
    gap&#62; cand:= Filtered( cand, x -&#62; ForAll( x, IsInt ) );
    [ [ 391965121389536908413379198941796875, 23914487292951376996875, 
          474163138042468875, 9500455925885925, 646346515815, 334363486275, 
          954161764875, 147339103275, 1481392395, 1313281515, 0, 8203125, 
          9827885925, 1216215, 91556325, 9388791, 115911, 587331, 874650, 0, 
          79515, 581955, 336375, 104371, 62331, 36855, 0, 0, 0, 0, 28125, 525, 
          1125, 0, 188325, 16767, 88965, 2403, 9477, 1155, 891, 207, 351, 627, 0, 
          0, 4410, 1498, 0, 0, 0, 30, 150, 91, 151, 31, 0, 0, 0, 0, 0, 0, 0, 0, 
          0, 125, 0, 5, 5,,,,, 0, 0, 0, 0, 141, 45, 27, 61, 27, 9, 9, 7, 3, 15, 
          0, 0, 0, 0, 0, 98, 74, 42, 0, 0, 30, 0, 0, 0, 6, 6, 6,,, 1, 1, 0, 0, 0, 
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,,,,, 0, 0, 0, 0, 0, 0, 
          0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2,,, 0, 
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,,,, 0, 0, 0, 0, 0, 0,,, 0, 0, 0, 0, 0, 
          0,, 0, 0, 0 ] ]

</pre>

<div class="p"><!----></div>

<div class="p"><!----></div>
Now we compute the possible permutation characters that
have the prescribed values.

<div class="p"><!----></div>

<pre>
    gap&#62; cand:= PermChars( m, rec( torso:= cand[1] ) );
    [ Character( CharacterTable( "M" ), [ 391965121389536908413379198941796875, 
          23914487292951376996875, 474163138042468875, 9500455925885925, 
          646346515815, 334363486275, 954161764875, 147339103275, 1481392395, 
          1313281515, 0, 8203125, 9827885925, 1216215, 91556325, 9388791, 115911, 
          587331, 874650, 0, 79515, 581955, 336375, 104371, 62331, 36855, 0, 0, 
          0, 0, 28125, 525, 1125, 0, 188325, 16767, 88965, 2403, 9477, 1155, 891, 
          207, 351, 627, 0, 0, 4410, 1498, 0, 0, 0, 30, 150, 91, 151, 31, 0, 0, 
          0, 0, 0, 0, 0, 0, 0, 125, 0, 5, 5, 210, 0, 42, 0, 0, 0, 0, 0, 141, 45, 
          27, 61, 27, 9, 9, 7, 3, 15, 0, 0, 0, 0, 0, 98, 74, 42, 0, 0, 30, 0, 0, 
          0, 6, 6, 6, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
          1, 1, 0, 18, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
          2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
          0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ) 
     ]

</pre>

<div class="p"><!----></div>

<div class="p"><!----></div>
There is only one candidate, so we have found the permutation character.

<div class="p"><!----></div>

     <h3><a name="tth_sEc16.4">
16.4</a>&nbsp;&nbsp;The Subgroup 2<sup>10+16</sup>.O<sub>10</sub><sup>+</sup>(2) (November&nbsp;2009)</h3><a name="monsterperm4">
</a>

<div class="p"><!----></div>
According to the Atlas of Finite Groups&nbsp;[<a href="#CCN85" name="CITECCN85">CCN<sup>+</sup>85</a>,p.&nbsp;234],
the Monster group M has a class of maximal subgroups H of the type
2<sup>10+16</sup>.O<sub>10</sub><sup>+</sup>(2).
Currently the character table of H and the class fusion into M
are not available in <font face="helvetica">GAP</font>.
We are interested in the permutation character 1<sub>H</sub><sup>G</sup>,
and we will compute it without this information.

<div class="p"><!----></div>
The subgroup H normalizes an elementary abelian group E of order 2<sup>10</sup>
which contains 496 involutions in the class <tt>2A</tt> and 527 involutions
in the class <tt>2B</tt>.
Let V denote the normal subgroup of order 2<sup>26</sup> in H,
and set [&#63717;H] = H/N.
Since the smallest two indices of maximal subgroups of [&#63717;H]
are 496 and 527, respectively, H acts transitively on both the
<tt>2A</tt> and the <tt>2B</tt> involutions in E,
and the centralizers of these involutions contain V.

<div class="p"><!----></div>

<pre>
    gap&#62; Hbar:= CharacterTable( "O10+(2)" );;
    gap&#62; U_Abar:= CharacterTable( "O10+(2)M1" );
    CharacterTable( "S8(2)" )
    gap&#62; Index( Hbar, U_Abar );
    496
    gap&#62; U_Bbar:= CharacterTable( "O10+(2)M2" );
    CharacterTable( "2^8:O8+(2)" )
    gap&#62; Index( Hbar, U_Bbar );
    527

</pre>

<div class="p"><!----></div>

<div class="p"><!----></div>
We fix a <tt>2A</tt> involution z<sub>A</sub> in E, and set G<sub>A</sub> = C<sub>M</sub>(z<sub>A</sub>)
and U<sub>A</sub> = C<sub>H</sub>(z<sub>A</sub>).
So G<sub>A</sub> has the structure 2.B and U<sub>A</sub> has the structure
2<sup>10+16</sup>.S<sub>8</sub>(2).
From the list of maximal subgroups of B we see that the image of G<sub>A</sub>
under the natural epimorphism from G<sub>A</sub> to B is a maximal
subgroup of B and has the structure 2<sup>9+16</sup>.S<sub>8</sub>(2).

<div class="p"><!----></div>

<pre>
    gap&#62; b:= CharacterTable( "B" );
    CharacterTable( "B" )
    gap&#62; Horder:= 2^26 * Size( Hbar );
    1577011055923770163200
    gap&#62; order:= Horder / ( 2 * 496 );
    1589728887019929600
    gap&#62; maxes:= List( Maxes( b ), CharacterTable );;
    gap&#62; filt:= Filtered( maxes, t -&#62; Size( t ) mod order = 0 );
    [ CharacterTable( "2^(9+16).S8(2)" ) ]
    gap&#62; List( filt, t -&#62; Size( t ) / order );
    [ 1 ]
    gap&#62; u1:= filt[1];
    CharacterTable( "2^(9+16).S8(2)" )

</pre>

<div class="p"><!----></div>
Analogously,
we fix a <tt>2B</tt> involution z<sub>B</sub> in E, and set G<sub>B</sub> = C<sub>M</sub>(z<sub>B</sub>)
and U<sub>B</sub> = C<sub>H</sub>(z<sub>B</sub>),
Further, let N be the extraspecial normal subgroup of order 2<sup>25</sup>
in G<sub>B</sub>.
So G<sub>B</sub> has the structure 2<sup>1+24</sup><sub>+</sub>.Co<sub>1</sub>,
and U<sub>B</sub> has index 527 in G<sub>B</sub>.
From the list of maximal subgroups of Co<sub>1</sub> we see that the image of U<sub>B</sub>
under the natural epimorphism from G<sub>B</sub> to Co<sub>1</sub> is a maximal
subgroup of Co<sub>1</sub> and has the structure 2<sup>1+8</sup><sub>+</sub>.O<sub>8</sub><sup>+</sup>(2).

<div class="p"><!----></div>

<pre>
    gap&#62; co1:= CharacterTable( "Co1" );;
    gap&#62; order:= Horder / ( 2^25 * 527 );
    89181388800
    gap&#62; maxes:= List( Maxes( co1 ), CharacterTable );;
    gap&#62; filt:= Filtered( maxes, t -&#62; Size( t ) mod order = 0 );
    [ CharacterTable( "2^(1+8)+.O8+(2)" ) ]
    gap&#62; List( filt, t -&#62; Size( t ) / order );
    [ 1 ]
    gap&#62; u2:= filt[1];
    CharacterTable( "2^(1+8)+.O8+(2)" )

</pre>

<div class="p"><!----></div>
First we compute the permutation characters &#960;<sub>A</sub> = 1<sub>U<sub>A</sub></sub><sup>M</sup> and
&#960;<sub>B</sub> = 1<sub>U<sub>B</sub></sub><sup>M</sup>.

<div class="p"><!----></div>

<pre>
    gap&#62; m:= CharacterTable( "M" );
    CharacterTable( "M" )
    gap&#62; 2b:= CharacterTable( "MC2A" );
    CharacterTable( "2.B" )
    gap&#62; mm:= CharacterTable( "MC2B" );
    CharacterTable( "2^1+24.Co1" )
    gap&#62; pi_A:= RestrictedClassFunction( TrivialCharacter( u1 )^b, 2b )^m;;
    gap&#62; pi_B:= RestrictedClassFunction( TrivialCharacter( u2 )^co1, mm )^m;;

</pre>

<div class="p"><!----></div>
The degree of 1<sub>H</sub><sup>M</sup> is of course known.

<div class="p"><!----></div>

<pre>
    gap&#62; torso:= [ Size( m ) / Horder ];
    [ 512372707698741056749515292734375 ]

</pre>

<div class="p"><!----></div>
Next we compute some zero values of 1<sub>H</sub><sup>M</sup>,
using the following conditions.

<div class="p"><!----></div>

<div class="p"><!----></div>

<ul>
<li>    For g  &#8712; M, if &#124;g&#124; does not divide &#124;H&#124; or
    if &#124;g&#124; is not the product of an element order in H/V and a 2-power.
    (In fact we could use that the exponent of V is 4,
    but this would not improve the result.)
<div class="p"><!----></div>
</li>

<li>
    Let U  &#8804; H  &#8804; G, and let p be a prime that does not divide
    [H:U].
    Then U contains a Sylow p subgroup of H,
    so each element of order p in H is conjugate in H to an element
    in U.
    For g  &#8712; G, g = g<sub>p</sub> h, where the order of g<sub>p</sub> is a power of p
    such that 1<sub>U</sub><sup>G</sup>(g<sub>p</sub>) = 0 holds, we have 1<sub>H</sub><sup>G</sup>(g) = 0.
    We apply this to U  &#8712; { U<sub>A</sub>, U<sub>B</sub> }.

<div class="p"><!----></div>
</li>
</ul>

<div class="p"><!----></div>

<div class="p"><!----></div>

<pre>
    gap&#62; morders:= OrdersClassRepresentatives( m );;
    gap&#62; 2parts:= Union( [ 1 ], Filtered( Set( morders ),
    &#62;                          x -&#62; IsPrimePowerInt( x ) and IsEvenInt( x ) ) );
    [ 1, 2, 4, 8, 16, 32 ]
    gap&#62; factorders:= Set( OrdersClassRepresentatives( Hbar ) );;
    gap&#62; primes_A:= Filtered( Set( Factors( Horder ) ), p -&#62; 496 mod p &lt;&#62; 0 );
    [ 3, 5, 7, 17 ]
    gap&#62; primes_B:= Filtered( Set( Factors( Horder ) ), p -&#62; 527 mod p &lt;&#62; 0 );
    [ 2, 3, 5, 7 ]
    gap&#62; primes:= Union( primes_A, primes_B );;
    gap&#62; n:= NrConjugacyClasses( m );;
    gap&#62; for i in [ 1 .. n ] do
    &#62;   if Horder mod morders[i] &lt;&#62; 0 then
    &#62;     torso[i]:= 0;
    &#62;   elif ForAll( factorders, x -&#62; not morders[i] / x in 2parts ) then
    &#62;     torso[i]:= 0;
    &#62;   else
    &#62;     for p in primes do
    &#62;       if morders[i] mod p = 0 then
    &#62;         pprime:= morders[i];
    &#62;         while pprime mod p = 0 do pprime:= pprime / p; od;
    &#62;         pos:= PowerMap( m, pprime )[i];
    &#62;         if p in primes_A and pi_A[ pos ] = 0 then
    &#62;           torso[i]:= 0;
    &#62;         elif p in primes_B and pi_B[ pos ] = 0 then
    &#62;           torso[i]:= 0;
    &#62;         fi;
    &#62;       fi;
    &#62;     od;
    &#62;   fi;
    &#62; od;
    gap&#62; torso;
    [ 512372707698741056749515292734375,,,,, 0,,,,,,,,,,,, 0,, 0,,,,,,,,,,,,,, 0,,
      ,, 0,,,,,, 0, 0, 0,,, 0,,,, 0,,,,,,,,,, 0,,,,,,,, 0, 0, 0, 0, 0, 0, 0,,,,, 
      0,,,,, 0, 0, 0, 0, 0, 0,,,, 0, 0,,,,, 0,,,,,,, 0, 0,, 0, 0,,,,, 0, 0, 0, 0, 
      0,,,,, 0,, 0, 0, 0, 0, 0,, 0, 0, 0, 0, 0, 0,, 0,, 0, 0, 0, 0,, 0, 0, 0, 0, 
      0,,,,,, 0,,, 0, 0,, 0, 0, 0, 0, 0, 0, 0, 0, 0,, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]

</pre>

<div class="p"><!----></div>
Now we want to compute as many nonzero values of 1<sub>H</sub><sup>M</sup> as possible,
using the same approach as in the previous sections.
For that, we first compute several permutation characters 1<sub>X</sub><sup>M</sup>,
for subgroups X with the property V  &lt;  X  &lt;  U<sub>A</sub> or V  &lt;  X  &lt;  U<sub>B</sub>.
Then we find several subsets <font face="helvetica"><i>C</i></font> of M,
each being a union of conjugacy classes of M
such that (1<sub>H</sub>)<sub><font face="helvetica"><i>C</i></font>&#8745;H</sub> is a linear combination of the characters
1<sub>X</sub><sup>H</sup>, restricted to <font face="helvetica"><i>C</i></font>&#8745;H.
This yields the values of 1<sub>H</sub><sup>M</sup> on the classes in <font face="helvetica"><i>C</i></font>.

<div class="p"><!----></div>
The actual computations are performed with the characters 1<sub>X/V</sub><sup>H/V</sup>.
So we build two parallel lists <tt>cand</tt> and <tt>candbar</tt> of permutation characters
of M and of H/V, respectively.
For that, we write two small <font face="helvetica">GAP</font> functions:

<div class="p"><!----></div>

<ul>
<li>    In the function <tt>AddSubgroupOfS82</tt>,
    we choose a subgroup Y of S<sub>8</sub>(2)  &#8773; U<sub>A</sub>/V,
    compute 1<sub>Y</sub><sup>U<sub>A</sub>/V</sup>, inflate it to a character of U<sub>A</sub>,
    induce this character to B, inflate the result to G<sub>A</sub>,
    and finally induce this character to M.
<div class="p"><!----></div>
</li>

<li>
    In the function <tt>AddSubgroupOfO8p2</tt>,
    we choose a subgroup Y of the factor group F  &#8773; O<sub>8</sub><sup>+</sup>(2) of
    U<sub>B</sub>/N, compute 1<sub>Y</sub><sup>F</sup>, inflate it to a character of U<sub>B</sub>/N,
    induce this to a character of G<sub>B</sub>/N  &#8773; Co<sub>1</sub>,
    inflate this to a character of G<sub>B</sub>,
    and finally induce this character to M.

<div class="p"><!----></div>
    One difficulty in this case is that choosing a subgroup X/V of H/V
    involves fixing the class fusion into H/V,
    but it is not clear which is a compatible class fusion of the
    corresponding subgroup X into M;
    therefore, each entry of <tt>cand</tt> is in fact not the permutation character
    of M in question but a list of possibilities.
<div class="p"><!----></div>
</li>
</ul>

<div class="p"><!----></div>

<pre>
    gap&#62; cand:= [ [ pi_A ], [ pi_B ] ];;
    gap&#62; candbar:= [ TrivialCharacter( U_Abar )^Hbar,
    &#62;                TrivialCharacter( U_Bbar )^Hbar ];;
    gap&#62; AddSubgroupOfS82:= function( subname )
    &#62;   local psis82;
    &#62; 
    &#62;   psis82:= TrivialCharacter( CharacterTable( subname ) )^U_Abar;
    &#62;   Add( cand, [ Restricted( Restricted( psis82, u1 )^b, 2b )^m ] );
    &#62;   Add( candbar, psis82 ^ Hbar );
    &#62; end;;
    gap&#62; tt1:= CharacterTable( "O8+(2)" );
    CharacterTable( "O8+(2)" )
    gap&#62; AddSubgroupOfO8p2:= function( subname )
    &#62;   local psi, list, char;
    &#62; 
    &#62;   psi:= TrivialCharacter( CharacterTable( subname ) )^tt1;
    &#62;   list:= [];
    &#62;   for char in Orbit( AutomorphismsOfTable( tt1 ), psi, Permuted ) do
    &#62;     AddSet( list, Restricted( Restricted( char, u2 ) ^ co1, mm ) ^ m );
    &#62;   od;
    &#62;   Add( cand, list );
    &#62;   Add( candbar, Restricted( psi, U_Bbar ) ^ Hbar );
    &#62; end;;

</pre>

<div class="p"><!----></div>
Now we choose the subgroups that will turn out to be sufficient
for our computations.

<div class="p"><!----></div>

<pre>
    gap&#62; AddSubgroupOfS82( "O8+(2).2" );
    gap&#62; AddSubgroupOfO8p2( "S6(2)" );
    gap&#62; AddSubgroupOfS82( "O8-(2).2" );
    gap&#62; AddSubgroupOfS82( "A10.2" );
    gap&#62; AddSubgroupOfS82( "S4(4).2" );
    gap&#62; AddSubgroupOfS82( "L2(17)" );
    gap&#62; AddSubgroupOfO8p2( "A9" );
    gap&#62; AddSubgroupOfO8p2( "2^6:A8" );
    gap&#62; AddSubgroupOfO8p2( "(3xU4(2)):2" );
    gap&#62; AddSubgroupOfO8p2( "(A5xA5):2^2" );
    gap&#62; AddSubgroupOfS82( "S8(2)M4" );

</pre>

<div class="p"><!----></div>
In the case of A<sub>5</sub>  &lt;  S<sub>8</sub>(2), the function <tt>AddSubgroupOfS82</tt> does not
work because there are several class fusions of A<sub>5</sub> into S<sub>8</sub>(2).
We choose one fusion; the fact that it really describes an embedding of
an A<sub>5</sub> type subgroup of S<sub>8</sub>(2) can be checked using the function
<tt>NrPolyhedralSubgroups</tt>.

<div class="p"><!----></div>

<pre>
    gap&#62; a5:= CharacterTable( "A5" );;
    gap&#62; fus:= PossibleClassFusions( a5, U_Abar )[1];;
    gap&#62; NrPolyhedralSubgroups( U_Abar, fus[2], fus[3], fus[4] );
    rec( number := 548352, type := "A5" )
    gap&#62; psis82:= Induced( a5, U_Abar, [ TrivialCharacter( a5 ) ], fus )[1];;
    gap&#62; Add( cand, [ Restricted( Restricted( psis82, u1 )^b, 2b )^m ] );
    gap&#62; Add( candbar, psis82 ^ Hbar );
    gap&#62; List( cand, Length );
    [ 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1 ]

</pre>

<div class="p"><!----></div>
The following function takes a condition on conjugacy classes in terms of
their element orders, which gives a set <font face="helvetica"><i>C</i></font> of elements in M.
It forms the corresponding set of elements in H/V and tries to express
the restriction of 1<sub>H/V</sub> as a linear combination of the characters
1<sub>X</sub><sup>H/V</sup> that are stored in the list <tt>candbar</tt>.
If this works and if the corresponding linear combination of the
candidates in <tt>cand</tt> is unique,
the newly found values of 1<sub>H</sub><sup>M</sup> are entered into the list <tt>torso</tt>.

<div class="p"><!----></div>

<pre>
    gap&#62; Hbarorders:= OrdersClassRepresentatives( Hbar );;
    gap&#62; TryCondition:= function( cond )
    &#62;   local pos, sol, lincomb, oldknown, i;
    &#62; 
    &#62;   pos:= Filtered( [ 1 .. Length( Hbarorders ) ],
    &#62;             i -&#62; cond( Hbarorders[i] ) );
    &#62;   sol:= SolutionMat( candbar{[1..Length(candbar)]}{ pos },
    &#62;             ListWithIdenticalEntries( Length( pos ), 1 ) );
    &#62;   if sol = fail then
    &#62;     return "no solution";
    &#62;   fi;
    &#62; 
    &#62;   pos:= Filtered( [ 1 .. Length( morders) ], i -&#62; cond( morders[i] ) );
    &#62;   lincomb:= Filtered( Set( List( Cartesian( cand ), x -&#62; sol * x ) ),
    &#62;                 x -&#62; ForAll( pos, i -&#62; IsPosInt( x[i] ) or x[i] = 0 ) );
    &#62;   if Length( lincomb ) &lt;&#62; 1 then
    &#62;     return "solution is not unique";
    &#62;   fi;
    &#62; 
    &#62;   lincomb:= lincomb[1];;
    &#62;   oldknown:= Number( torso );
    &#62;   for i in pos do
    &#62;     if IsBound( torso[i] ) then
    &#62;       if torso[i] &lt;&#62; lincomb[i] then
    &#62;         Error( "contradiction of new and known value at position ", i );
    &#62;       fi;
    &#62;     elif not IsInt( lincomb[i] ) or lincomb[i] &lt; 0 then
    &#62;       Error( "new value at position ", i, " is not a nonneg. integer" );
    &#62;     fi;
    &#62;     torso[i]:= lincomb[i];
    &#62;   od;
    &#62;   return Concatenation( "now ", String( Number( torso ) ), " values (",
    &#62;              String( Number( torso ) - oldknown ), " new)" );
    &#62; end;;

</pre>

<div class="p"><!----></div>
This procedure makes sense only if the elements of H that satisfy the
condition are contained in the full preimage of the classes of H/V
that satisfy the condition.
Note that this is in fact the case for the conditions used below.
This is clear for condition concerning only <b>odd</b> element orders,
because V is a 2-group.
Also the set of all elements of the orders 9, 18, and 36 is such a
"closed" set, since M has no elements of order 72.
Finally, the set of all elements of the orders 1, 2, and 4 in H is
admissible because it is contained in the preimage of the set of all
elements of these orders in H/V.

<div class="p"><!----></div>

<pre>
    gap&#62; TryCondition( x -&#62; x mod 7 = 0 and x mod 3 &lt;&#62; 0 );
    "now 99 values (7 new)"
    gap&#62; TryCondition( x -&#62; x mod 17 = 0 and x mod 3 &lt;&#62; 0 );
    "now 102 values (3 new)"
    gap&#62; TryCondition( x -&#62; x mod 5 = 0 and x mod 3 &lt;&#62; 0 );
    "now 119 values (17 new)"
    gap&#62; TryCondition( x -&#62; 4 mod x = 0 );
    "now 125 values (6 new)"
    gap&#62; TryCondition( x -&#62; 9 mod x = 0 );
    "now 129 values (4 new)"
    gap&#62; TryCondition( x -&#62; x in [ 9, 18, 36 ] );
    "now 138 values (9 new)"

</pre>

<div class="p"><!----></div>
Possible constituents of 1<sub>H</sub><sup>M</sup> are those rational irreducible
characters of M that are constituents of &#960;<sup>M</sup>.

<div class="p"><!----></div>

<pre>
    gap&#62; constit:= Filtered( RationalizedMat( Irr( m ) ),
    &#62;               x -&#62; ScalarProduct( m, x, pi_A ) &lt;&#62; 0
    &#62;                    and ScalarProduct( m, x, pi_B ) &lt;&#62; 0 );;

</pre>

<div class="p"><!----></div>

<div class="p"><!----></div>
For the missing values, we can provide at least lower bounds,
using that U  &#8804; H  &#8804; G implies 
1<sub>H</sub><sup>G</sup>(g)  &#8805; 1<sub>U</sub><sup>G</sup>(g) / [H:U] = [G:H] &#183;1<sub>U</sub><sup>G</sup>(g) / 1<sub>U</sub><sup>G</sup>(1).

<div class="p"><!----></div>

<pre>
    gap&#62; lower:= [];;
    gap&#62; Hindex:= Size( m ) / Horder;
    512372707698741056749515292734375
    gap&#62; for i in [ 1 .. NrConjugacyClasses( m ) ] do
    &#62;   lower[i]:= Maximum( pi_A[i] / ( pi_A[1] / Hindex ),
    &#62;                       pi_B[i] / ( pi_B[1] / Hindex ) );
    &#62; od;

</pre>

<div class="p"><!----></div>
Now we compute the possible permutation characters that
have the prescribed values,
are compatible with the given lower bounds for values,
and have only constituents in the given list.

<div class="p"><!----></div>

<pre>
    gap&#62; PermChars( m, rec( torso:= torso, chars:= constit, lower:= lower,
    &#62;    normalsubgroup:= [ 1 .. NrConjugacyClasses( m ) ],
    &#62;    nonfaithful:= TrivialCharacter( m ) ) );
    [ Character( CharacterTable( "M" ), [ 512372707698741056749515292734375, 
          405589064025344574375, 29628786742129575, 658201521662685, 
          215448838605, 0, 121971774375, 28098354375, 335229607, 108472455, 
          164587500, 4921875, 2487507165, 2567565, 26157789, 6593805, 398925, 0, 
          437325, 0, 44983, 234399, 90675, 21391, 41111, 12915, 6561, 6561, 
          177100, 7660, 6875, 315, 275, 0, 113373, 17901, 57213, 0, 4957, 1197, 
          909, 301, 397, 0, 0, 0, 3885, 525, 0, 2835, 90, 45, 0, 103, 67, 43, 28, 
          81, 189, 9, 9, 9, 0, 540, 300, 175, 20, 15, 7, 420, 0, 0, 0, 0, 0, 0, 
          0, 165, 61, 37, 37, 0, 9, 9, 13, 5, 0, 0, 0, 0, 0, 0, 77, 45, 13, 0, 0, 
          45, 115, 19, 10, 0, 5, 5, 9, 9, 1, 1, 0, 0, 4, 0, 0, 9, 9, 3, 1, 0, 0, 
          0, 0, 0, 0, 4, 1, 1, 0, 24, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 1, 0, 
          4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 3, 1, 1, 2, 0, 3, 3, 0, 0, 0, 0, 0, 
          0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
          0, 0, 0, 0 ] ) ]

</pre>

<div class="p"><!----></div>

<div class="p"><!----></div>
There is only one candidate, so we have found the permutation character.

<div class="p"><!----></div>


<div class="p"><!----></div>

<h2>References</h2>

<dl compact="compact">
 <dt><a href="#CITEBP98copy" name="BP98copy">[BP98]</a></dt><dd>
T.&nbsp;Breuer and G.&nbsp;Pfeiffer, <em>Finding possible permutation characters</em>, J.
  Symbolic Comput. <b>26</b> (1998), no.&nbsp;3, 343-354. MR 1633876
  (99e:20005)

<div class="p"><!----></div>
</dd>
 <dt><a href="#CITECTblLib1.2" name="CTblLib1.2">[Bre12]</a></dt><dd>
T.&nbsp;Breuer, <em>The <font face="helvetica">GAP</font> Character Table Library, Version
  1.2</em>, <a href="http://www.math.rwth-aachen.de/~Thomas.Breuer/ctbllib"><tt>http://www.math.rwth-aachen.de/</tt>
<tt><tt>~</tt>Thomas.Breuer/</tt>
<tt>ctbllib</tt></a>, Mar 2012, <font face="helvetica">GAP</font> package.

<div class="p"><!----></div>
</dd>
 <dt><a href="#CITECCN85" name="CCN85">[CCN<sup>+</sup>85]</a></dt><dd>
J.&nbsp;H. Conway, R.&nbsp;T. Curtis, S.&nbsp;P. Norton, R.&nbsp;A. Parker, and R.&nbsp;A. Wilson,
  <em>Atlas of finite groups</em>, Oxford University Press, Eynsham, 1985,
  Maximal subgroups and ordinary characters for simple groups, With
  computational assistance from J. G. Thackray. MR 827219 (88g:20025)

<div class="p"><!----></div>
</dd>
 <dt><a href="#CITEGAP4" name="GAP4">[GAP04]</a></dt><dd>
The GAP&nbsp;Group, <em>GAP-Groups, Algorithms, and
  Programming, Version 4.4</em>, 2004, <a href="http://www.gap-system.org"><tt>http://www.gap-system.org</tt></a>.

<div class="p"><!----></div>
</dd>
 <dt><a href="#CITEHup67" name="Hup67">[Hup67]</a></dt><dd>
B.&nbsp;Huppert, <em>Endliche Gruppen. I</em>, Die Grundlehren der Mathematischen
  Wissenschaften, Band 134, Springer-Verlag, Berlin, 1967. MR 0224703 (37
  #302)

<div class="p"><!----></div>
</dd>
 <dt><a href="#CITEIsa76" name="Isa76">[Isa76]</a></dt><dd>
I.&nbsp;M. Isaacs, <em>Character theory of finite groups</em>, Academic Press
  [Harcourt Brace Jovanovich Publishers], New York, 1976, Pure and Applied
  Mathematics, No. 69. MR 0460423 (57 #417)</dd>
</dl>


<div class="p"><!----></div>

<div class="p"><!----></div>

<br /><br /><hr /><small>File translated from
T<sub><font size="-1">E</font></sub>X
by <a href="http://hutchinson.belmont.ma.us/tth/">
T<sub><font size="-1">T</font></sub>H</a>,
version 3.59.<br />On  5 May 2012, 09:05.</small>
</html>
