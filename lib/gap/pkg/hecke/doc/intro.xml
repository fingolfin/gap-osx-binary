<!--

     intro.xml            hecke package documentation
                                                               Dmitriy Traytel

         Copyright (C) 2010, Dmitriy Traytel

This chapter gives a short introduction and explains the philosophy
behind the package.

-->

<Chapter Label="intro">
<Index>&specht; package</Index>
<Heading>Decomposition numbers of Hecke algebras of type A</Heading>

<Section Label="desription">
<Heading>Description</Heading>
&Specht; is a port of the &GAP; 3-package &OldSpecht; to &GAP; 4.<P/>

This package contains functions for computing the decomposition matrices
for Iwahori-Hecke algebras of the symmetric groups. As the (modular)
representation theory of these algebras closely resembles that of the
(modular) representation theory of the symmetric groups (indeed, the
latter is a special case of the former) many of the combinatorial tools
from the representation theory of the symmetric group are included in
the package.<P/>

These programs grew out of the attempts by Gordon James and Andrew Mathas
<Cite Key="JM1"/> to understand the decomposition matrices of Hecke algebras
of type <E>A</E> when <M>q=-1</M>. The package is now much more
general and its highlights include:

<Enum>
<Item>&Specht; provides a means of working in the Grothendieck ring of a
Hecke algebra <M>H</M> using the three natural bases corresponding to
the Specht modules, projective indecomposable modules, and simple modules.
</Item>
<Item>For Hecke algebras defined over fields of characteristic zero,
the algorithm of Lascoux, Leclerc, and Thibon <Cite Key="LLT"/> for computing
decomposition numbers and <Q>crystallized decomposition matrices</Q> has been
implemented. In principle, this gives all of the decomposition matrices of
Hecke algebras defined over fields of characteristic zero.
</Item>
<Item>&Specht; provides a way of inducing and restricting modules. In addition,
it is possible to <Q>induce</Q> decomposition matrices; this function is
quite effective in calculating the decomposition matrices of Hecke
algebras for small <M>n</M>.
</Item>
<Item>The <M>q</M>-analogue of Schaper's theorem <Cite Key="JM2"/> is
included, as is Kleshchev's <Cite Key="K"/> algorithm of calculating the
Mullineux map. Both are used extensively when inducing decomposition matrices.
</Item>
<Item>&Specht; can be used to compute the decomposition numbers of
<M>q</M>-Schur algebras (and the general linear groups), although there is
less direct support for these algebras. The decomposition matrices for the
<M>q</M>-Schur algebras defined over fields of characteristic zero for
<M>n&lt;11</M> and all <M>e</M> are included in &Specht;.
</Item>
<Item>The Littlewood-Richard rule, its inverse, and functions for many
of the standard operations on partitions (such as calculating cores,
quotients, and adding and removing hooks), are included.
</Item>
<Item>The decomposition matrices for the symmetric groups <M>S_n</M> are
included for <M>n&lt;15</M> and for all primes.
</Item>
</Enum>
</Section>

<Section Label="representationtheory">
<Heading>The modular representation theory of Hecke algebras</Heading>
The <Q>modular</Q> representation theory of the Iwahori-Hecke algebras of
type <E>A</E> was pioneered by Dipper and James <Cite Key="DJ1"/>
<Cite Key="DJ2"/>; here the theory is briefly outlined, referring the reader
to the references for details.<P/>

Given a commutative integral domain <M>R</M> and a non-zero unit <M>q</M>
in <M>R</M>, let <M>H=H_{R, q}</M> be the Hecke algebra of the symmetric
group <M>S_n</M> on <M>n</M> symbols defined over <M>R</M> and with
parameter <M>q</M>. For each partition <M>\mu</M> of <M>n</M>, Dipper and
James defined a <E>Specht module</E> <M>S(\mu)</M>. Let <M>rad~S(\mu)</M>
be the radical of <M>S(\mu)</M> and define <M>D(\mu)=S(\mu)/rad~S(\mu)</M>.
When <M>R</M> is a field, <M>D(\mu)</M> is either zero or absolutely
irreducible. Henceforth, we will always assume that <M>R</M> is a field.<P/>

Given a non-negative integer <M>i</M>, let <M>[i]_q=1+q+\ldots+q^{i-1}</M>.
Define <M>e</M> to be the smallest non-negative integer such that
<M>[e]_q=0</M>; if no such integer exists, we set <M>e</M> equal to <M>0</M>.
Many of the functions in this package depend upon e; the integer <M>e</M> is
the Hecke algebras analogue of the characteristic of the field in the modular
representation theory of finite groups.<P/>

A partition <M>\mu=(\mu_1,\mu_2,\ldots)</M> is <E><M>e</M>-singular</E> if
there exists an integer <M>i</M> such that <M>\mu_i=\mu_{i+1}=\cdots=
\mu_{i+e-1}>0</M>; otherwise, <M>\mu</M> is <E><M>e</M>-regular</E>.
Dipper and James <Cite Key="DJ1"/> showed that <M>D(\nu)\neq 0</M> if and
only if <M>\nu</M> is <M>e</M>-regular and that the <M>D(\nu)</M> give a
complete set of non-isomorphic irreducible <M>H</M>-modules as <M>\nu</M>
runs over the <M>e</M>-regular partitions of <M>n</M>.
Further, <M>S(\mu)</M> and <M>S(\nu)</M> belong to the same block if and
only if <M>\mu</M> and <M>\nu</M> have the same <M>e</M>-core
<Cite Key="DJ2"/><Cite Key="JM2"/>. Note that these results depend only on
<M>e</M> and not directly on <M>R</M> or <M>q</M>.<P/>

Given two partitions <M>\mu</M> and <M>\nu</M>, where <M>\nu</M> is <M>e</M>
-regular, let <M>d_{\mu<Alt Not="LaTeX">,</Alt>\nu}</M> be the composition
multiplicity of <M>D(\nu)</M> in <M>S(\nu)</M>.  The matrix
<M>D=(d_{\mu<Alt Not="LaTeX">,</Alt>\nu})</M> is the <E>
decomposition matrix</E> of <M>H</M>. When the rows and columns are ordered
in a way compatible with dominance, <M>D</M> is lower unitriangular.<P/>

The indecomposable <M>H</M>-modules <M>P(\nu)</M> are indexed by <M>e</M>
-regular partitions <M>\nu</M>. By general arguments, <M>P(\nu)</M> has the
same composition factors as <M>\sum_{\mu} d_{\mu<Alt Not="LaTeX">,</Alt>\nu}
S(\mu)</M>; so these linear combinations of modules become identified in the
Grothendieck ring of <M>H</M>. Similarly, <M>D(\nu) =
\sum_{\mu} d_{\nu<Alt Not="LaTeX">,</Alt>\mu}^{-1} S(\mu)</M> in the
Grothendieck ring. These observations are the basis for many of the
computations in &Specht;.
</Section>

<Section Label="examples">
<Heading>Two small examples</Heading>
Because of the algorithm of <Cite Key="LLT"/>, in principle, all of
decomposition matrices for all Hecke algebras defined over fields of
characteristic zero are known and available using &Specht;. The algorithm is
recursive; however, it is quite quick and, as with a car, you need never look
at the engine:

<Example>
gap&gt; H:=Specht(4);   # e=4, 'R' a field of characteristic 0
&lt;Hecke algebra with e = 4&gt;
gap&gt; RInducedModule(MakePIM(H,12,2));
&lt;direct sum of 5 P-modules&gt;
gap&gt; Display(last);
P(13,2) + P(12,3) + P(12,2,1) + P(10,3,2) + P(9,6)
</Example>

The <Cite Key="LLT"/> algorithm was applied 24 times during this calculation.
<P/>

For Hecke algebras defined over fields of positive characteristic the
major tool provided by &Specht;, apart from the decomposition matrices
contained in the libraries, is a way of <Q>inducing</Q> decomposition
matrices. This makes it fairly easy to calculate the associated
decomposition matrices for <Q>small</Q> <M>n</M>. For example, the &Specht;
libraries contain the decomposition matrices for the symmetric groups
<M>S_n</M> over fields of characteristic <M>3</M> for <M>n&lt;15</M>.
These matrices were calculated by &Specht; using the following commands:

<Example>
gap> H:=Specht(3,3);   # e=3, 'R' field of characteristic 3
&lt;Hecke algebra with e = 3&gt;
gap> d:=DecompositionMatrix(H,5);  # known for n&lt;2e
&lt;7x5 decomposition matrix&gt;
gap&gt; Display(last);
5    | 1
4,1  | . 1
3,2  | . 1 1
3,1^2| . . . 1
2^2,1| 1 . . . 1
2,1^3| . . . . 1
1^5  | . . 1 . .
gap&gt; for n in [6..14] do
&gt;       d:=InducedDecompositionMatrix(d); SaveDecompositionMatrix(d);
&gt;    od;
</Example>

The function <C>InducedDecompositionMatrix</C> contains almost every trick
for computing decomposition matrices (except using the spin groups).<P/>

&Specht; can also be used to calculate the decomposition numbers of the
<M>q</M>-Schur algebras; although, as yet,  here no additional routines for
calculating the projective indecomposables indexed by <M>e</M>-singular
partitions. Such routines may be included in a future release,
together with the (conjectural) algorithm <Cite Key="LT"/> for computing the
decomposition matrices of the <M>q</M>-Schur algebras over fields of
characteristic zero.<P/>
<!--
In the next release of &Specht;, functions for computing the decomposition
matrices of Hecke algebras of type <E>B</E>, and more generally those of the
Ariki-Koike algebras will be included. As with the Hecke
algebra of type <E>A</E>, there is an algorithm for computing the
decomposition matrices of these algebras when <M>R</M> is a field of
characteristic zero <Cite Key="M"/>.-->
</Section>

<Section Label="overview">
<Heading>Overview over this manual</Heading>

Chapter <Ref Chap="install"/> describes the installation of this package.

Chapter <Ref Chap="functionality"/> shows instructive examples for the
usage of this package.
</Section>

<Section Label="credits">
<Heading>Credits</Heading>

I would like to thank Anne Henke for offering me the interesting project of
porting &OldSpecht; to the current &GAP; version, Max Neunhöffer for giving
me an excellent introduction to the &GAP; 4-style of programming and Benjamin
Wilson for supporting the project and helping me to understand the
mathematics behind &Specht;.<P/>

Also I thank Andrew Mathas for allowing me to use his &GAP; 3-code of the
&OldSpecht; package.<P/>

The lastest version of &Specht; can be obtained from<P/>
<URL>http://home.in.tum.de/~traytel/hecke/</URL>.<P/>

Dmitriy Traytel<P/>
traytel@in.tum.de<P/>
Technische Universität München, 2010.
<Ignore>
<Subsection Label="oldcredits">
<Heading>&OldSpecht; author's credits</Heading>
I would like to thank Gordon James, Johannes Lipp, and Klaus Lux
for their comments and suggestions.<P/>

If you find &OldSpecht; useful please let me know. I would also appreciate
hearing any suggestions, comments, or improvements. In addition, if
&OldSpecht; does play a significant role in your research, please send me a
copy of the paper(s) and please cite &OldSpecht; in your references.<P/>

The lastest version of &OldSpecht; can be obtained from<P/>
<URL>http://maths.usyd.edu.au:8000/u/mathas/specht</URL>.<P/>

Andrew Mathas<P/>
mathas@maths.usyd.edu.au<P/>
University of Sydney, 1997.<P/>
(Supported in part by SERC grant GR/J37690)
</Subsection>
</Ignore>
</Section>
<!-- ############################################################ -->

</Chapter>

