127,132d126
< InstallOtherMethod(Dimension, "method for linear codes", true,
<         [IsLinearCode], 0,
< function(C)
<         return Length(GeneratorMat(C));
< end);
< 
137,141c131,134
<         return WordLength(C) - DegreeOfLaurentPolynomial( GeneratorPol(C) );
<     elif HasCheckPol(C)
<         return DegreeOfLaurentPolynomial( CheckPol(C) );
<     else 
<         Error("Attempting to find the dim of a cyclic code with neither a gen. poly. nor a check poly...\n");
---
>         return WordLength(C) - DegreeOfLaurentPolynomial(
> 														GeneratorPol(C));
>     else
>         return DegreeOfLaurentPolynomial(CheckPol(C));
407,408c400,401
< ##                                         having  minimum distance to w 
< ##                                         (w= zero vector is the default)
---
> ##                                                                   having  minimum distance to w 
> ##                                                                   (w= zero vector is the default)
433,441c426,427
< 
< #    
< # This _was_ an InstallOtherMethod for MinimumDistance but the methods
< # for that (including one with the same filter list as this) are encoded
< # further down in this file.  On close inspection notice that it is 
< # returning a codeword -- it _should_ have been an InstallOtherMethod
< # for MinimumDistanceCodeword -- JEF 6/22/11
< #
< InstallOtherMethod(MinimumDistanceCodeword, "linear code, word", true, 
---
>     
> InstallOtherMethod(MinimumDistance, "linear code, word", true, 
446d431
< Print("linear code, vector (first in file) \n");
450c435
<         G := GeneratorMat(C);
---
> 	G := GeneratorMat(C);
453,459c438,444
<         for i in [1..Length(G)] do
<           AClosestVec:=AClosestVectorCombinationsMatFFEVecFFE(G, F, word, i, 1);
<           if WeightVecFFE(AClosestVec)<minwt then
<             minwt := WeightVecFFE(AClosestVec);
<             closestvec := AClosestVec;
<           fi;
<         od;
---
> 	for i in [1..Length(G)] do
> 	  AClosestVec:=AClosestVectorCombinationsMatFFEVecFFE(G, F, word, i, 1);
> 	  if WeightVecFFE(AClosestVec)<minwt then
> 	      minwt := WeightVecFFE(AClosestVec);
>               closestvec := AClosestVec;
> 	  fi;
> 	od;
583c568
< # Print("linear code, vector (second in file) \n");
---
> #Print("linear code, vector\n");
1117c1102
<     F := LeftActingDomain(C); 
---
> 	F := LeftActingDomain(C); 
1126c1111
<         G := One(F)*ShallowCopy(GeneratorMat(C));
---
> 		G := ShallowCopy(GeneratorMat(C));
1129c1114
<         G := One(F)*ShallowCopy(CheckMat(C));
---
>         G := ShallowCopy(CheckMat(C));
2181,2183c2166,2167
< 	local F, G;
<         F := LeftActingDomain(C); 
< 	G := One(F)*ShallowCopy(GeneratorMat(C));
---
> 	local G;
> 	G := ShallowCopy(GeneratorMat(C));
2704c2688
< 		Print("The executable `minimum-weight' is not present in ", path, " ... switching to MinimumDistance ...\n");
---
> 		Print("minimum-weight is not loaded ... switching to MinimumDistance ...\n");
2713c2697
<     #path := DirectoriesPackagePrograms( "guava" );; #seems unnecessary -- already done above...
---
>     path := DirectoriesPackagePrograms( "guava" );;
