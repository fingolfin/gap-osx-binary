<html><head><title>[ModIsom] 1 Introduction</title></head>
<body text="#000000" bgcolor="#ffffff">
[<a href = "chapters.htm">Up</a>] [<a href ="CHAP002.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<h1>1 Introduction</h1><p>
<p>
This package contains various algorithms related to finite dimensional 
nilpotent associative algebras. We first give a brief introduction to 
these algebras and then an overview of the main algorithms.
<p>
<p>
<hr>Associative algebras and nilpotency
<p>
Let <var>A</var> be an associative algebra of dimension <var>d</var> over a field <var>F</var>.
Let <var>{b<sub>1</sub>, ..., b<sub>d</sub>}</var> be a basis for <var>A</var>. We identify the 
element <var>x<sub>1</sub> b<sub>1</sub> + ...+ x<sub>d</sub> b<sub>d</sub></var> of <var>A</var> with the element 
<var>(x<sub>1</sub>, ..., x<sub>d</sub>)</var> of <var>F<sup>d</sup></var>. The multiplication of <var>A</var> can then 
be described by a <strong>structure constants table</strong>: a 3-dimensional array 
with entries <var>a<sub>i,j,k</sub> inF</var> satisfying that
<p><var>b<sub>i</sub> b<sub>j</sub> = sum<sub>k=1</sub><sup>d</sup> a<sub>i,j,k</sub> b<sub>k</sub>.<p></var>
<p>
<p>
An associative algebra <var>A</var> is <strong>nilpotent</strong> if its <strong>power series</strong> terminates
at the trivial ideal of <var>A</var>; that is
<p><var> A &gt; A<sup>2</sup> &gt; ...&gt; A<sup>c</sup> &gt; A<sup>c+1</sup> = {0} <p></var>
where <var>A<sup>j</sup></var> is the ideal of <var>A</var> generated by all products of length 
at least <var>j</var>. The length <var>c</var> of the power series is also called the 
<strong>class</strong> of <var>A</var> and the dimension of <var>A/A<sup>2</sup></var> is the <strong>rank</strong> of <var>A</var>. Note
that <var>A</var> is generated by <var>dim(A/A<sup>2</sup>)</var> elements. Clearly, <var>A</var> does not 
contain a multiplicative identity. 
<p>
<p>
For computational purposes we describe a nilpotent associative algebra by 
a weighted basis and a description of the corresponding structure constants 
table. A basis of a nilpotent associative algebra <var>A</var> is <strong>weighted</strong> if
there is a sequence of weights <var>(w<sub>1</sub>, ..., w<sub>d</sub>)</var> so that
<p><var>A<sup>j</sup> = langleb<sub>i</sub> midw<sub>i</sub> geqj rangle.<p></var>
Note that <var>A A<sup>j</sup> = A<sup>j+1</sup></var> for every <var>j</var>. Thus it is possible to choose
all basis elements of weight at least 2 so that <var>b<sub>i</sub> = b<sub>k</sub> b<sub>l</sub></var> holds for
some <var>k</var> and <var>l</var>, where <var>b<sub>k</sub></var> is of weight 1 and <var>b<sub>l</sub></var> is of weight <var>w<sub>i</sub>-1</var>. 
This feature allows an effective description of <var>A</var> via a <strong>nilpotent 
structure constants table</strong>. This contains the structure constants 
<var>a<sub>i,j,k</sub></var> for all <var>i</var> with <var>w<sub>i</sub> = 1</var> and <var>1 leqj,k leqd</var>. For <var>i</var> 
with <var>w<sub>i</sub> &gt; 1</var> it either contains a description as <var>b<sub>i</sub> = b<sub>k</sub> b<sub>l</sub></var> or the 
structure constants <var>a<sub>i,j,k</sub></var> for <var>1 leqj,k leqd</var>. It may also 
contain both or some partial overlap of these informations.
<p>
<p>
<hr>Isomorphisms and Automorphisms
<p>
Let <var>A</var> be a finite dimensional nilpotent associative algebra over a 
finite field. This package contains an implementation of the methods 
in <a href="biblio.htm#Eic07"><cite>Eic07</cite></a> which allow the determination of the automorphism group 
<var>Aut(A)</var> and a <strong>canonical form</strong> <var>Can(A)</var>. 
<p>
The automorphism group is given by generators and it represented as a
subgroup of <var>GL(dim(A), F)</var>. Also the order of <var>Aut(A)</var> is available.
<p>
A canonical form <var>Can(A)</var> for <var>A</var> is a nilpotent structure constants 
table for <var>A</var> which is unique for the isomorphism type of <var>A</var>; 
that is, two algebras <var>A</var> and <var>B</var> are isomorphic if and only if <var>Can(A) 
= Can(B)</var> holds. Hence the canonical form can be used to solve the 
isomorphism problem. 
<p>
<p>
<hr>The modular isomorphism problem
<p>
The modular isomorphism problem asks whether <var><font face="helvetica,arial">F</font>G cong<font face="helvetica,arial">F</font>H</var> implies
that <var>G congH</var> for two <var>p</var>-groups <var>G</var> and <var>H</var> and <var><font face="helvetica,arial">F</font></var> the field with <var>p</var>
elements. This problem is still open, despite various efforts towards
proving the claim or finding counterexamples to it. 
<p>
Computational approaches have been used to investigate the modular isomorphism
problem. Based on an algorithm by Roggenkamp and Scott <a href="biblio.htm#RS93"><cite>RS93</cite></a>, Wursthorn
<a href="biblio.htm#Wur93"><cite>Wur93</cite></a> described an algorithm for checking the modular isomorphism
problem; that is, he described an algorithm for checking whether two modular
group algebras <var><font face="helvetica,arial">F</font>G</var> and <var><font face="helvetica,arial">F</font>H</var> are isomorphic. This algorithm has been
implemented in C by Wursthorn and has been used applied to the groups of
order dividing <var>2<sup>7</sup></var> without finding a counterexample, see <a href="biblio.htm#BKRW99"><cite>BKRW99</cite></a>.
<p>
<p>
This package contains an implementation of the new algorithm described in
<a href="biblio.htm#Eic07"><cite>Eic07</cite></a> for checking isomorphism of modular group algebras. It is based
on the fact that the Jacobson radical <var>J(FG)</var> is nilpotent if <var>FG</var> is a 
modular group algebra. Hence the automorphism group and canonical form 
algorithm of this package apply and can be used to solve the isomorphism
problem for modular group algebras.
<p>
The methods of this package have been used to check the modular isomorphism
problem for the groups of order dividing <var>3<sup>6</sup></var> and <var>2<sup>8</sup></var> (<a href="biblio.htm#Eic07"><cite>Eic07</cite></a>) and
for the groups of order <var>2<sup>9</sup></var> (<a href="biblio.htm#EKo11"><cite>EKo11</cite></a>).
<p>
<p>
<hr>A nilpotent quotient algorithm
<p>
Given a finitely presented associative algebra <var>A</var> over an arbitrary
field <var>F</var>, this package contains an algorithm to determine a nilpotent
structure constants table for the class-<var>c</var> nilpotent quotient of <var>A</var>. 
See <a href="biblio.htm#Eic11"><cite>Eic11</cite></a> for details on the underlying algorithm.
<p>
<p>
<hr>Kurosh Algebras
<p>
Let <var>F(d,F)</var> denote the free non-unital associative algebra on <var>d</var> 
generators over the field <var>F</var>. Then 
<p><var>A(d,n,F) = F(d,F) / langlelanglew<sup>n</sup> midw inF(d,F) ranglerangle<p></var>
is the <strong>Kurosh Algebra</strong> on <var>d</var> generators of exponent <var>n</var> over the field
<var>F</var>. Kurosh Algebras can be considered as an algebra-theoretic analogue to 
Burnside groups. 
<p>
This package contains a method that allows to determine <var>A(d,n,F)</var> for
given <var>d</var>, <var>n</var>, <var>F</var>. This can also be used to determine <var>A(d,n,F)</var> for all
fields of a given characteristic. We refer to <a href="biblio.htm#Eic11"><cite>Eic11</cite></a> for details on
the algorithms.
<p>
This package also contains a database of Kurosh Algebras that have been
determined with the methods of this package. 
<p>
<p>
[<a href = "chapters.htm">Up</a>] [<a href ="CHAP002.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<P>
<address>ModIsom manual<br>October 2014
</address></body></html>