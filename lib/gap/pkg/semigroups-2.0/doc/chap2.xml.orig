
<Chapter Label="create"><Heading>Creating semigroups and monoids</Heading> 
  In this chapter we describe the various ways that semigroups and monoids can
  be created in &Semigroups;, the options that are available at the time of
  creation, and describe some standard examples available in &Semigroups;. <P/>
  
  Any semigroup created before &Semigroups; has been loaded must
  be recreated after &Semigroups; is loaded so that the options record
  (described in Section <Ref Sect="opts"/>) is defined. Almost all of the
  functions and methods provided by &Semigroups;, including those methods for
  existing &GAP; library functions, will return an error when applied to a
  semigroup created before &Semigroups; is loaded. 

 <Section><Heading>Random semigroups</Heading> 
    <#Include Label="RandomInverseMonoid"> 
    <#Include Label="RandomTransformationMonoid"> 
    <#Include Label="RandomPartialPermMonoid"> 
    <#Include Label="RandomBinaryRelationMonoid"> 
    <#Include Label="RandomBipartitionMonoid"> 
  </Section> 

  <Section><Heading>New semigroups from old</Heading> 
    <#Include Label="ClosureInverseSemigroup">
    <#Include Label="ClosureSemigroup">
    <#Include Label="SubsemigroupByProperty">
    <#Include Label="InverseSubsemigroupByProperty">
  </Section> 
  
  <Section Label="opts"><Heading>Options when creating semigroups</Heading>
    When using any of  <Ref Func="InverseSemigroup"  BookName="ref"/>, 
    <Ref Func="InverseMonoid" BookName="ref"/>, 
    <Ref Func="Semigroup" BookName="ref"/>, 
    <Ref Func="Monoid" BookName="ref"/>, 
    <Ref Meth="SemigroupByGenerators" BookName="ref"/>, 
    <Ref Meth="MonoidByGenerators" BookName="ref"/>, 
    <Ref Func="ClosureInverseSemigroup"/>
    or <Ref Func="ClosureSemigroup"/> a
    record can be given as an optional final argument. The components of this
    record specify the values of certain options for the semigroup being
    created. A list of these options and their default values is
    given below.  <P/>

    Assume that <A>S</A> is the semigroup created by one of the functions given
    above and that <A>S</A> is generated by the list of transformations
    <A>gens</A>. 
  
    <List>
      <Mark><C>acting</C></Mark>
      <Item> 
        this component should be <K>true</K> or <K>false</K>. In order for a
        semigroup to use the methods in &Semigroups; it must satisfy
        <C>IsActingSemigroup</C>. By default any semigroup or monoid of
        transformations or partial permutations satisfies
        <C>IsActingSemigroup</C>. From time to time, it might be preferable to
        use the exhaustive algorithm in the &GAP; library to compute with a
        semigroup. If this is the case, then the value of this component can be
        set <K>false</K> when the semigroup is created. Following this none of
        the methods in the &Semigroups; package will be used to compute
        anything about the semigroup.
      </Item>
      <Mark><C>regular</C></Mark>
      <Item>
        this component should be <K>true</K> or <K>false</K>. If it is known
        <E>a priori</E> that the semigroup <C>S</C> being created is a regular
        semigroup, then this component can be set to <K>true</K>. In this case,
        <C>S</C> knows it is a regular semigroup and can take advantage of the
        methods for regular semigroups in &Semigroups;. It is usually much more
        efficient to compute with a regular semigroup that to compute with a
        non-regular semigroup.<P/>

        If this option is set to <K>true</K> when the semigroup being defined
        is <B>not</B> regular, then the results maybe unpredictable. <P/>

        The default value for this option is <K>false</K>.
      </Item>
      <Mark><C>hashlen</C></Mark>
      <Item>
      this component should be a positive integer, which roughly specifies the
      lengths of the hash tables used internally by &Semigroups;.  &Semigroups;
      uses hash tables in several fundamental methods.  The lengths of these
      tables are a compromise between performance and memory usage; larger
      tables provide better performance for large computations but use more
      memory.  Note that it is unlikely that you will need to specify this
      option unless you find that &GAP; runs out of memory unexpectedly or that
      the performance of &Semigroups; is poorer than expected. If you find that
      &GAP; runs out of memory unexpectedly, or you plan to do a large number
      of computations with relatively small semigroups (say with tens of
      thousands of elements), then you might consider setting <C>hashlen</C> to
      be less than the default value of <C>25013</C> for each of these
      semigroups.  If you find that the performance of &Semigroups; is
      unexpectedly poor, or you plan to do a computation with a very large
      semigroup (say, more than 10 million elements), then you might consider
      setting <C>hashlen</C> to be greater than the default value of
      <C>25013</C>. <P/>

      You might find it useful to set the info level of the info class
      <C>InfoOrb</C> to 2 or higher since this will indicate when hash tables
      used by &Semigroups; are being grown; see <Ref Oper="SetInfoLevel"
      BookName="ref"/>.
      </Item>
      
      <Mark><C>small</C></Mark> <Item>if this component is set to <K>true</K>,
        then &Semigroups; will compute a small subset of <A>gens</A> that
        generates <A>S</A> at the time that <A>S</A> is created. This will
        increase the amount of time required to create <A>S</A> substantially,
        but may decrease the amount of time required for subsequent
        calculations with <A>S</A>. If this component is set to <K>false</K>,
        then &Semigroups; will return the semigroup generated by <A>gens</A>
        without modifying <A>gens</A>. The default value for this component is
        <K>false</K>.
    </Item> 
</List>
  
      The default values of the options described above are stored in a global
      variable named <Ref Var="SemigroupsOptionsRec"/>. If you want to change
      the default values of these options for a single &GAP; session, then you
      can simply redefine the value in &GAP;. For example, to change the option
      <C>small</C> from the default value of <A>false</A> use:

    <Log>gap> SemigroupsOptionsRec.small:=true;
true</Log>

    If you want to change the default values of the options stored in <Ref
      Var="SemigroupsOptionsRec"/> for all &GAP; sessions, then you can
    edit these values in the file <C>semigroups/gap/options.g</C>. <P/>

    <Example>
gap> S:=Semigroup(Transformation( [ 1, 2, 3, 3 ] ), 
> rec(hashlen:=100003, small:=false));
&lt;commutative transformation semigroup on 4 pts with 1 generator></Example>

    <#Include Label="SemigroupsOptionsRec">

   </Section>
    
  <Section Label="Examples"><Heading>Standard examples</Heading>
    In this section, we describe the operations in &Semigroups;, which can be
    used to creating semigroups belonging to several standard classes of
    example. 
    <#Include Label="JonesMonoid"> 
    <#Include Label="BrauerMonoid"> 
    <#Include Label="FactorisableDualSymmetricInverseSemigroup">
    <#Include Label="DualSymmetricInverseSemigroup">
    <#Include Label="PartitionMonoid"> 
    <#Include Label="PartialTransformationSemigroup"> 
    <#Include Label="FullMatrixSemigroup">
    <#Include Label="IsFullMatrixSemigroup">
    <#Include Label="MunnSemigroup">
    <#Include Label="OPOIPOPI">
    <#Include Label="SingularTransformationSemigroup">
    <#Include Label="RegularBinaryRelationSemigroup">
  </Section>

<Section Label="Catalogues"><Heading>The examples directory</Heading>
    
    The <C>examples</C> folder of the &Semigroups; package directory contains
    catalogues of some naturally occurring semigroups of transformations and
    partial permutations. These files can be read into &GAP; using <Ref
      Func="ReadSemigroups"/> and similar files can be created using <Ref
      Func="WriteSemigroups"/>.<P/>

    Further examples can be downloaded from &vspace;<P/>

    <URL>http://tinyurl.com/jdmitchell/examples.php</URL>&vspace;<P/>

    &noindent; A summary of the available files, a desciption of their
    contents, and how they were created is given below.<P/>

    <List>
      <Mark>Endomorphisms of graphs</Mark>
      <Item>
        the files <C>eul<A>n</A>c.semigroups.gz</C> with
        <M>n=3,...,10</M>; <C>graph<A>n</A>c.semigroups.gz</C> with 
        <M>n=3,...,8</M>; and <F>selfcomp.semigroups.gz</F>
        contain small generating sets for the endomorphism monoids of
        all connected Eulerian graphs, all connected graphs, and all self
        complimentary graphs with <M>n</M> vertices, respectively. 
        These files were created using the catalogues of
        such graphs available at:<P/>

        <URL>http://cs.anu.edu.au/~bdm/data/graphs.html</URL><P/>
       
        a C program written by Max Neunhoeffer which produces a relatively
        large list of endomorphisms containing a generating set for the
        endomorphism monoid, <Ref Meth="SmallGeneratingSet"/> and then
        <Ref Oper="IrredundantGeneratingSubset"/> in &Semigroups;. 
        The monoid generated by the transformations output
        by <C>ReadSemigroups("eul7c.semigroups.gz", i);</C>, say, is the monoid
        of endomorphisms of the <C>i</C>th graph in the file:<P/>

        <URL>http://cs.anu.edu.au/~bdm/data/eul7c.g6</URL>
      </Item>
      
      <Mark>Munn semigroups</Mark>
      <Item> 
        the file <F>munn.semigroups.gz</F> contains generators for all the Munn
        semigroups of semilattices with 2 to 8 elements. The
        semilattices were obtained from the &Smallsemi; package using the
        command:
        
        <Log>AllSmallSemigroups([2..8], IsSemilatticeAsSemigroup, true);</Log>
        and the generators for the Munn semigroups were calculated using 
        <Ref Oper="MunnSemigroup"/>.
        More information is available at:<P/>
  
        <URL>http://tinyurl.com/jdmitchell/examples.html</URL>
      </Item>

      <Mark>Syntactic semigroups</Mark>
      <Item> 
        the files <F>syntactic.semigroups.gz</F> contain generators for the
        syntactic semigroups of word acceptors of certain triangle groups,
        provided by Markus Pfeiffer (St Andrews).
        A <E>triangle group</E> is a group defined by a presentation of the 
        form 
        <Display> 
        \langle x, y | x^p, y^q, (xy)^r\rangle
        </Display>
        for some positive integers <M>p, q, r</M>. The file contains
        generators of the syntactic semigroups of word acceptors of triangle
        groups where <M>p</M> ranges from <M>1</M> to <M>94</M>, <M>q=3</M>,
        and <M>r=2</M>; <M>p=101</M>, <M>q</M> ranges from <M>3</M> to
        <M>99</M> and <M>r=2</M>;  
        <M>p=101</M>, <M>q=72</M>, and <M>r</M> ranges from <M>7</M> to
        <M>71</M>; and some further randomly chosen values of <M>p,q,r</M>.
      </Item>
      <Mark>Endomorphisms of groups</Mark>
      <Item>
        the files <C>nonabelian_groups_<A>n</A>.semigroups.gz</C> with
        <M>n=6,....,64</M> contains small generating sets for the endomorphism
        monoids of all non-abelian groups with <A>n</A> elements. 
        These files were created using the Small Groups Library in &GAP;
        and the <Package>Sonata</Package> function <C>Endomorphisms</C>.
      </Item>
    </List>
  </Section>
</Chapter>

