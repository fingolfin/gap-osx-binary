#############################################################################
##
#W  semigroups.xml
#Y  Copyright (C) 2011-13                                James D. Mitchell
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="ClosureSemigroup">
  <ManSection>
    <Func Name="ClosureSemigroup" Arg="S, coll [, opts]"/>
    <Returns>A semigroup or monoid.</Returns>
    <Description>
      This function returns the semigroup or monoid generated by the
      semigroup <A>S</A> and the collection of elements 
      <A>coll</A> after removing duplicates and elements
      from <A>coll</A> that are already in <A>S</A>. The new
      semigroup knows at least as much information about its structure as was
      already known about that of <A>S</A>. <P/>

      If present, the optional third argument <A>opts</A> should be a record
      containing the values of the options for the semigroup being created as
      described in Section <Ref Sect="opts"/>.<P/>

      <Example>
gap> gens:=[ Transformation( [ 2, 6, 7, 2, 6, 1, 1, 5 ] ), 
>  Transformation( [ 3, 8, 1, 4, 5, 6, 7, 1 ] ), 
>  Transformation( [ 4, 3, 2, 7, 7, 6, 6, 5 ] ), 
>  Transformation( [ 7, 1, 7, 4, 2, 5, 6, 3 ] ) ];;
gap> S:=Monoid(gens[1]);;
gap> for i in [2..4] do S:=ClosureSemigroup(S, gens[i]); od;
gap> S;
&lt;transformation monoid on 8 pts with 4 generators>
gap> Size(S);
233606</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="ClosureInverseSemigroup">
   <ManSection>
    <Func Name="ClosureInverseSemigroup"  Arg="S, coll [, opts]"/>
    <Returns>An inverse semigroup or monoid.</Returns>
    <Description>
      This function returns the inverse semigroup or monoid generated by the
      inverse semigroup of partial permutations <A>S</A> and the partial
      permutation collection or partial permutation <A>coll</A> after first
      removing duplicates and partial permutations in <A>coll</A> that are
      already in <A>S</A>. In most cases, the new semigroups knows at least as
      much information about its structure as was already known about that of
      <A>S</A>. <P/>

      If present, the optional third argument <A>opts</A> should be a record
      containing the values of the options for the inverse semigroup being
      created; these options are described in Section <Ref Sect="opts"/>. <P/>

      <Example>
gap> S:=InverseMonoid(
> PartialPerm( [ 1, 2, 3, 5, 6, 7, 8 ], [ 5, 9, 10, 6, 3, 8, 4 ] ),
> PartialPerm( [ 1, 2, 4, 7, 8, 9 ], [ 10, 7, 8, 5, 9, 1 ] ) );;
gap> f:=PartialPerm(
> [ 1, 2, 3, 4, 5, 7, 8, 10, 11, 13, 18, 19, 20 ],
> [ 5, 1, 7, 3, 10, 2, 12, 14, 11, 16, 6, 9, 15 ]);;
gap> S:=ClosureInverseSemigroup(S, f);
&lt;inverse partial perm semigroup on 19 pts with 4 generators>
gap> Size(S);
9744
gap> T:=Idempotents(SymmetricInverseSemigroup(10));;
gap> S:=ClosureInverseSemigroup(S, T);
&lt;inverse partial perm semigroup on 19 pts with 854 generators>
gap> S:=InverseSemigroup(SmallGeneratingSet(S));
&lt;inverse partial perm semigroup on 19 pts with 14 generators></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="RandomInverseMonoid">
  <ManSection>
    <Oper Name="RandomInverseMonoid" Arg="m,n"/>
    <Oper Name="RandomInverseSemigroup"  Arg="m,n"/>
    <Returns>An inverse monoid or semigroup.</Returns>
    <Description>
      Returns  a  random  inverse  monoid  or semigroup of partial
      permutations with degree at most <A>n</A>  with <A>m</A> generators.
      <Example>
gap> S:=RandomInverseSemigroup(10,10);                                
&lt;inverse partial perm semigroup on 10 pts with 10 generators>
gap> S:=RandomInverseMonoid(10,10);   
&lt;inverse partial perm monoid on 10 pts with 10 generators>
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="RandomTransformationMonoid">
  <ManSection>
    <Oper Name="RandomTransformationMonoid" Arg="m, n"/>
    <Oper Name="RandomTransformationSemigroup" Arg="m, n"/>
    <Returns>A transformation semigroup or monoid.</Returns>
    <Description>
      Returns a random transformation monoid or semigroup of degree <A>n</A> 
      with <A>m</A> generators.
      <Example>
gap> S:=RandomTransformationMonoid(5,5);
&lt;transformation monoid on 5 pts with 5 generators>
gap> S:=RandomTransformationSemigroup(5,5);
&lt;transformation semigroup on 5 pts with 5 generators></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="RandomPartialPermMonoid">
  <ManSection>
    <Func Name="RandomPartialPermMonoid" Arg="m, n"/>
    <Func Name="RandomPartialPermSemigroup" Arg="m, n"/>
    <Returns>A partial perm semigroup or monoid.</Returns>
    <Description>
      <Example>
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="RandomBinaryRelationMonoid">
  <ManSection>
    <Func Name="RandomBinaryRelationMonoid" Arg="m, n"/>
    <Func Name="RandomBinaryRelationSemigroup" Arg="m, n"/>
    <Returns>A partial perm semigroup or monoid.</Returns>
    <Description>
      <Example>
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="RandomBipartitionMonoid">
  <ManSection>
    <Func Name="RandomBipartitionSemigroup" Arg="m, n"/>
    <Func Name="RandomBipartitionMonoid" Arg="m, n"/>
    <Returns>A bipartition semigroup or monoid.</Returns>
    <Description>
      <Example>
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="InverseSubsemigroupByProperty">
  <ManSection>
    <Func Name="InverseSubsemigroupByProperty" Arg="??"/>
    <Returns>??.</Returns>
    <Description>
      <Example>
</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="SubsemigroupByProperty">
<ManSection>
  <Oper Name="SubsemigroupByProperty" Arg="S, func" 
    Label="for a semigroup and function"/>
  <Oper Name="SubsemigroupByProperty" Arg="S, func, limit" 
  Label="for a semigroup, function, and limit on the size of the subsemigroup"/>
  <Returns>A semigroup.</Returns>
  <Description>
    <C>SubsemigroupByProperty</C> creates a subsemigroup of the semigroup
    <A>S</A> of transformations or partial permutations consisting of those
    elements fulfilling <A>func</A> (which should be a function returning
    <K>true</K> or <K>false</K>). No test is done to check if the property
    actually defines a subsemigroup. <P/>

    If the optional third argument <A>limit</A> is present and a positive
    integer, then once the subsemigroup has at least <A>limit</A> elements the
    computation stops.
  </Description>
</ManSection>
<#/GAPDoc>
