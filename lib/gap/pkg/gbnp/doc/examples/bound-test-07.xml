gap> ######################### BEGIN COPYRIGHT MESSAGE #########################
GBNP - computing Gröbner bases of noncommutative polynomials
Copyright 2001-2010 by Arjeh M. Cohen, Dié A.H. Gijsbers, Jan Willem
Knopper, Chris Krook. Address: Discrete Algebra and Geometry (DAM) group
at the Department of Mathematics and Computer Science of Eindhoven
University of Technology.

For acknowledgements see the manual. The manual can be found in several
formats in the doc subdirectory of the GBNP distribution. The
acknowledgements formatted as text can be found in the file chap0.txt.

GBNP is free software; you can redistribute it and/or modify it under
the terms of the Lesser GNU General Public License as published by the
Free Software Foundation (FSF); either version 2.1 of the License, or
(at your option) any later version. For details, see the file 'LGPL' in
the doc subdirectory of the GBNP distribution or see the FSF's own site:
http://www.gnu.org/licenses/lgpl.html
gap> ########################## END COPYRIGHT MESSAGE ##########################

gap> LoadPackage("gbnp");
-----------------------------------------------------------------------------
Loading  GBNP 1.0.1 (Non-commutative Gröbner bases)
by A.M. Cohen (http://www.win.tue.nl/~amc) and
   J.W. Knopper (J.W.Knopper@tue.nl).
-----------------------------------------------------------------------------
true

EvalTrace
gap> NPTzero:=rec(pol:=[[],[]],trace:=[]);;
gap> EvalTrace(NPTzero,[[]])=[[],[]];
true

PrintTraceList

gap> PrintTraceList([]);

PrintTracePol
gap> NPTzero:=rec(pol:=[[],[]],trace:=[]);;
gap> PrintTracePol(NPTzero); # note does not print anything (!)


PrintNPListTrace
gap> PrintNPListTrace([]);

SGrobnerTrace
gap> SGrobnerTrace([])=[];
true
gap> SGrobnerTrace([[[],[]]])=[];
true

gap> GBT:=SGrobnerTrace([[[[]],[1]]]);;
gap> Length(GBT)=1;
true
gap> GBT[1].pol=[[[]],[1]];
true
gap> GBT[1].trace=[[[],1,[],1]];
true

StrongNormalFormTraceDiff

gap> GBT:=SGrobnerTrace([[[[1]],[1]]]);;

gap> tr:=StrongNormalFormTraceDiff([[[1]],[1]],GBT);;
gap> tr.pol=[[[1]],[1]];
true
gap> tr.trace=[[[],1,[],1]];
true
cannot be reduced
gap> tr:=StrongNormalFormTraceDiff([[[]],[1]],GBT);;
gap> tr.pol=[[],[]];
true
gap> tr.trace=[];
true
cannot be reduced
gap> tr:=StrongNormalFormTraceDiff([[],[]],GBT);;
gap> tr.pol=[[],[]];
true
gap> tr.trace=[];
true

gap> GBT:=SGrobnerTrace([[[[]],[1]]]);;

gap> tr:=StrongNormalFormTraceDiff([[[1]],[1]],GBT);;
gap> tr.pol=[[[1]],[1]];
true
gap> tr.trace=[[[],1,[1],1]];
true
gap> tr:=StrongNormalFormTraceDiff([[[2]],[1]],GBT);;
gap> tr.pol=[[[2]],[1]];
true
gap> tr.trace=[[[],1,[2],1]];
true
cannot be reduced
gap> tr:=StrongNormalFormTraceDiff([[],[]],GBT);;
gap> tr.pol=[[],[]];
true
gap> tr.trace=[];
true
