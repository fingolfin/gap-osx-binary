<HTML>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- Created on March, 4  2015 by texi2html 1.65 -->
<!--
Written by: Lionel Cons <Lionel.Cons@cern.ch> (original author)
            Karl Berry  <karl@freefriends.org>
            Olaf Bachmann <obachman@mathematik.uni-kl.de>
            and many others.
Maintained by: Olaf Bachmann <obachman@mathematik.uni-kl.de>
Send bugs and suggestions to <texi2html@mathematik.uni-kl.de>

-->
<HEAD>
<TITLE>Singular Manual: Computation of Ext</TITLE>

<META NAME="description" CONTENT="Singular Manual: Computation of Ext">
<META NAME="keywords" CONTENT="Singular Manual: Computation of Ext">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META NAME="Generator" CONTENT="texi2html 1.65">

</HEAD>

<BODY LANG="EN"  BACKGROUND="Mybg.gif">

<A NAME="SEC914"></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR VALIGN="TOP">
<TD ALIGN="LEFT">
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT">  <a href="index.htm"><img
    src="singular-icon-transparent.gif" width="50"
      border="0" ALT="Top"></a>
</TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_862.htm#SEC913"><IMG SRC="a_left.gif" BORDER="0" ALT="Back: Handling graded modules" ALIGN="MIDDLE"></A></TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_864.htm#SEC915"><IMG SRC="a_right.gif" BORDER="0" ALT="Forward: Depth" ALIGN="MIDDLE"></A></TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_853.htm#SEC904"><IMG SRC="a_leftdouble.gif" BORDER="0" ALT="FastBack: Computing Groebner and Standard Bases" ALIGN="MIDDLE"></A></TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_870.htm#SEC921"><IMG SRC="a_rightdouble.gif" BORDER="0" ALT="FastForward: Singularity Theory" ALIGN="MIDDLE"></A></TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_857.htm#SEC908"><IMG SRC="a_up.gif" BORDER="0" ALT="Up: Commutative Algebra" ALIGN="MIDDLE"></A></TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="index.htm#SEC_Top"><IMG SRC="a_top.gif" BORDER="0" ALT="Top: Singular Manual" ALIGN="MIDDLE"></A></TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_toc.htm#SEC_Contents"><IMG SRC="a_tableofcon.gif" BORDER="0" ALT="Contents: Table of Contents" ALIGN="MIDDLE"></A></TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_2336.htm#SEC2422"><IMG SRC="a_index.gif" BORDER="0" ALT="Index: Index" ALIGN="MIDDLE"></A></TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_abt.htm#SEC_About"><IMG SRC="a_help.gif" BORDER="0" ALT="About: About this document" ALIGN="MIDDLE"></A></TD>
</TR>
</TABLE>
</TD>
<TD ALIGN="LEFT">
<H3> A.3.6 Computation of Ext </H3>
<!--docid::SEC914::-->
<P>

We start by showing how to calculate the n-th Ext group of an ideal. The
ingredients to do this are by the definition of Ext the following:
calculate a (minimal) resolution at least up to length n, apply the Hom
functor, and calculate the n-th homology group, that is, form the
quotient ker/im in the resolution sequence.
</P><P>

The Hom functor is given simply by transposing (hence dualizing) the
module or the corresponding matrix with the command <CODE>transpose</CODE>.
The image of the (n-1)-st map is generated by the columns of the
corresponding matrix. To calculate the kernel apply the command
<CODE>syz</CODE> at the (n-1)-st transposed entry of the resolution.
Finally, the quotient is obtained by the command <CODE>modulo</CODE>, which
gives for two modules A = ker, B = Im the module of relations of
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH
 \begin{displaymath}
A/(A \cap B)
\end{displaymath}
 -->

<IMG
 WIDTH="74" HEIGHT="28" BORDER="0"
 SRC="sing_355.png"
 ALT="\begin{displaymath}A/(A \cap B)\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>in the usual way. As we have a chain complex, this is obviously the same
as ker/Im.
</P><P>

We collect these statements in the following short procedure:
</P><P>

<TABLE><tr><td>&nbsp;</td><td class=smallexample><FONT SIZE=-1><pre>proc ext(int n, ideal I)
{
  resolution rs = mres(I,n+1);
  module tAn    = transpose(rs[n+1]);
  module tAn_1  = transpose(rs[n]);
  module ext_n  = modulo(syz(tAn),tAn_1);
  return(ext_n);
}
</FONT></pre></td></tr></table></P><P>

Now consider the following example:
</P><P>

<TABLE><tr><td>&nbsp;</td><td class=smallexample><FONT SIZE=-1><pre>ring r5 = 32003,(a,b,c,d,e),dp;
ideal I = a2b2+ab2c+b2cd, a2c2+ac2d+c2de,a2d2+ad2e+bd2e,a2e2+abe2+bce2;
print(ext(2,I));
==> 1,0,0,0,0,0,0,
==> 0,1,0,0,0,0,0,
==> 0,0,1,0,0,0,0,
==> 0,0,0,1,0,0,0,
==> 0,0,0,0,1,0,0,
==> 0,0,0,0,0,1,0,
==> 0,0,0,0,0,0,1
ext(3,I);   // too big to be displayed here
</FONT></pre></td></tr></table></P><P>

The library <CODE>homolog.lib</CODE> contains several procedures for computing
Ext-modules and related modules, which are much more general and
sophisticated than the above one. They are used in the following
example:
</P><P>

If 
<IMG
 WIDTH="22" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="sing_13.png"
 ALT="$M$"> is a module, then
<!-- MATH
 $\hbox{Ext}^1(M,M)$
 -->
<IMG
 WIDTH="90" HEIGHT="38" ALIGN="MIDDLE" BORDER="0"
 SRC="sing_356.png"
 ALT="$\hbox{Ext}^1(M,M)$">, resp. <!-- MATH
 $\hbox{Ext}^2(M,M)$
 -->
<IMG
 WIDTH="90" HEIGHT="38" ALIGN="MIDDLE" BORDER="0"
 SRC="sing_357.png"
 ALT="$\hbox{Ext}^2(M,M)$">,are the modules of infinitesimal deformations, respectively of obstructions,
of 
<IMG
 WIDTH="22" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="sing_13.png"
 ALT="$M$"> (like T1 and T2 for a singularity).  Similar to the treatment of
singularities, the semiuniversal deformation of 
<IMG
 WIDTH="22" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="sing_13.png"
 ALT="$M$"> can be computed (if
<IMG
 WIDTH="37" HEIGHT="18" ALIGN="BOTTOM" BORDER="0"
 SRC="sing_358.png"
 ALT="$\hbox{Ext}^1$">is finite dimensional) with the help of
<IMG
 WIDTH="37" HEIGHT="18" ALIGN="BOTTOM" BORDER="0"
 SRC="sing_358.png"
 ALT="$\hbox{Ext}^1$">, <IMG
 WIDTH="37" HEIGHT="18" ALIGN="BOTTOM" BORDER="0"
 SRC="sing_359.png"
 ALT="$\hbox{Ext}^2$">and the cup product.
There is an extra procedure for
<!-- MATH
 $\hbox{Ext}^k(R/J,R)$
 -->
<IMG
 WIDTH="98" HEIGHT="39" ALIGN="MIDDLE" BORDER="0"
 SRC="sing_360.png"
 ALT="$\hbox{Ext}^k(R/J,R)$">if 
<IMG
 WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="sing_361.png"
 ALT="$J$"> is an ideal in 
<IMG
 WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="sing_51.png"
 ALT="$R$">, since this is faster than the
general Ext.
</P><P>

We compute
<UL>
<LI>
the infinitesimal deformations
 (<!-- MATH
 $=\hbox{Ext}^1(K,K)$
 -->
<IMG
 WIDTH="102" HEIGHT="38" ALIGN="MIDDLE" BORDER="0"
 SRC="sing_362.png"
 ALT="$=\hbox{Ext}^1(K,K)$">)and obstructions
 (<!-- MATH
 $=\hbox{Ext}^2(K,K)$
 -->
<IMG
 WIDTH="102" HEIGHT="38" ALIGN="MIDDLE" BORDER="0"
 SRC="sing_363.png"
 ALT="$=\hbox{Ext}^2(K,K)$">)of the residue field 
<IMG
 WIDTH="75" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="sing_364.png"
 ALT="$K=R/m$"> of an ordinary cusp,
<!-- MATH
 $R=K[x,y]_m/(x^2-y^3)$
 -->
<IMG
 WIDTH="170" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="sing_365.png"
 ALT="$R=K[x,y]_m/(x^2-y^3)$">, <IMG
 WIDTH="77" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="sing_366.png"
 ALT="$m=(x,y)$">.To compute
<!-- MATH
 $\hbox{Ext}^1(m,m)$
 -->
<IMG
 WIDTH="84" HEIGHT="38" ALIGN="MIDDLE" BORDER="0"
 SRC="sing_367.png"
 ALT="$\hbox{Ext}^1(m,m)$">we have to apply <CODE>Ext(1,syz(m),syz(m))</CODE> with
<CODE>syz(m)</CODE> the first syzygy module of 
<IMG
 WIDTH="19" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="sing_292.png"
 ALT="$m$">, which is isomorphic to
<!-- MATH
 $\hbox{Ext}^2(K,K)$
 -->
<IMG
 WIDTH="85" HEIGHT="38" ALIGN="MIDDLE" BORDER="0"
 SRC="sing_368.png"
 ALT="$\hbox{Ext}^2(K,K)$">.<LI>
<!-- MATH
 $\hbox{Ext}^k(R/i,R)$
 -->
<IMG
 WIDTH="95" HEIGHT="39" ALIGN="MIDDLE" BORDER="0"
 SRC="sing_369.png"
 ALT="$\hbox{Ext}^k(R/i,R)$">for some ideal 
<IMG
 WIDTH="10" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="sing_55.png"
 ALT="$i$"> and with an extra option.
</UL>
<P>

<TABLE><tr><td>&nbsp;</td><td class=smallexample><FONT SIZE=-1><pre>  LIB "homolog.lib";
  ring R=0,(x,y),ds;
  ideal i=x2-y3;
  qring q = std(i);      // defines the quotient ring k[x,y]_m/(x2-y3)
  ideal m = maxideal(1);
  module T1K = Ext(1,m,m);  // computes Ext^1(R/m,R/m)
==> // dimension of Ext^1:  0
==> // vdim of Ext^1:       2
==> 
  print(T1K);
==> 0,x,0,y,
==> x,0,y,0 
  printlevel=2;             // gives more explanation
  module T2K=Ext(2,m,m);    // computes Ext^2(R/m,R/m)
==> // Computing Ext^2 (help Ext; gives an explanation):
==> // Let 0&lt;--coker(M)&lt;--F0&lt;--F1&lt;--F2&lt;--... be a resolution of coker(M),
==> // and 0&lt;--coker(N)&lt;--G0&lt;--G1 a presentation of coker(N),
==> // then Hom(F2,G0)--&gt;Hom(F3,G0) is given by:
==> y2,x,
==> x, y 
==> // and Hom(F1,G0) + Hom(F2,G1)--&gt;Hom(F2,G0) is given by:
==> -y,x,  x,0,y,0,
==> x, -y2,0,x,0,y 
==> 
==> // dimension of Ext^2:  0
==> // vdim of Ext^2:       2
==> 
  print(std(T2K));
==> 0,x,0,y,
==> x,0,y,0 
  printlevel=0;
  module E = Ext(1,syz(m),syz(m));
==> // dimension of Ext^1:  0
==> // vdim of Ext^1:       2
==> 
  print(std(E));
==> x, 0,-y2,x,0,y,
==> -y,0,x,  0,y,0,
==> 0, 1,0,  0,0,0,
==> 1, 0,0,  0,0,0 
  //The matrices which we have just computed are presentation matrices
  //of the modules T2K and E. Hence we may ignore those columns
  //containing 1 as an entry and see that T2K and E are isomorphic
  //as expected, but differently presented.
  //-------------------------------------------
  ring S=0,(x,y,z),dp;
  ideal  i = x2y,y2z,z3x;
  module E = Ext_R(2,i);
==> // dimension of Ext^2:  1
==> 
  print(E);
==> 0,y,0,z2,
==> z,0,0,-x,
==> 0,0,x,-y 
  // if a 3-rd argument of type int is given,
  // a list of Ext^k(R/i,R), a SB of Ext^k(R/i,R) and a vector space basis
  // is returned:
  list LE = Ext_R(3,i,0);
==> // dimension of Ext^3:  0
==> // vdim of Ext^3:       2
==> 
  LE;
==> [1]:
==>    _[1]=y*gen(1)
==>    _[2]=x*gen(1)
==>    _[3]=z2*gen(1)
==> [2]:
==>    _[1]=y*gen(1)
==>    _[2]=x*gen(1)
==>    _[3]=z2*gen(1)
==> [3]:
==>    _[1,1]=z
==>    _[1,2]=1
  print(LE[2]);
==> y,x,z2
  print(kbase(LE[2]));
==> z,1
</FONT></pre></td></tr></table></P><P>

<A NAME="Depth"></A>
</TD>
</TR>
</TABLE>
<HR SIZE=1>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">  <a href="index.htm"><img
    src="singular-icon-transparent.gif" width="50"
      border="0" ALT="Top"></a>
</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_862.htm#SEC913"><IMG SRC="a_left.gif" BORDER="0" ALT="Back: Handling graded modules" ALIGN="MIDDLE"></A></TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_864.htm#SEC915"><IMG SRC="a_right.gif" BORDER="0" ALT="Forward: Depth" ALIGN="MIDDLE"></A></TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_853.htm#SEC904"><IMG SRC="a_leftdouble.gif" BORDER="0" ALT="FastBack: Computing Groebner and Standard Bases" ALIGN="MIDDLE"></A></TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_870.htm#SEC921"><IMG SRC="a_rightdouble.gif" BORDER="0" ALT="FastForward: Singularity Theory" ALIGN="MIDDLE"></A></TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_857.htm#SEC908"><IMG SRC="a_up.gif" BORDER="0" ALT="Up: Commutative Algebra" ALIGN="MIDDLE"></A></TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="index.htm#SEC_Top"><IMG SRC="a_top.gif" BORDER="0" ALT="Top: Singular Manual" ALIGN="MIDDLE"></A></TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_toc.htm#SEC_Contents"><IMG SRC="a_tableofcon.gif" BORDER="0" ALT="Contents: Table of Contents" ALIGN="MIDDLE"></A></TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_2336.htm#SEC2422"><IMG SRC="a_index.gif" BORDER="0" ALT="Index: Index" ALIGN="MIDDLE"></A></TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_abt.htm#SEC_About"><IMG SRC="a_help.gif" BORDER="0" ALT="About: About this document" ALIGN="MIDDLE"></A></TD>
</TR></TABLE>
<FONT SIZE="-1">
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User manual for <A HREF="http://www.singular.uni-kl.de/"><I>Singular</I></A> version 4-0-2, 2015,
generated by <I>texi2html</I>.
</FONT>

</BODY>
</HTML>
