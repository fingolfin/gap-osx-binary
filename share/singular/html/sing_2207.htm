<HTML>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- Created on March, 4  2015 by texi2html 1.65 -->
<!--
Written by: Lionel Cons <Lionel.Cons@cern.ch> (original author)
            Karl Berry  <karl@freefriends.org>
            Olaf Bachmann <obachman@mathematik.uni-kl.de>
            and many others.
Maintained by: Olaf Bachmann <obachman@mathematik.uni-kl.de>
Send bugs and suggestions to <texi2html@mathematik.uni-kl.de>

-->
<HEAD>
<TITLE>Singular Manual: multiDegResolution</TITLE>

<META NAME="description" CONTENT="Singular Manual: multiDegResolution">
<META NAME="keywords" CONTENT="Singular Manual: multiDegResolution">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META NAME="Generator" CONTENT="texi2html 1.65">

</HEAD>

<BODY LANG="EN"  BACKGROUND="Mybg.gif">

<A NAME="SEC2282"></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR VALIGN="TOP">
<TD ALIGN="LEFT">
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT">  <a href="index.htm"><img
    src="singular-icon-transparent.gif" width="50"
      border="0" ALT="Top"></a>
</TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_2206.htm#SEC2281"><IMG SRC="a_left.gif" BORDER="0" ALT="Back: multiDegModulo" ALIGN="MIDDLE"></A></TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_2208.htm#SEC2283"><IMG SRC="a_right.gif" BORDER="0" ALT="Forward: multiDegTensor" ALIGN="MIDDLE"></A></TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_2163.htm#SEC2238"><IMG SRC="a_leftdouble.gif" BORDER="0" ALT="FastBack: modular_lib" ALIGN="MIDDLE"></A></TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_2217.htm#SEC2292"><IMG SRC="a_rightdouble.gif" BORDER="0" ALT="FastForward: numerAlg_lib" ALIGN="MIDDLE"></A></TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_2165.htm#SEC2240"><IMG SRC="a_up.gif" BORDER="0" ALT="Up: multigrading_lib" ALIGN="MIDDLE"></A></TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="index.htm#SEC_Top"><IMG SRC="a_top.gif" BORDER="0" ALT="Top: Singular Manual" ALIGN="MIDDLE"></A></TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_toc.htm#SEC_Contents"><IMG SRC="a_tableofcon.gif" BORDER="0" ALT="Contents: Table of Contents" ALIGN="MIDDLE"></A></TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_2336.htm#SEC2422"><IMG SRC="a_index.gif" BORDER="0" ALT="Index: Index" ALIGN="MIDDLE"></A></TD>
</TR>
<TR VALIGN="TOP" ALIGN="LEFT">
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_abt.htm#SEC_About"><IMG SRC="a_help.gif" BORDER="0" ALT="About: About this document" ALIGN="MIDDLE"></A></TD>
</TR>
</TABLE>
</TD>
<TD ALIGN="LEFT">
<H4> D.15.14.42 multiDegResolution </H4>
<!--docid::SEC2282::-->
Procedure from library <CODE>multigrading.lib</CODE> (see  <A HREF="sing_2165.htm#SEC2240">multigrading_lib</A>).
<P>

<DL COMPACT>
<DT><STRONG>Usage:</STRONG>
<DD>multiDegResolution(I,l,[f]); I is poly/vector/ideal/module; l,f are integers
<P>

<DT><STRONG>Purpose:</STRONG>
<DD>computes the multigraded resolution of I of the length l,
or the whole resolution if l is zero. Returns minimal resolution if an optional
argument 1 is supplied
<P>

<DT><STRONG>Note:</STRONG>
<DD>input must have multigraded-homogeneous generators.
<BR>The returned list is truncated beginning with the first zero differential.
<P>

<DT><STRONG>Returns:</STRONG>
<DD>list, the computed resolution
<P>

</DL>
<STRONG>Example:</STRONG>
<TABLE><tr><td>&nbsp;</td><td class=smallexample><FONT SIZE=-1><pre>LIB "multigrading.lib";
ring r = 0,(x,y,z,w),dp;
intmat M[2][4]=
1,1,1,1,
0,1,3,4;
setBaseMultigrading(M);
module m= ideal(  xw-yz, x2z-y3, xz2-y2w, yw2-z3);
isHomogeneous(ideal(  xw-yz, x2z-y3, xz2-y2w, yw2-z3), "checkGens");
==> 1
ideal A = xw-yz, x2z-y3, xz2-y2w, yw2-z3;
int j;
for(j=1; j&lt;=ncols(A); j++)
{
multiDegPartition(A[j]);
}
==> _[1]=-yz+xw
==> _[1]=-y3+x2z
==> _[1]=xz2-y2w
==> _[1]=-z3+yw2
intmat v[2][1]=
1,
0;
m = setModuleGrading(m, v);
// Let's compute Syzygy!
def S = multiDegSyzygy(m); S;
==> S[1]=yw*gen(1)-x*gen(4)-z*gen(3)
==> S[2]=z2*gen(1)-y*gen(4)-w*gen(3)
==> S[3]=xz*gen(1)+y*gen(3)-w*gen(2)
==> S[4]=y2*gen(1)+x*gen(3)-z*gen(2)
"Module Units Multigrading: "; print( getModuleGrading(S) );
==> Module Units Multigrading: 
==>      3     4     4     4
==>      4     3     6     9
"Multidegrees: "; print(multiDeg(S));
==> Multidegrees: 
==>      5     5     5     5
==>      9    10     7     6
/////////////////////////////////////////////////////////////////////////////
S = multiDegGroebner(S); S;
==> S[1]=yw*gen(1)-x*gen(4)-z*gen(3)
==> S[2]=z2*gen(1)-y*gen(4)-w*gen(3)
==> S[3]=xz*gen(1)+y*gen(3)-w*gen(2)
==> S[4]=y2*gen(1)+x*gen(3)-z*gen(2)
==> S[5]=xy*gen(4)+yz*gen(3)+xw*gen(3)-zw*gen(2)
==> S[6]=xz2*gen(4)+z3*gen(3)-y2w*gen(4)-yw2*gen(3)
==> S[7]=x2z*gen(4)+xz2*gen(3)+y2w*gen(3)-yw2*gen(2)
==> S[8]=y3*gen(3)-x2z*gen(3)+xz2*gen(2)-y2w*gen(2)
==> S[9]=y3*gen(4)+xz2*gen(3)-z3*gen(2)+y2w*gen(3)
"Module Units Multigrading: "; print( getModuleGrading(S) );
==> Module Units Multigrading: 
==>      3     4     4     4
==>      4     3     6     9
"Multidegrees: "; print(multiDeg(S));
==> Multidegrees: 
==>      5     5     5     5     6     7     7     7     7
==>      9    10     7     6    10    15    12     9    12
/////////////////////////////////////////////////////////////////////////////
list L = multiDegResolution(m, 0, 1);
for( j =1; j&lt;=size(L); j++)
{
"----------------------------------- ", j, " -----------------------------";
L[j];
"Module Multigrading: "; print( getModuleGrading(L[j]) );
"Multigrading: "; print(multiDeg(L[j]));
}
==> -----------------------------------  1  -----------------------------
==> _[1]=yz*gen(1)-xw*gen(1)
==> _[2]=z3*gen(1)-yw2*gen(1)
==> _[3]=xz2*gen(1)-y2w*gen(1)
==> _[4]=y3*gen(1)-x2z*gen(1)
==> Module Multigrading: 
==>      1
==>      0
==> Multigrading: 
==>      3     4     4     4
==>      4     9     6     3
==> -----------------------------------  2  -----------------------------
==> _[1]=yw*gen(1)-x*gen(2)+z*gen(3)
==> _[2]=z2*gen(1)-y*gen(2)+w*gen(3)
==> _[3]=xz*gen(1)-y*gen(3)-w*gen(4)
==> _[4]=y2*gen(1)-x*gen(3)-z*gen(4)
==> Module Multigrading: 
==>      3     4     4     4
==>      4     9     6     3
==> Multigrading: 
==>      5     5     5     5
==>      9    10     7     6
==> -----------------------------------  3  -----------------------------
==> _[1]=x*gen(2)-y*gen(1)-z*gen(3)+w*gen(4)
==> Module Multigrading: 
==>      5     5     5     5
==>      9    10     7     6
==> Multigrading: 
==>      6
==>     10
/////////////////////////////////////////////////////////////////////////////
L = multiDegResolution(maxideal(1), 0, 1);
for( j =1; j&lt;=size(L); j++)
{
"----------------------------------- ", j, " -----------------------------";
L[j];
"Module Multigrading: "; print( getModuleGrading(L[j]) );
"Multigrading: "; print(multiDeg(L[j]));
}
==> -----------------------------------  1  -----------------------------
==> _[1]=w
==> _[2]=z
==> _[3]=y
==> _[4]=x
==> Module Multigrading: 
==>      0
==>      0
==> Multigrading: 
==>      1     1     1     1
==>      4     3     1     0
==> -----------------------------------  2  -----------------------------
==> _[1]=-z*gen(1)+w*gen(2)
==> _[2]=-y*gen(1)+w*gen(3)
==> _[3]=-y*gen(2)+z*gen(3)
==> _[4]=-x*gen(1)+w*gen(4)
==> _[5]=-x*gen(2)+z*gen(4)
==> _[6]=-x*gen(3)+y*gen(4)
==> Module Multigrading: 
==>      1     1     1     1
==>      4     3     1     0
==> Multigrading: 
==>      2     2     2     2     2     2
==>      7     5     4     4     3     1
==> -----------------------------------  3  -----------------------------
==> _[1]=y*gen(1)-z*gen(2)+w*gen(3)
==> _[2]=x*gen(1)-z*gen(4)+w*gen(5)
==> _[3]=x*gen(2)-y*gen(4)+w*gen(6)
==> _[4]=x*gen(3)-y*gen(5)+z*gen(6)
==> Module Multigrading: 
==>      2     2     2     2     2     2
==>      7     5     4     4     3     1
==> Multigrading: 
==>      3     3     3     3
==>      8     7     5     4
==> -----------------------------------  4  -----------------------------
==> _[1]=-x*gen(1)+y*gen(2)-z*gen(3)+w*gen(4)
==> Module Multigrading: 
==>      3     3     3     3
==>      8     7     5     4
==> Multigrading: 
==>      4
==>      8
kill v;
def h = hilbertSeries(m);
==>  ------------ 
==> This proc returns a ring with polynomials called 'numerator1/2' and 'deno\
   minator1/2'!
==> They represent the first and the second Hilbert Series.
==> The s_(i)-variables are defined to be the inverse of the t_(i)-variables.
==>  ------------ 
setring h;
numerator1;
==> -t_(1)^6*t_(2)^10+t_(1)^5*t_(2)^10+t_(1)^5*t_(2)^9-t_(1)^4*t_(2)^9+t_(1)^\
   5*t_(2)^7+t_(1)^5*t_(2)^6-t_(1)^4*t_(2)^6-t_(1)^4*t_(2)^3-t_(1)^3*t_(2)^4\
   +t_(1)
factorize(numerator1);
==> [1]:
==>    _[1]=-1
==>    _[2]=t_(1)
==>    _[3]=t_(1)^3*t_(2)^6-t_(1)^2*t_(2)^6-t_(1)^2*t_(2)^2-t_(1)*t_(2)^3-t_(\
   1)*t_(2)-1
==>    _[4]=t_(1)*t_(2)^3-1
==>    _[5]=t_(1)*t_(2)-1
==> [2]:
==>    1,1,1,1,1
denominator1;
==> t_(1)^4*t_(2)^8-t_(1)^3*t_(2)^8-t_(1)^3*t_(2)^7+t_(1)^2*t_(2)^7-t_(1)^3*t\
   _(2)^5-t_(1)^3*t_(2)^4+t_(1)^2*t_(2)^5+2*t_(1)^2*t_(2)^4+t_(1)^2*t_(2)^3-\
   t_(1)*t_(2)^4-t_(1)*t_(2)^3+t_(1)^2*t_(2)-t_(1)*t_(2)-t_(1)+1
factorize(denominator1);
==> [1]:
==>    _[1]=1
==>    _[2]=t_(1)-1
==>    _[3]=t_(1)*t_(2)-1
==>    _[4]=t_(1)*t_(2)^4-1
==>    _[5]=t_(1)*t_(2)^3-1
==> [2]:
==>    1,1,1,1,1
numerator2;
==> -t_(1)^4*t_(2)^6+t_(1)^3*t_(2)^6+t_(1)^3*t_(2)^2+t_(1)^2*t_(2)^3+t_(1)^2*\
   t_(2)+t_(1)
factorize(numerator2);
==> [1]:
==>    _[1]=-1
==>    _[2]=t_(1)
==>    _[3]=t_(1)^3*t_(2)^6-t_(1)^2*t_(2)^6-t_(1)^2*t_(2)^2-t_(1)*t_(2)^3-t_(\
   1)*t_(2)-1
==> [2]:
==>    1,1,1
denominator2;
==> t_(1)^2*t_(2)^4-t_(1)*t_(2)^4-t_(1)+1
factorize(denominator2);
==> [1]:
==>    _[1]=1
==>    _[2]=t_(1)-1
==>    _[3]=t_(1)*t_(2)^4-1
==> [2]:
==>    1,1,1
</FONT></pre></td></tr></table><P>

<A NAME="multiDegTensor"></A>
</TD>
</TR>
</TABLE>
<HR SIZE=1>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">  <a href="index.htm"><img
    src="singular-icon-transparent.gif" width="50"
      border="0" ALT="Top"></a>
</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_2206.htm#SEC2281"><IMG SRC="a_left.gif" BORDER="0" ALT="Back: multiDegModulo" ALIGN="MIDDLE"></A></TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_2208.htm#SEC2283"><IMG SRC="a_right.gif" BORDER="0" ALT="Forward: multiDegTensor" ALIGN="MIDDLE"></A></TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_2163.htm#SEC2238"><IMG SRC="a_leftdouble.gif" BORDER="0" ALT="FastBack: modular_lib" ALIGN="MIDDLE"></A></TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_2217.htm#SEC2292"><IMG SRC="a_rightdouble.gif" BORDER="0" ALT="FastForward: numerAlg_lib" ALIGN="MIDDLE"></A></TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_2165.htm#SEC2240"><IMG SRC="a_up.gif" BORDER="0" ALT="Up: multigrading_lib" ALIGN="MIDDLE"></A></TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="index.htm#SEC_Top"><IMG SRC="a_top.gif" BORDER="0" ALT="Top: Singular Manual" ALIGN="MIDDLE"></A></TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_toc.htm#SEC_Contents"><IMG SRC="a_tableofcon.gif" BORDER="0" ALT="Contents: Table of Contents" ALIGN="MIDDLE"></A></TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_2336.htm#SEC2422"><IMG SRC="a_index.gif" BORDER="0" ALT="Index: Index" ALIGN="MIDDLE"></A></TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"><A HREF="sing_abt.htm#SEC_About"><IMG SRC="a_help.gif" BORDER="0" ALT="About: About this document" ALIGN="MIDDLE"></A></TD>
</TR></TABLE>
<FONT SIZE="-1">
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; User manual for <A HREF="http://www.singular.uni-kl.de/"><I>Singular</I></A> version 4-0-2, 2015,
generated by <I>texi2html</I>.
</FONT>

</BODY>
</HTML>
